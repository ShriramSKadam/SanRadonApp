//
// InspectionDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class InspectionDetails: Codable {

    public var inspectionImages: [Image]?
    public var checkListItems: [Checklistitem]?
    public var deviceReadings: [DeviceReading]?
    public var calibrationFactors: [CalibrationFactor]?
    public var customerAddress: Address?
    public var customerShippingAddress: Address?
    public var device: Device?
    public var testId: String?
    public var testerName: String?
    public var customerId: Int64?
    public var customerName: String?
    public var customerAddress1: String?
    public var dateandTime: String?
    public var status: String?
    public var timeZone: String?
    public var timeDifference: String?
    public var licenseTypeId: Int?
    public var licenseType: String?
    public var motionErrors: [Motionerror]?
    public var actionLevels: [Actionlevel]?
    public var inspectionUser: AppUser?
    public var inspectionactionlevel: Double?
    public var inspectionTestStatus: String?
    public var inspectionStartTime: String?
    public var inspectionComplete: String?
    public var expirationDate: String?
    public var discriptions: String?
    public var deviceModelTypeId: String?
    public var testNumber: String?
    public var deviceId: Int64?
    public var customerAddressId: Int64?
    public var customerShippingAddressId: Int64?
    public var testedById: Int64?
    public var startDateTime: String?
    public var endDateTime: String?
    public var filteredStartTime: String?
    public var filteredEndTime: String?
    public var hoursDelayed: Int?
    public var testResultId: Int64?
    public var atmosphericConditionsIndex: Int?
    public var comment: String?
    public var isMitigationSystemsInstalled: Bool?
    public var ismitigationSystemsWorking: Bool?
    public var squareFootage: Int?
    public var windDirectionIndex: Int64?
    public var windSpeedIndex: Int64?
    public var monitorLocationId: Int64?
    public var monitorFirmwareVersion: String?
    public var monitorPin: String?
    public var monitorPressureUnitTypeId: Int64?
    public var monitorRadonUnitTypeId: Int64?
    public var monitorSerialNumber: String?
    public var monitorTemperatureUnitTypeId: Int64?
    public var measurementInterval: Int?
    public var licenseNumberDuringInspection: String?
    public var batteryLevelDuringInspection: Int?
    public var inspectionStatusId: Int?
    public var inspectionReviewStatusId: Int?
    public var customerEmail: String?
    public var reviewComments: String?
    public var licenseNo: String?
    public var overrideTestResultId: Int64?
    public var yearBuilt: Int?
    public var structureType: String?
    public var monitorLocation: String?
    public var isMitigationSystemInstalled: Bool?
    public var isMitigationSystemActive: Bool?
    public var testSpecificComment: String?
    public var invoiceAmount: Double?
    public var amountPrepaid: Double?
    public var isSelectedOverridetestResultId: Bool?
    public var isSelectedYearBuilt: Bool?
    public var isSelectedSquareFootage: Bool?
    public var isSelectedStructureType: Bool?
    public var isSelectedMonitorLocation: Bool?
    public var isSelectedIsMitigationSystemInstalled: Bool?
    public var isSelectedIsMitigationSystemActive: Bool?
    public var isSelectedTestSpecificComment: Bool?
    public var isSelectedStructureTypeId: Bool?
    public var isSelectedWindDirectionIndex: Bool?
    public var isSelectedWindSpeedIndex: Bool?
    public var isSelectedRadonRiskInformation: Bool?
    public var isSelectedUnderstandingOfTestResults: Bool?
    public var isDeleted: Bool?
    public var buildingtype: Int?
    public var inspectionType: Int?
    public var inspectedBy: String?
    public var measurementCount: Int?
    public var percentComplete: Int?
    public var latitude: Double?
    public var longitude: Double?
    public var inspectionActionLevel: Double?
    public var inspectionAddress: String?
    public var isselectatmosphericconditions: Bool?
    public var dataSync: String?
    public var testDuration: Int?
    public var updateRadonUnits: Int?
    public var inputData: String?
    public var appVersion: String?
    public var platformName: String?
    public var platformVersion: String?
    public var isSelectedbuildingType: Bool?
    public var isSelectedInspectionType: Bool?
    public var cpuArchitecture: String?
    public var epaCounts: [Int]?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(inspectionImages: [Image]?, checkListItems: [Checklistitem]?, deviceReadings: [DeviceReading]?, calibrationFactors: [CalibrationFactor]?, customerAddress: Address?, customerShippingAddress: Address?, device: Device?, testId: String?, testerName: String?, customerId: Int64?, customerName: String?, customerAddress1: String?, dateandTime: String?, status: String?, timeZone: String?, timeDifference: String?, licenseTypeId: Int?, licenseType: String?, motionErrors: [Motionerror]?, actionLevels: [Actionlevel]?, inspectionUser: AppUser?, inspectionactionlevel: Double?, inspectionTestStatus: String?, inspectionStartTime: String?, inspectionComplete: String?, expirationDate: String?, discriptions: String?, deviceModelTypeId: String?, testNumber: String?, deviceId: Int64?, customerAddressId: Int64?, customerShippingAddressId: Int64?, testedById: Int64?, startDateTime: String?, endDateTime: String?, filteredStartTime: String?, filteredEndTime: String?, hoursDelayed: Int?, testResultId: Int64?, atmosphericConditionsIndex: Int?, comment: String?, isMitigationSystemsInstalled: Bool?, ismitigationSystemsWorking: Bool?, squareFootage: Int?, windDirectionIndex: Int64?, windSpeedIndex: Int64?, monitorLocationId: Int64?, monitorFirmwareVersion: String?, monitorPin: String?, monitorPressureUnitTypeId: Int64?, monitorRadonUnitTypeId: Int64?, monitorSerialNumber: String?, monitorTemperatureUnitTypeId: Int64?, measurementInterval: Int?, licenseNumberDuringInspection: String?, batteryLevelDuringInspection: Int?, inspectionStatusId: Int?, inspectionReviewStatusId: Int?, customerEmail: String?, reviewComments: String?, licenseNo: String?, overrideTestResultId: Int64?, yearBuilt: Int?, structureType: String?, monitorLocation: String?, isMitigationSystemInstalled: Bool?, isMitigationSystemActive: Bool?, testSpecificComment: String?, invoiceAmount: Double?, amountPrepaid: Double?, isSelectedOverridetestResultId: Bool?, isSelectedYearBuilt: Bool?, isSelectedSquareFootage: Bool?, isSelectedStructureType: Bool?, isSelectedMonitorLocation: Bool?, isSelectedIsMitigationSystemInstalled: Bool?, isSelectedIsMitigationSystemActive: Bool?, isSelectedTestSpecificComment: Bool?, isSelectedStructureTypeId: Bool?, isSelectedWindDirectionIndex: Bool?, isSelectedWindSpeedIndex: Bool?, isSelectedRadonRiskInformation: Bool?, isSelectedUnderstandingOfTestResults: Bool?, isDeleted: Bool?, buildingtype: Int?, inspectionType: Int?, inspectedBy: String?, measurementCount: Int?, percentComplete: Int?, latitude: Double?, longitude: Double?, inspectionActionLevel: Double?, inspectionAddress: String?, isselectatmosphericconditions: Bool?, dataSync: String?, testDuration: Int?, updateRadonUnits: Int?, inputData: String?, appVersion: String?, platformName: String?, platformVersion: String?, isSelectedbuildingType: Bool?, isSelectedInspectionType: Bool?, cpuArchitecture: String?, epaCounts: [Int]?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.inspectionImages = inspectionImages
        self.checkListItems = checkListItems
        self.deviceReadings = deviceReadings
        self.calibrationFactors = calibrationFactors
        self.customerAddress = customerAddress
        self.customerShippingAddress = customerShippingAddress
        self.device = device
        self.testId = testId
        self.testerName = testerName
        self.customerId = customerId
        self.customerName = customerName
        self.customerAddress1 = customerAddress1
        self.dateandTime = dateandTime
        self.status = status
        self.timeZone = timeZone
        self.timeDifference = timeDifference
        self.licenseTypeId = licenseTypeId
        self.licenseType = licenseType
        self.motionErrors = motionErrors
        self.actionLevels = actionLevels
        self.inspectionUser = inspectionUser
        self.inspectionactionlevel = inspectionactionlevel
        self.inspectionTestStatus = inspectionTestStatus
        self.inspectionStartTime = inspectionStartTime
        self.inspectionComplete = inspectionComplete
        self.expirationDate = expirationDate
        self.discriptions = discriptions
        self.deviceModelTypeId = deviceModelTypeId
        self.testNumber = testNumber
        self.deviceId = deviceId
        self.customerAddressId = customerAddressId
        self.customerShippingAddressId = customerShippingAddressId
        self.testedById = testedById
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime
        self.filteredStartTime = filteredStartTime
        self.filteredEndTime = filteredEndTime
        self.hoursDelayed = hoursDelayed
        self.testResultId = testResultId
        self.atmosphericConditionsIndex = atmosphericConditionsIndex
        self.comment = comment
        self.isMitigationSystemsInstalled = isMitigationSystemsInstalled
        self.ismitigationSystemsWorking = ismitigationSystemsWorking
        self.squareFootage = squareFootage
        self.windDirectionIndex = windDirectionIndex
        self.windSpeedIndex = windSpeedIndex
        self.monitorLocationId = monitorLocationId
        self.monitorFirmwareVersion = monitorFirmwareVersion
        self.monitorPin = monitorPin
        self.monitorPressureUnitTypeId = monitorPressureUnitTypeId
        self.monitorRadonUnitTypeId = monitorRadonUnitTypeId
        self.monitorSerialNumber = monitorSerialNumber
        self.monitorTemperatureUnitTypeId = monitorTemperatureUnitTypeId
        self.measurementInterval = measurementInterval
        self.licenseNumberDuringInspection = licenseNumberDuringInspection
        self.batteryLevelDuringInspection = batteryLevelDuringInspection
        self.inspectionStatusId = inspectionStatusId
        self.inspectionReviewStatusId = inspectionReviewStatusId
        self.customerEmail = customerEmail
        self.reviewComments = reviewComments
        self.licenseNo = licenseNo
        self.overrideTestResultId = overrideTestResultId
        self.yearBuilt = yearBuilt
        self.structureType = structureType
        self.monitorLocation = monitorLocation
        self.isMitigationSystemInstalled = isMitigationSystemInstalled
        self.isMitigationSystemActive = isMitigationSystemActive
        self.testSpecificComment = testSpecificComment
        self.invoiceAmount = invoiceAmount
        self.amountPrepaid = amountPrepaid
        self.isSelectedOverridetestResultId = isSelectedOverridetestResultId
        self.isSelectedYearBuilt = isSelectedYearBuilt
        self.isSelectedSquareFootage = isSelectedSquareFootage
        self.isSelectedStructureType = isSelectedStructureType
        self.isSelectedMonitorLocation = isSelectedMonitorLocation
        self.isSelectedIsMitigationSystemInstalled = isSelectedIsMitigationSystemInstalled
        self.isSelectedIsMitigationSystemActive = isSelectedIsMitigationSystemActive
        self.isSelectedTestSpecificComment = isSelectedTestSpecificComment
        self.isSelectedStructureTypeId = isSelectedStructureTypeId
        self.isSelectedWindDirectionIndex = isSelectedWindDirectionIndex
        self.isSelectedWindSpeedIndex = isSelectedWindSpeedIndex
        self.isSelectedRadonRiskInformation = isSelectedRadonRiskInformation
        self.isSelectedUnderstandingOfTestResults = isSelectedUnderstandingOfTestResults
        self.isDeleted = isDeleted
        self.buildingtype = buildingtype
        self.inspectionType = inspectionType
        self.inspectedBy = inspectedBy
        self.measurementCount = measurementCount
        self.percentComplete = percentComplete
        self.latitude = latitude
        self.longitude = longitude
        self.inspectionActionLevel = inspectionActionLevel
        self.inspectionAddress = inspectionAddress
        self.isselectatmosphericconditions = isselectatmosphericconditions
        self.dataSync = dataSync
        self.testDuration = testDuration
        self.updateRadonUnits = updateRadonUnits
        self.inputData = inputData
        self.appVersion = appVersion
        self.platformName = platformName
        self.platformVersion = platformVersion
        self.isSelectedbuildingType = isSelectedbuildingType
        self.isSelectedInspectionType = isSelectedInspectionType
        self.cpuArchitecture = cpuArchitecture
        self.epaCounts = epaCounts
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(inspectionImages, forKey: "inspectionImages")
        try container.encodeIfPresent(checkListItems, forKey: "checkListItems")
        try container.encodeIfPresent(deviceReadings, forKey: "deviceReadings")
        try container.encodeIfPresent(calibrationFactors, forKey: "calibrationFactors")
        try container.encodeIfPresent(customerAddress, forKey: "customerAddress")
        try container.encodeIfPresent(customerShippingAddress, forKey: "customerShippingAddress")
        try container.encodeIfPresent(device, forKey: "device")
        try container.encodeIfPresent(testId, forKey: "testId")
        try container.encodeIfPresent(testerName, forKey: "testerName")
        try container.encodeIfPresent(customerId, forKey: "customerId")
        try container.encodeIfPresent(customerName, forKey: "customerName")
        try container.encodeIfPresent(customerAddress1, forKey: "customerAddress1")
        try container.encodeIfPresent(dateandTime, forKey: "dateandTime")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(timeZone, forKey: "timeZone")
        try container.encodeIfPresent(timeDifference, forKey: "timeDifference")
        try container.encodeIfPresent(licenseTypeId, forKey: "licenseTypeId")
        try container.encodeIfPresent(licenseType, forKey: "licenseType")
        try container.encodeIfPresent(motionErrors, forKey: "motionErrors")
        try container.encodeIfPresent(actionLevels, forKey: "actionLevels")
        try container.encodeIfPresent(inspectionUser, forKey: "inspectionUser")
        try container.encodeIfPresent(inspectionactionlevel, forKey: "inspectionactionlevel")
        try container.encodeIfPresent(inspectionTestStatus, forKey: "inspectionTestStatus")
        try container.encodeIfPresent(inspectionStartTime, forKey: "inspectionStartTime")
        try container.encodeIfPresent(inspectionComplete, forKey: "inspection_Complete")
        try container.encodeIfPresent(expirationDate, forKey: "expirationDate")
        try container.encodeIfPresent(discriptions, forKey: "discriptions")
        try container.encodeIfPresent(deviceModelTypeId, forKey: "deviceModelTypeId")
        try container.encodeIfPresent(testNumber, forKey: "testNumber")
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encodeIfPresent(customerAddressId, forKey: "customerAddressId")
        try container.encodeIfPresent(customerShippingAddressId, forKey: "customerShippingAddressId")
        try container.encodeIfPresent(testedById, forKey: "testedById")
        try container.encodeIfPresent(startDateTime, forKey: "startDateTime")
        try container.encodeIfPresent(endDateTime, forKey: "endDateTime")
        try container.encodeIfPresent(filteredStartTime, forKey: "filteredStartTime")
        try container.encodeIfPresent(filteredEndTime, forKey: "filteredEndTime")
        try container.encodeIfPresent(hoursDelayed, forKey: "hoursDelayed")
        try container.encodeIfPresent(testResultId, forKey: "testResultId")
        try container.encodeIfPresent(atmosphericConditionsIndex, forKey: "atmosphericConditionsIndex")
        try container.encodeIfPresent(comment, forKey: "comment")
        try container.encodeIfPresent(isMitigationSystemsInstalled, forKey: "isMitigationSystemsInstalled")
        try container.encodeIfPresent(ismitigationSystemsWorking, forKey: "ismitigationSystemsWorking")
        try container.encodeIfPresent(squareFootage, forKey: "squareFootage")
        try container.encodeIfPresent(windDirectionIndex, forKey: "windDirectionIndex")
        try container.encodeIfPresent(windSpeedIndex, forKey: "windSpeedIndex")
        try container.encodeIfPresent(monitorLocationId, forKey: "monitorLocationId")
        try container.encodeIfPresent(monitorFirmwareVersion, forKey: "monitorFirmwareVersion")
        try container.encodeIfPresent(monitorPin, forKey: "monitorPin")
        try container.encodeIfPresent(monitorPressureUnitTypeId, forKey: "monitorPressureUnitTypeId")
        try container.encodeIfPresent(monitorRadonUnitTypeId, forKey: "monitorRadonUnitTypeId")
        try container.encodeIfPresent(monitorSerialNumber, forKey: "monitorSerialNumber")
        try container.encodeIfPresent(monitorTemperatureUnitTypeId, forKey: "monitorTemperatureUnitTypeId")
        try container.encodeIfPresent(measurementInterval, forKey: "measurementInterval")
        try container.encodeIfPresent(licenseNumberDuringInspection, forKey: "licenseNumberDuringInspection")
        try container.encodeIfPresent(batteryLevelDuringInspection, forKey: "batteryLevelDuringInspection")
        try container.encodeIfPresent(inspectionStatusId, forKey: "inspectionStatusId")
        try container.encodeIfPresent(inspectionReviewStatusId, forKey: "inspectionReviewStatusId")
        try container.encodeIfPresent(customerEmail, forKey: "customerEmail")
        try container.encodeIfPresent(reviewComments, forKey: "reviewComments")
        try container.encodeIfPresent(licenseNo, forKey: "licenseNo")
        try container.encodeIfPresent(overrideTestResultId, forKey: "overrideTestResultId")
        try container.encodeIfPresent(yearBuilt, forKey: "yearBuilt")
        try container.encodeIfPresent(structureType, forKey: "structureType")
        try container.encodeIfPresent(monitorLocation, forKey: "monitorLocation")
        try container.encodeIfPresent(isMitigationSystemInstalled, forKey: "isMitigationSystemInstalled")
        try container.encodeIfPresent(isMitigationSystemActive, forKey: "isMitigationSystemActive")
        try container.encodeIfPresent(testSpecificComment, forKey: "testSpecificComment")
        try container.encodeIfPresent(invoiceAmount, forKey: "invoiceAmount")
        try container.encodeIfPresent(amountPrepaid, forKey: "amountPrepaid")
        try container.encodeIfPresent(isSelectedOverridetestResultId, forKey: "isSelectedOverridetestResultId")
        try container.encodeIfPresent(isSelectedYearBuilt, forKey: "isSelectedYearBuilt")
        try container.encodeIfPresent(isSelectedSquareFootage, forKey: "isSelectedSquareFootage")
        try container.encodeIfPresent(isSelectedStructureType, forKey: "isSelectedStructureType")
        try container.encodeIfPresent(isSelectedMonitorLocation, forKey: "isSelectedMonitorLocation")
        try container.encodeIfPresent(isSelectedIsMitigationSystemInstalled, forKey: "isSelectedIsMitigationSystemInstalled")
        try container.encodeIfPresent(isSelectedIsMitigationSystemActive, forKey: "isSelectedIsMitigationSystemActive")
        try container.encodeIfPresent(isSelectedTestSpecificComment, forKey: "isSelectedTestSpecificComment")
        try container.encodeIfPresent(isSelectedStructureTypeId, forKey: "isSelectedStructureTypeId")
        try container.encodeIfPresent(isSelectedWindDirectionIndex, forKey: "isSelectedWindDirectionIndex")
        try container.encodeIfPresent(isSelectedWindSpeedIndex, forKey: "isSelectedWindSpeedIndex")
        try container.encodeIfPresent(isSelectedRadonRiskInformation, forKey: "isSelectedRadonRiskInformation")
        try container.encodeIfPresent(isSelectedUnderstandingOfTestResults, forKey: "isSelectedUnderstandingOfTestResults")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(buildingtype, forKey: "buildingtype")
        try container.encodeIfPresent(inspectionType, forKey: "inspectionType")
        try container.encodeIfPresent(inspectedBy, forKey: "inspectedBy")
        try container.encodeIfPresent(measurementCount, forKey: "measurementCount")
        try container.encodeIfPresent(percentComplete, forKey: "percentComplete")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(inspectionActionLevel, forKey: "inspectionActionLevel")
        try container.encodeIfPresent(inspectionAddress, forKey: "inspectionAddress")
        try container.encodeIfPresent(isselectatmosphericconditions, forKey: "isselectatmosphericconditions")
        try container.encodeIfPresent(dataSync, forKey: "dataSync")
        try container.encodeIfPresent(testDuration, forKey: "testDuration")
        try container.encodeIfPresent(updateRadonUnits, forKey: "updateRadonUnits")
        try container.encodeIfPresent(inputData, forKey: "inputData")
        try container.encodeIfPresent(appVersion, forKey: "appVersion")
        try container.encodeIfPresent(platformName, forKey: "platformName")
        try container.encodeIfPresent(platformVersion, forKey: "platformVersion")
        try container.encodeIfPresent(isSelectedbuildingType, forKey: "isSelectedbuildingType")
        try container.encodeIfPresent(isSelectedInspectionType, forKey: "isSelectedInspectionType")
        try container.encodeIfPresent(cpuArchitecture, forKey: "cpuArchitecture")
        try container.encodeIfPresent(epaCounts, forKey: "epaCounts")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        inspectionImages = try container.decodeIfPresent([Image].self, forKey: "inspectionImages")
        checkListItems = try container.decodeIfPresent([Checklistitem].self, forKey: "checkListItems")
        deviceReadings = try container.decodeIfPresent([DeviceReading].self, forKey: "deviceReadings")
        calibrationFactors = try container.decodeIfPresent([CalibrationFactor].self, forKey: "calibrationFactors")
        customerAddress = try container.decodeIfPresent(Address.self, forKey: "customerAddress")
        customerShippingAddress = try container.decodeIfPresent(Address.self, forKey: "customerShippingAddress")
        device = try container.decodeIfPresent(Device.self, forKey: "device")
        testId = try container.decodeIfPresent(String.self, forKey: "testId")
        testerName = try container.decodeIfPresent(String.self, forKey: "testerName")
        customerId = try container.decodeIfPresent(Int64.self, forKey: "customerId")
        customerName = try container.decodeIfPresent(String.self, forKey: "customerName")
        customerAddress1 = try container.decodeIfPresent(String.self, forKey: "customerAddress1")
        dateandTime = try container.decodeIfPresent(String.self, forKey: "dateandTime")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        timeZone = try container.decodeIfPresent(String.self, forKey: "timeZone")
        timeDifference = try container.decodeIfPresent(String.self, forKey: "timeDifference")
        licenseTypeId = try container.decodeIfPresent(Int.self, forKey: "licenseTypeId")
        licenseType = try container.decodeIfPresent(String.self, forKey: "licenseType")
        motionErrors = try container.decodeIfPresent([Motionerror].self, forKey: "motionErrors")
        actionLevels = try container.decodeIfPresent([Actionlevel].self, forKey: "actionLevels")
        inspectionUser = try container.decodeIfPresent(AppUser.self, forKey: "inspectionUser")
        inspectionactionlevel = try container.decodeIfPresent(Double.self, forKey: "inspectionactionlevel")
        inspectionTestStatus = try container.decodeIfPresent(String.self, forKey: "inspectionTestStatus")
        inspectionStartTime = try container.decodeIfPresent(String.self, forKey: "inspectionStartTime")
        inspectionComplete = try container.decodeIfPresent(String.self, forKey: "inspection_Complete")
        expirationDate = try container.decodeIfPresent(String.self, forKey: "expirationDate")
        discriptions = try container.decodeIfPresent(String.self, forKey: "discriptions")
        deviceModelTypeId = try container.decodeIfPresent(String.self, forKey: "deviceModelTypeId")
        testNumber = try container.decodeIfPresent(String.self, forKey: "testNumber")
        deviceId = try container.decodeIfPresent(Int64.self, forKey: "deviceId")
        customerAddressId = try container.decodeIfPresent(Int64.self, forKey: "customerAddressId")
        customerShippingAddressId = try container.decodeIfPresent(Int64.self, forKey: "customerShippingAddressId")
        testedById = try container.decodeIfPresent(Int64.self, forKey: "testedById")
        startDateTime = try container.decodeIfPresent(String.self, forKey: "startDateTime")
        endDateTime = try container.decodeIfPresent(String.self, forKey: "endDateTime")
        filteredStartTime = try container.decodeIfPresent(String.self, forKey: "filteredStartTime")
        filteredEndTime = try container.decodeIfPresent(String.self, forKey: "filteredEndTime")
        hoursDelayed = try container.decodeIfPresent(Int.self, forKey: "hoursDelayed")
        testResultId = try container.decodeIfPresent(Int64.self, forKey: "testResultId")
        atmosphericConditionsIndex = try container.decodeIfPresent(Int.self, forKey: "atmosphericConditionsIndex")
        comment = try container.decodeIfPresent(String.self, forKey: "comment")
        isMitigationSystemsInstalled = try container.decodeIfPresent(Bool.self, forKey: "isMitigationSystemsInstalled")
        ismitigationSystemsWorking = try container.decodeIfPresent(Bool.self, forKey: "ismitigationSystemsWorking")
        squareFootage = try container.decodeIfPresent(Int.self, forKey: "squareFootage")
        windDirectionIndex = try container.decodeIfPresent(Int64.self, forKey: "windDirectionIndex")
        windSpeedIndex = try container.decodeIfPresent(Int64.self, forKey: "windSpeedIndex")
        monitorLocationId = try container.decodeIfPresent(Int64.self, forKey: "monitorLocationId")
        monitorFirmwareVersion = try container.decodeIfPresent(String.self, forKey: "monitorFirmwareVersion")
        monitorPin = try container.decodeIfPresent(String.self, forKey: "monitorPin")
        monitorPressureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "monitorPressureUnitTypeId")
        monitorRadonUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "monitorRadonUnitTypeId")
        monitorSerialNumber = try container.decodeIfPresent(String.self, forKey: "monitorSerialNumber")
        monitorTemperatureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "monitorTemperatureUnitTypeId")
        measurementInterval = try container.decodeIfPresent(Int.self, forKey: "measurementInterval")
        licenseNumberDuringInspection = try container.decodeIfPresent(String.self, forKey: "licenseNumberDuringInspection")
        batteryLevelDuringInspection = try container.decodeIfPresent(Int.self, forKey: "batteryLevelDuringInspection")
        inspectionStatusId = try container.decodeIfPresent(Int.self, forKey: "inspectionStatusId")
        inspectionReviewStatusId = try container.decodeIfPresent(Int.self, forKey: "inspectionReviewStatusId")
        customerEmail = try container.decodeIfPresent(String.self, forKey: "customerEmail")
        reviewComments = try container.decodeIfPresent(String.self, forKey: "reviewComments")
        licenseNo = try container.decodeIfPresent(String.self, forKey: "licenseNo")
        overrideTestResultId = try container.decodeIfPresent(Int64.self, forKey: "overrideTestResultId")
        yearBuilt = try container.decodeIfPresent(Int.self, forKey: "yearBuilt")
        structureType = try container.decodeIfPresent(String.self, forKey: "structureType")
        monitorLocation = try container.decodeIfPresent(String.self, forKey: "monitorLocation")
        isMitigationSystemInstalled = try container.decodeIfPresent(Bool.self, forKey: "isMitigationSystemInstalled")
        isMitigationSystemActive = try container.decodeIfPresent(Bool.self, forKey: "isMitigationSystemActive")
        testSpecificComment = try container.decodeIfPresent(String.self, forKey: "testSpecificComment")
        invoiceAmount = try container.decodeIfPresent(Double.self, forKey: "invoiceAmount")
        amountPrepaid = try container.decodeIfPresent(Double.self, forKey: "amountPrepaid")
        isSelectedOverridetestResultId = try container.decodeIfPresent(Bool.self, forKey: "isSelectedOverridetestResultId")
        isSelectedYearBuilt = try container.decodeIfPresent(Bool.self, forKey: "isSelectedYearBuilt")
        isSelectedSquareFootage = try container.decodeIfPresent(Bool.self, forKey: "isSelectedSquareFootage")
        isSelectedStructureType = try container.decodeIfPresent(Bool.self, forKey: "isSelectedStructureType")
        isSelectedMonitorLocation = try container.decodeIfPresent(Bool.self, forKey: "isSelectedMonitorLocation")
        isSelectedIsMitigationSystemInstalled = try container.decodeIfPresent(Bool.self, forKey: "isSelectedIsMitigationSystemInstalled")
        isSelectedIsMitigationSystemActive = try container.decodeIfPresent(Bool.self, forKey: "isSelectedIsMitigationSystemActive")
        isSelectedTestSpecificComment = try container.decodeIfPresent(Bool.self, forKey: "isSelectedTestSpecificComment")
        isSelectedStructureTypeId = try container.decodeIfPresent(Bool.self, forKey: "isSelectedStructureTypeId")
        isSelectedWindDirectionIndex = try container.decodeIfPresent(Bool.self, forKey: "isSelectedWindDirectionIndex")
        isSelectedWindSpeedIndex = try container.decodeIfPresent(Bool.self, forKey: "isSelectedWindSpeedIndex")
        isSelectedRadonRiskInformation = try container.decodeIfPresent(Bool.self, forKey: "isSelectedRadonRiskInformation")
        isSelectedUnderstandingOfTestResults = try container.decodeIfPresent(Bool.self, forKey: "isSelectedUnderstandingOfTestResults")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        buildingtype = try container.decodeIfPresent(Int.self, forKey: "buildingtype")
        inspectionType = try container.decodeIfPresent(Int.self, forKey: "inspectionType")
        inspectedBy = try container.decodeIfPresent(String.self, forKey: "inspectedBy")
        measurementCount = try container.decodeIfPresent(Int.self, forKey: "measurementCount")
        percentComplete = try container.decodeIfPresent(Int.self, forKey: "percentComplete")
        latitude = try container.decodeIfPresent(Double.self, forKey: "latitude")
        longitude = try container.decodeIfPresent(Double.self, forKey: "longitude")
        inspectionActionLevel = try container.decodeIfPresent(Double.self, forKey: "inspectionActionLevel")
        inspectionAddress = try container.decodeIfPresent(String.self, forKey: "inspectionAddress")
        isselectatmosphericconditions = try container.decodeIfPresent(Bool.self, forKey: "isselectatmosphericconditions")
        dataSync = try container.decodeIfPresent(String.self, forKey: "dataSync")
        testDuration = try container.decodeIfPresent(Int.self, forKey: "testDuration")
        updateRadonUnits = try container.decodeIfPresent(Int.self, forKey: "updateRadonUnits")
        inputData = try container.decodeIfPresent(String.self, forKey: "inputData")
        appVersion = try container.decodeIfPresent(String.self, forKey: "appVersion")
        platformName = try container.decodeIfPresent(String.self, forKey: "platformName")
        platformVersion = try container.decodeIfPresent(String.self, forKey: "platformVersion")
        isSelectedbuildingType = try container.decodeIfPresent(Bool.self, forKey: "isSelectedbuildingType")
        isSelectedInspectionType = try container.decodeIfPresent(Bool.self, forKey: "isSelectedInspectionType")
        cpuArchitecture = try container.decodeIfPresent(String.self, forKey: "cpuArchitecture")
        epaCounts = try container.decodeIfPresent([Int].self, forKey: "epaCounts")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

