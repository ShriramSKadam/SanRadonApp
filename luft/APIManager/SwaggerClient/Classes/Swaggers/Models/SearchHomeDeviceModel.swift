//
// SearchHomeDeviceModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class SearchHomeDeviceModel: Codable {

    public var serialid: String?
    public var shareddeviceid: Int?
    public var name: String?
    public var isdeleted: Bool?
    public var latitudedevice: Double?
    public var longitudedevice: Double?
    public var ownername: String?
    public var ownerid: Int?
    public var owenercustomername: String?
    public var ownercustomeremail: String?
    public var shareduserid: Int?
    public var shareddevicename: String?
    public var isshareddevice: Bool?
    public var issharedeleted: Bool?
    public var sharedcustomername: String?
    public var sharedcustomeremail: String?
    public var sharedusername: String?
    public var readingtimestampfromdevice: String?
    public var deviceusertypeid: Int?
    public var devicelocation: String?
    public var deviceLatitude: Double?
    public var deviceLongtitude: Double?
    public var modelName: String?
    public var deviceTimeZone: String?
    public var devicetimeDifference: String?
    public var firmwareVersion: String?


    
    public init(serialid: String?, shareddeviceid: Int?, name: String?, isdeleted: Bool?, latitudedevice: Double?, longitudedevice: Double?, ownername: String?, ownerid: Int?, owenercustomername: String?, ownercustomeremail: String?, shareduserid: Int?, shareddevicename: String?, isshareddevice: Bool?, issharedeleted: Bool?, sharedcustomername: String?, sharedcustomeremail: String?, sharedusername: String?, readingtimestampfromdevice: String?, deviceusertypeid: Int?, devicelocation: String?, deviceLatitude: Double?, deviceLongtitude: Double?, modelName: String?, deviceTimeZone: String?, devicetimeDifference: String?, firmwareVersion: String?) {
        self.serialid = serialid
        self.shareddeviceid = shareddeviceid
        self.name = name
        self.isdeleted = isdeleted
        self.latitudedevice = latitudedevice
        self.longitudedevice = longitudedevice
        self.ownername = ownername
        self.ownerid = ownerid
        self.owenercustomername = owenercustomername
        self.ownercustomeremail = ownercustomeremail
        self.shareduserid = shareduserid
        self.shareddevicename = shareddevicename
        self.isshareddevice = isshareddevice
        self.issharedeleted = issharedeleted
        self.sharedcustomername = sharedcustomername
        self.sharedcustomeremail = sharedcustomeremail
        self.sharedusername = sharedusername
        self.readingtimestampfromdevice = readingtimestampfromdevice
        self.deviceusertypeid = deviceusertypeid
        self.devicelocation = devicelocation
        self.deviceLatitude = deviceLatitude
        self.deviceLongtitude = deviceLongtitude
        self.modelName = modelName
        self.deviceTimeZone = deviceTimeZone
        self.devicetimeDifference = devicetimeDifference
        self.firmwareVersion = firmwareVersion
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(serialid, forKey: "serialid")
        try container.encodeIfPresent(shareddeviceid, forKey: "shareddeviceid")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(isdeleted, forKey: "isdeleted")
        try container.encodeIfPresent(latitudedevice, forKey: "latitudedevice")
        try container.encodeIfPresent(longitudedevice, forKey: "longitudedevice")
        try container.encodeIfPresent(ownername, forKey: "ownername")
        try container.encodeIfPresent(ownerid, forKey: "ownerid")
        try container.encodeIfPresent(owenercustomername, forKey: "owenercustomername")
        try container.encodeIfPresent(ownercustomeremail, forKey: "ownercustomeremail")
        try container.encodeIfPresent(shareduserid, forKey: "shareduserid")
        try container.encodeIfPresent(shareddevicename, forKey: "shareddevicename")
        try container.encodeIfPresent(isshareddevice, forKey: "isshareddevice")
        try container.encodeIfPresent(issharedeleted, forKey: "issharedeleted")
        try container.encodeIfPresent(sharedcustomername, forKey: "sharedcustomername")
        try container.encodeIfPresent(sharedcustomeremail, forKey: "sharedcustomeremail")
        try container.encodeIfPresent(sharedusername, forKey: "sharedusername")
        try container.encodeIfPresent(readingtimestampfromdevice, forKey: "readingtimestampfromdevice")
        try container.encodeIfPresent(deviceusertypeid, forKey: "deviceusertypeid")
        try container.encodeIfPresent(devicelocation, forKey: "devicelocation")
        try container.encodeIfPresent(deviceLatitude, forKey: "deviceLatitude")
        try container.encodeIfPresent(deviceLongtitude, forKey: "deviceLongtitude")
        try container.encodeIfPresent(modelName, forKey: "modelName")
        try container.encodeIfPresent(deviceTimeZone, forKey: "deviceTimeZone")
        try container.encodeIfPresent(devicetimeDifference, forKey: "devicetimeDifference")
        try container.encodeIfPresent(firmwareVersion, forKey: "firmwareVersion")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        serialid = try container.decodeIfPresent(String.self, forKey: "serialid")
        shareddeviceid = try container.decodeIfPresent(Int.self, forKey: "shareddeviceid")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        isdeleted = try container.decodeIfPresent(Bool.self, forKey: "isdeleted")
        latitudedevice = try container.decodeIfPresent(Double.self, forKey: "latitudedevice")
        longitudedevice = try container.decodeIfPresent(Double.self, forKey: "longitudedevice")
        ownername = try container.decodeIfPresent(String.self, forKey: "ownername")
        ownerid = try container.decodeIfPresent(Int.self, forKey: "ownerid")
        owenercustomername = try container.decodeIfPresent(String.self, forKey: "owenercustomername")
        ownercustomeremail = try container.decodeIfPresent(String.self, forKey: "ownercustomeremail")
        shareduserid = try container.decodeIfPresent(Int.self, forKey: "shareduserid")
        shareddevicename = try container.decodeIfPresent(String.self, forKey: "shareddevicename")
        isshareddevice = try container.decodeIfPresent(Bool.self, forKey: "isshareddevice")
        issharedeleted = try container.decodeIfPresent(Bool.self, forKey: "issharedeleted")
        sharedcustomername = try container.decodeIfPresent(String.self, forKey: "sharedcustomername")
        sharedcustomeremail = try container.decodeIfPresent(String.self, forKey: "sharedcustomeremail")
        sharedusername = try container.decodeIfPresent(String.self, forKey: "sharedusername")
        readingtimestampfromdevice = try container.decodeIfPresent(String.self, forKey: "readingtimestampfromdevice")
        deviceusertypeid = try container.decodeIfPresent(Int.self, forKey: "deviceusertypeid")
        devicelocation = try container.decodeIfPresent(String.self, forKey: "devicelocation")
        deviceLatitude = try container.decodeIfPresent(Double.self, forKey: "deviceLatitude")
        deviceLongtitude = try container.decodeIfPresent(Double.self, forKey: "deviceLongtitude")
        modelName = try container.decodeIfPresent(String.self, forKey: "modelName")
        deviceTimeZone = try container.decodeIfPresent(String.self, forKey: "deviceTimeZone")
        devicetimeDifference = try container.decodeIfPresent(String.self, forKey: "devicetimeDifference")
        firmwareVersion = try container.decodeIfPresent(String.self, forKey: "firmwareVersion")
    }
}

