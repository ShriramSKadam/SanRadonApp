//
// AutoUploadModelInspection.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class AutoUploadModelInspection: Codable {

    public var deviceInformation: AutoUploadDeviceinformation?
    public var inspectionDefinition: Inspectiondefinition?
    public var monitorSettings: Monitorsettings?
    public var appInfo: AppInfo?
    public var percentComplete: Int?
    public var token: String?


    
    public init(deviceInformation: AutoUploadDeviceinformation?, inspectionDefinition: Inspectiondefinition?, monitorSettings: Monitorsettings?, appInfo: AppInfo?, percentComplete: Int?, token: String?) {
        self.deviceInformation = deviceInformation
        self.inspectionDefinition = inspectionDefinition
        self.monitorSettings = monitorSettings
        self.appInfo = appInfo
        self.percentComplete = percentComplete
        self.token = token
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(deviceInformation, forKey: "deviceInformation")
        try container.encodeIfPresent(inspectionDefinition, forKey: "inspectionDefinition")
        try container.encodeIfPresent(monitorSettings, forKey: "monitorSettings")
        try container.encodeIfPresent(appInfo, forKey: "appInfo")
        try container.encodeIfPresent(percentComplete, forKey: "percentComplete")
        try container.encodeIfPresent(token, forKey: "token")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        deviceInformation = try container.decodeIfPresent(AutoUploadDeviceinformation.self, forKey: "deviceInformation")
        inspectionDefinition = try container.decodeIfPresent(Inspectiondefinition.self, forKey: "inspectionDefinition")
        monitorSettings = try container.decodeIfPresent(Monitorsettings.self, forKey: "monitorSettings")
        appInfo = try container.decodeIfPresent(AppInfo.self, forKey: "appInfo")
        percentComplete = try container.decodeIfPresent(Int.self, forKey: "percentComplete")
        token = try container.decodeIfPresent(String.self, forKey: "token")
    }
}

