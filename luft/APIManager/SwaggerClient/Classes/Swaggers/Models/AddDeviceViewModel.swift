//
// AddDeviceViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Model with fields to add a device */

public class AddDeviceViewModel: Codable {
    
    /** Gets or sets the name. */
    public var name: String
    /** Gets or sets the serial identifier. */
    public var serialId: String
    /** Gets or sets the latitude. */
    public var latitude: Double?
    /** Gets or sets the longitude. */
    public var longitude: Double?
    /** Gets or sets the wifi ststus. */
    public var isWifiOn: Bool?
    /** get device time zone difference with utc time */
    public var timeDifference: String?
    /** get device time zone */
    public var timeZone: String?
    public var firmwareVersion: String?
    public var deviceTimeZoneFullName: String?
    
    public var macAddress: String?
    
    
    
    public init(name: String, serialId: String, latitude: Double?, longitude: Double?, isWifiOn: Bool?, timeDifference: String?, timeZone: String?, firmwareVersion: String?, deviceTimeZoneFullName: String?, macAddress: String?) {
        self.name = name
        self.serialId = serialId
        self.latitude = latitude
        self.longitude = longitude
        self.isWifiOn = isWifiOn
        self.timeDifference = timeDifference
        self.timeZone = timeZone
        self.firmwareVersion = firmwareVersion
        self.deviceTimeZoneFullName = deviceTimeZoneFullName
        self.macAddress = macAddress
    }
    
    
    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encode(name, forKey: "name")
        try container.encode(serialId, forKey: "serialId")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(isWifiOn, forKey: "isWifiOn")
        try container.encodeIfPresent(timeDifference, forKey: "timeDifference")
        try container.encodeIfPresent(timeZone, forKey: "timeZone")
        try container.encodeIfPresent(firmwareVersion, forKey: "firmwareVersion")
        try container.encodeIfPresent(deviceTimeZoneFullName, forKey: "deviceTimeZoneFullName")
        try container.encodeIfPresent(macAddress, forKey: "macAddress")
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        name = try container.decode(String.self, forKey: "name")
        serialId = try container.decode(String.self, forKey: "serialId")
        latitude = try container.decodeIfPresent(Double.self, forKey: "latitude")
        longitude = try container.decodeIfPresent(Double.self, forKey: "longitude")
        isWifiOn = try container.decodeIfPresent(Bool.self, forKey: "isWifiOn")
        timeDifference = try container.decodeIfPresent(String.self, forKey: "timeDifference")
        timeZone = try container.decodeIfPresent(String.self, forKey: "timeZone")
        firmwareVersion = try container.decodeIfPresent(String.self, forKey: "firmwareVersion")
        deviceTimeZoneFullName = try container.decodeIfPresent(String.self, forKey: "deviceTimeZoneFullName")
        macAddress = try container.decodeIfPresent(String.self, forKey: "macAddress")
    }
}

