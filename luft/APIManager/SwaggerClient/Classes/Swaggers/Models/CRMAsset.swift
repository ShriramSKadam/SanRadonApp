//
// CRMAsset.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class CRMAsset: Codable {

    public var id: String?
    public var serialNumber: String?
    public var productCode: String?
    public var name: String?
    public var contact: CRMContact?
    public var account: CRMAccount?
    public var hwWarrantyExp: String?
    public var serviceProductCode: String?
    public var serviceProductName: String?
    public var serviceStartDate: String?
    public var serviceEndDate: String?
    public var status: String?
    public var createdDate: String?
    public var systemModstamp: String?


    
    public init(id: String?, serialNumber: String?, productCode: String?, name: String?, contact: CRMContact?, account: CRMAccount?, hwWarrantyExp: String?, serviceProductCode: String?, serviceProductName: String?, serviceStartDate: String?, serviceEndDate: String?, status: String?, createdDate: String?, systemModstamp: String?) {
        self.id = id
        self.serialNumber = serialNumber
        self.productCode = productCode
        self.name = name
        self.contact = contact
        self.account = account
        self.hwWarrantyExp = hwWarrantyExp
        self.serviceProductCode = serviceProductCode
        self.serviceProductName = serviceProductName
        self.serviceStartDate = serviceStartDate
        self.serviceEndDate = serviceEndDate
        self.status = status
        self.createdDate = createdDate
        self.systemModstamp = systemModstamp
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        try container.encodeIfPresent(productCode, forKey: "productCode")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(contact, forKey: "contact")
        try container.encodeIfPresent(account, forKey: "account")
        try container.encodeIfPresent(hwWarrantyExp, forKey: "hwWarrantyExp")
        try container.encodeIfPresent(serviceProductCode, forKey: "serviceProductCode")
        try container.encodeIfPresent(serviceProductName, forKey: "serviceProductName")
        try container.encodeIfPresent(serviceStartDate, forKey: "serviceStartDate")
        try container.encodeIfPresent(serviceEndDate, forKey: "serviceEndDate")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(createdDate, forKey: "createdDate")
        try container.encodeIfPresent(systemModstamp, forKey: "systemModstamp")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(String.self, forKey: "id")
        serialNumber = try container.decodeIfPresent(String.self, forKey: "serialNumber")
        productCode = try container.decodeIfPresent(String.self, forKey: "productCode")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        contact = try container.decodeIfPresent(CRMContact.self, forKey: "contact")
        account = try container.decodeIfPresent(CRMAccount.self, forKey: "account")
        hwWarrantyExp = try container.decodeIfPresent(String.self, forKey: "hwWarrantyExp")
        serviceProductCode = try container.decodeIfPresent(String.self, forKey: "serviceProductCode")
        serviceProductName = try container.decodeIfPresent(String.self, forKey: "serviceProductName")
        serviceStartDate = try container.decodeIfPresent(String.self, forKey: "serviceStartDate")
        serviceEndDate = try container.decodeIfPresent(String.self, forKey: "serviceEndDate")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        createdDate = try container.decodeIfPresent(String.self, forKey: "createdDate")
        systemModstamp = try container.decodeIfPresent(String.self, forKey: "systemModstamp")
    }
}

