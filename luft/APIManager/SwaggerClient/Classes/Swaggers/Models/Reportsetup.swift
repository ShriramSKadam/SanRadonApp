//
// Reportsetup.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Reportsetup: Codable {

    public var amountPrepaid: Double?
    public var atmosphericConditionIndex: Int?
    public var comment: String?
    public var includeAtmosphericConditions: Bool?
    public var includeComment: Bool?
    public var includeMitigationSystemInstalled: Bool?
    public var includeMitigationSystemWorking: Bool?
    public var includeMonitorLocation: Bool?
    public var includeSquareFootage: Bool?
    public var includeStructureType: Bool?
    public var includeWindDirectionSpeed: Bool?
    public var includeYearBuilt: Bool?
    public var invoiceAmount: Double?
    public var mitigationSystemInstalled: Bool?
    public var mitigationSystemWorking: Bool?
    public var monitorLocation: String?
    public var overriddenResultIndex: Int?
    public var overrideResult: Bool?
    public var squareFootage: Int?
    public var structureType: String?
    public var windDirectionIndex: Int?
    public var windSpeedIndex: Int?
    public var yearBuilt: Int?
    public var buildingTypeIndex: Int?
    public var inspectionTypeIndex: Int?
    public var includeBuildingType: Bool?
    public var includeInspectionType: Bool?


    
    public init(amountPrepaid: Double?, atmosphericConditionIndex: Int?, comment: String?, includeAtmosphericConditions: Bool?, includeComment: Bool?, includeMitigationSystemInstalled: Bool?, includeMitigationSystemWorking: Bool?, includeMonitorLocation: Bool?, includeSquareFootage: Bool?, includeStructureType: Bool?, includeWindDirectionSpeed: Bool?, includeYearBuilt: Bool?, invoiceAmount: Double?, mitigationSystemInstalled: Bool?, mitigationSystemWorking: Bool?, monitorLocation: String?, overriddenResultIndex: Int?, overrideResult: Bool?, squareFootage: Int?, structureType: String?, windDirectionIndex: Int?, windSpeedIndex: Int?, yearBuilt: Int?, buildingTypeIndex: Int?, inspectionTypeIndex: Int?, includeBuildingType: Bool?, includeInspectionType: Bool?) {
        self.amountPrepaid = amountPrepaid
        self.atmosphericConditionIndex = atmosphericConditionIndex
        self.comment = comment
        self.includeAtmosphericConditions = includeAtmosphericConditions
        self.includeComment = includeComment
        self.includeMitigationSystemInstalled = includeMitigationSystemInstalled
        self.includeMitigationSystemWorking = includeMitigationSystemWorking
        self.includeMonitorLocation = includeMonitorLocation
        self.includeSquareFootage = includeSquareFootage
        self.includeStructureType = includeStructureType
        self.includeWindDirectionSpeed = includeWindDirectionSpeed
        self.includeYearBuilt = includeYearBuilt
        self.invoiceAmount = invoiceAmount
        self.mitigationSystemInstalled = mitigationSystemInstalled
        self.mitigationSystemWorking = mitigationSystemWorking
        self.monitorLocation = monitorLocation
        self.overriddenResultIndex = overriddenResultIndex
        self.overrideResult = overrideResult
        self.squareFootage = squareFootage
        self.structureType = structureType
        self.windDirectionIndex = windDirectionIndex
        self.windSpeedIndex = windSpeedIndex
        self.yearBuilt = yearBuilt
        self.buildingTypeIndex = buildingTypeIndex
        self.inspectionTypeIndex = inspectionTypeIndex
        self.includeBuildingType = includeBuildingType
        self.includeInspectionType = includeInspectionType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(amountPrepaid, forKey: "amountPrepaid")
        try container.encodeIfPresent(atmosphericConditionIndex, forKey: "atmosphericConditionIndex")
        try container.encodeIfPresent(comment, forKey: "comment")
        try container.encodeIfPresent(includeAtmosphericConditions, forKey: "includeAtmosphericConditions")
        try container.encodeIfPresent(includeComment, forKey: "includeComment")
        try container.encodeIfPresent(includeMitigationSystemInstalled, forKey: "includeMitigationSystemInstalled")
        try container.encodeIfPresent(includeMitigationSystemWorking, forKey: "includeMitigationSystemWorking")
        try container.encodeIfPresent(includeMonitorLocation, forKey: "includeMonitorLocation")
        try container.encodeIfPresent(includeSquareFootage, forKey: "includeSquareFootage")
        try container.encodeIfPresent(includeStructureType, forKey: "includeStructureType")
        try container.encodeIfPresent(includeWindDirectionSpeed, forKey: "includeWindDirectionSpeed")
        try container.encodeIfPresent(includeYearBuilt, forKey: "includeYearBuilt")
        try container.encodeIfPresent(invoiceAmount, forKey: "invoiceAmount")
        try container.encodeIfPresent(mitigationSystemInstalled, forKey: "mitigationSystemInstalled")
        try container.encodeIfPresent(mitigationSystemWorking, forKey: "mitigationSystemWorking")
        try container.encodeIfPresent(monitorLocation, forKey: "monitorLocation")
        try container.encodeIfPresent(overriddenResultIndex, forKey: "overriddenResultIndex")
        try container.encodeIfPresent(overrideResult, forKey: "overrideResult")
        try container.encodeIfPresent(squareFootage, forKey: "squareFootage")
        try container.encodeIfPresent(structureType, forKey: "structureType")
        try container.encodeIfPresent(windDirectionIndex, forKey: "windDirectionIndex")
        try container.encodeIfPresent(windSpeedIndex, forKey: "windSpeedIndex")
        try container.encodeIfPresent(yearBuilt, forKey: "yearBuilt")
        try container.encodeIfPresent(buildingTypeIndex, forKey: "buildingTypeIndex")
        try container.encodeIfPresent(inspectionTypeIndex, forKey: "inspectionTypeIndex")
        try container.encodeIfPresent(includeBuildingType, forKey: "includeBuildingType")
        try container.encodeIfPresent(includeInspectionType, forKey: "includeInspectionType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        amountPrepaid = try container.decodeIfPresent(Double.self, forKey: "amountPrepaid")
        atmosphericConditionIndex = try container.decodeIfPresent(Int.self, forKey: "atmosphericConditionIndex")
        comment = try container.decodeIfPresent(String.self, forKey: "comment")
        includeAtmosphericConditions = try container.decodeIfPresent(Bool.self, forKey: "includeAtmosphericConditions")
        includeComment = try container.decodeIfPresent(Bool.self, forKey: "includeComment")
        includeMitigationSystemInstalled = try container.decodeIfPresent(Bool.self, forKey: "includeMitigationSystemInstalled")
        includeMitigationSystemWorking = try container.decodeIfPresent(Bool.self, forKey: "includeMitigationSystemWorking")
        includeMonitorLocation = try container.decodeIfPresent(Bool.self, forKey: "includeMonitorLocation")
        includeSquareFootage = try container.decodeIfPresent(Bool.self, forKey: "includeSquareFootage")
        includeStructureType = try container.decodeIfPresent(Bool.self, forKey: "includeStructureType")
        includeWindDirectionSpeed = try container.decodeIfPresent(Bool.self, forKey: "includeWindDirectionSpeed")
        includeYearBuilt = try container.decodeIfPresent(Bool.self, forKey: "includeYearBuilt")
        invoiceAmount = try container.decodeIfPresent(Double.self, forKey: "invoiceAmount")
        mitigationSystemInstalled = try container.decodeIfPresent(Bool.self, forKey: "mitigationSystemInstalled")
        mitigationSystemWorking = try container.decodeIfPresent(Bool.self, forKey: "mitigationSystemWorking")
        monitorLocation = try container.decodeIfPresent(String.self, forKey: "monitorLocation")
        overriddenResultIndex = try container.decodeIfPresent(Int.self, forKey: "overriddenResultIndex")
        overrideResult = try container.decodeIfPresent(Bool.self, forKey: "overrideResult")
        squareFootage = try container.decodeIfPresent(Int.self, forKey: "squareFootage")
        structureType = try container.decodeIfPresent(String.self, forKey: "structureType")
        windDirectionIndex = try container.decodeIfPresent(Int.self, forKey: "windDirectionIndex")
        windSpeedIndex = try container.decodeIfPresent(Int.self, forKey: "windSpeedIndex")
        yearBuilt = try container.decodeIfPresent(Int.self, forKey: "yearBuilt")
        buildingTypeIndex = try container.decodeIfPresent(Int.self, forKey: "buildingTypeIndex")
        inspectionTypeIndex = try container.decodeIfPresent(Int.self, forKey: "inspectionTypeIndex")
        includeBuildingType = try container.decodeIfPresent(Bool.self, forKey: "includeBuildingType")
        includeInspectionType = try container.decodeIfPresent(Bool.self, forKey: "includeInspectionType")
    }
}

