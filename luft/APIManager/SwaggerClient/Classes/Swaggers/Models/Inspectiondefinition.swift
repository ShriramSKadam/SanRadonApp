//
// Inspectiondefinition.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Inspectiondefinition: Codable {

    public var inspectionHash: String
    public var coordinates: Coordinates?
    public var chartInformation: Chartinformation?
    public var endTime: String?
    public var epaAverage: Double?
    public var epaCounts: [Int]?
    public var filteredEndTime: String?
    public var filteredStartTime: String?
    public var hoursDelayed: Int?
    public var inspectedBy: String?
    public var measurementCount: Int?
    public var measurementInterval: Int?
    public var overallAverage: Double?
    public var radonUnit: Int?
    public var startTime: String?
    public var testDuration: Int?
    public var testResult: Int?


    
    public init(inspectionHash: String, coordinates: Coordinates?, chartInformation: Chartinformation?, endTime: String?, epaAverage: Double?, epaCounts: [Int]?, filteredEndTime: String?, filteredStartTime: String?, hoursDelayed: Int?, inspectedBy: String?, measurementCount: Int?, measurementInterval: Int?, overallAverage: Double?, radonUnit: Int?, startTime: String?, testDuration: Int?, testResult: Int?) {
        self.inspectionHash = inspectionHash
        self.coordinates = coordinates
        self.chartInformation = chartInformation
        self.endTime = endTime
        self.epaAverage = epaAverage
        self.epaCounts = epaCounts
        self.filteredEndTime = filteredEndTime
        self.filteredStartTime = filteredStartTime
        self.hoursDelayed = hoursDelayed
        self.inspectedBy = inspectedBy
        self.measurementCount = measurementCount
        self.measurementInterval = measurementInterval
        self.overallAverage = overallAverage
        self.radonUnit = radonUnit
        self.startTime = startTime
        self.testDuration = testDuration
        self.testResult = testResult
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(inspectionHash, forKey: "inspectionHash")
        try container.encodeIfPresent(coordinates, forKey: "coordinates")
        try container.encodeIfPresent(chartInformation, forKey: "chartInformation")
        try container.encodeIfPresent(endTime, forKey: "endTime")
        try container.encodeIfPresent(epaAverage, forKey: "epaAverage")
        try container.encodeIfPresent(epaCounts, forKey: "epaCounts")
        try container.encodeIfPresent(filteredEndTime, forKey: "filteredEndTime")
        try container.encodeIfPresent(filteredStartTime, forKey: "filteredStartTime")
        try container.encodeIfPresent(hoursDelayed, forKey: "hoursDelayed")
        try container.encodeIfPresent(inspectedBy, forKey: "inspectedBy")
        try container.encodeIfPresent(measurementCount, forKey: "measurementCount")
        try container.encodeIfPresent(measurementInterval, forKey: "measurementInterval")
        try container.encodeIfPresent(overallAverage, forKey: "overallAverage")
        try container.encodeIfPresent(radonUnit, forKey: "radonUnit")
        try container.encodeIfPresent(startTime, forKey: "startTime")
        try container.encodeIfPresent(testDuration, forKey: "testDuration")
        try container.encodeIfPresent(testResult, forKey: "testResult")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        inspectionHash = try container.decode(String.self, forKey: "inspectionHash")
        coordinates = try container.decodeIfPresent(Coordinates.self, forKey: "coordinates")
        chartInformation = try container.decodeIfPresent(Chartinformation.self, forKey: "chartInformation")
        endTime = try container.decodeIfPresent(String.self, forKey: "endTime")
        epaAverage = try container.decodeIfPresent(Double.self, forKey: "epaAverage")
        epaCounts = try container.decodeIfPresent([Int].self, forKey: "epaCounts")
        filteredEndTime = try container.decodeIfPresent(String.self, forKey: "filteredEndTime")
        filteredStartTime = try container.decodeIfPresent(String.self, forKey: "filteredStartTime")
        hoursDelayed = try container.decodeIfPresent(Int.self, forKey: "hoursDelayed")
        inspectedBy = try container.decodeIfPresent(String.self, forKey: "inspectedBy")
        measurementCount = try container.decodeIfPresent(Int.self, forKey: "measurementCount")
        measurementInterval = try container.decodeIfPresent(Int.self, forKey: "measurementInterval")
        overallAverage = try container.decodeIfPresent(Double.self, forKey: "overallAverage")
        radonUnit = try container.decodeIfPresent(Int.self, forKey: "radonUnit")
        startTime = try container.decodeIfPresent(String.self, forKey: "startTime")
        testDuration = try container.decodeIfPresent(Int.self, forKey: "testDuration")
        testResult = try container.decodeIfPresent(Int.self, forKey: "testResult")
    }
}

