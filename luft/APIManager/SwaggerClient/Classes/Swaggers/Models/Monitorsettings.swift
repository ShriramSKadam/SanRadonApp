//
// Monitorsettings.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Monitorsettings: Codable {

    public var firmwareVersion: String?
    public var pin: String?
    public var pressureUnit: String?
    public var radonUnit: Int?
    public var serialNumber: String?
    public var temperatureUnit: String?


    
    public init(firmwareVersion: String?, pin: String?, pressureUnit: String?, radonUnit: Int?, serialNumber: String?, temperatureUnit: String?) {
        self.firmwareVersion = firmwareVersion
        self.pin = pin
        self.pressureUnit = pressureUnit
        self.radonUnit = radonUnit
        self.serialNumber = serialNumber
        self.temperatureUnit = temperatureUnit
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(firmwareVersion, forKey: "firmwareVersion")
        try container.encodeIfPresent(pin, forKey: "pin")
        try container.encodeIfPresent(pressureUnit, forKey: "pressureUnit")
        try container.encodeIfPresent(radonUnit, forKey: "radonUnit")
        try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        try container.encodeIfPresent(temperatureUnit, forKey: "temperatureUnit")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        firmwareVersion = try container.decodeIfPresent(String.self, forKey: "firmwareVersion")
        pin = try container.decodeIfPresent(String.self, forKey: "pin")
        pressureUnit = try container.decodeIfPresent(String.self, forKey: "pressureUnit")
        radonUnit = try container.decodeIfPresent(Int.self, forKey: "radonUnit")
        serialNumber = try container.decodeIfPresent(String.self, forKey: "serialNumber")
        temperatureUnit = try container.decodeIfPresent(String.self, forKey: "temperatureUnit")
    }
}

