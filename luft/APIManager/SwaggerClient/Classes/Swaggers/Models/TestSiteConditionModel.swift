//
// TestSiteConditionModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class TestSiteConditionModel: Codable {

    public var isSelectTestResult: String?
    public var testResult: String?
    public var inspectionTestResult: String?
    public var isSelectCondition: String?
    public var condition: String?
    public var isSelectWind: String?
    public var wind: String?
    public var isSelectYearBuilt: String?
    public var yearBuilt: String?
    public var isSelectSqFt: String?
    public var sqFt: String?
    public var isSelectStructureType: String?
    public var structureType: String?
    public var isSelectMonitorLocation: String?
    public var monitorLocation: String?
    public var mitigationSystemInstalled: Bool?
    public var mitigationSystemActive: Bool?
    public var mitigation: String?
    public var isSelectTestSpecificComment: String?
    public var testSpecificComment: String?
    public var inspectedBy: String?
    public var invoiceAmount: String?
    public var amountPrepaid: String?
    public var isSelectInspectionType: String?
    public var inspectionType: String?
    public var isSelectBuildingType: String?
    public var buildingType: String?


    
    public init(isSelectTestResult: String?, testResult: String?, inspectionTestResult: String?, isSelectCondition: String?, condition: String?, isSelectWind: String?, wind: String?, isSelectYearBuilt: String?, yearBuilt: String?, isSelectSqFt: String?, sqFt: String?, isSelectStructureType: String?, structureType: String?, isSelectMonitorLocation: String?, monitorLocation: String?, mitigationSystemInstalled: Bool?, mitigationSystemActive: Bool?, mitigation: String?, isSelectTestSpecificComment: String?, testSpecificComment: String?, inspectedBy: String?, invoiceAmount: String?, amountPrepaid: String?, isSelectInspectionType: String?, inspectionType: String?, isSelectBuildingType: String?, buildingType: String?) {
        self.isSelectTestResult = isSelectTestResult
        self.testResult = testResult
        self.inspectionTestResult = inspectionTestResult
        self.isSelectCondition = isSelectCondition
        self.condition = condition
        self.isSelectWind = isSelectWind
        self.wind = wind
        self.isSelectYearBuilt = isSelectYearBuilt
        self.yearBuilt = yearBuilt
        self.isSelectSqFt = isSelectSqFt
        self.sqFt = sqFt
        self.isSelectStructureType = isSelectStructureType
        self.structureType = structureType
        self.isSelectMonitorLocation = isSelectMonitorLocation
        self.monitorLocation = monitorLocation
        self.mitigationSystemInstalled = mitigationSystemInstalled
        self.mitigationSystemActive = mitigationSystemActive
        self.mitigation = mitigation
        self.isSelectTestSpecificComment = isSelectTestSpecificComment
        self.testSpecificComment = testSpecificComment
        self.inspectedBy = inspectedBy
        self.invoiceAmount = invoiceAmount
        self.amountPrepaid = amountPrepaid
        self.isSelectInspectionType = isSelectInspectionType
        self.inspectionType = inspectionType
        self.isSelectBuildingType = isSelectBuildingType
        self.buildingType = buildingType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(isSelectTestResult, forKey: "isSelectTestResult")
        try container.encodeIfPresent(testResult, forKey: "testResult")
        try container.encodeIfPresent(inspectionTestResult, forKey: "inspectionTestResult")
        try container.encodeIfPresent(isSelectCondition, forKey: "isSelectCondition")
        try container.encodeIfPresent(condition, forKey: "condition")
        try container.encodeIfPresent(isSelectWind, forKey: "isSelectWind")
        try container.encodeIfPresent(wind, forKey: "wind")
        try container.encodeIfPresent(isSelectYearBuilt, forKey: "isSelectYearBuilt")
        try container.encodeIfPresent(yearBuilt, forKey: "yearBuilt")
        try container.encodeIfPresent(isSelectSqFt, forKey: "isSelectSqFt")
        try container.encodeIfPresent(sqFt, forKey: "sqFt")
        try container.encodeIfPresent(isSelectStructureType, forKey: "isSelectStructureType")
        try container.encodeIfPresent(structureType, forKey: "structureType")
        try container.encodeIfPresent(isSelectMonitorLocation, forKey: "isSelectMonitorLocation")
        try container.encodeIfPresent(monitorLocation, forKey: "monitorLocation")
        try container.encodeIfPresent(mitigationSystemInstalled, forKey: "mitigationSystemInstalled")
        try container.encodeIfPresent(mitigationSystemActive, forKey: "mitigationSystemActive")
        try container.encodeIfPresent(mitigation, forKey: "mitigation")
        try container.encodeIfPresent(isSelectTestSpecificComment, forKey: "isSelectTestSpecificComment")
        try container.encodeIfPresent(testSpecificComment, forKey: "testSpecificComment")
        try container.encodeIfPresent(inspectedBy, forKey: "inspectedBy")
        try container.encodeIfPresent(invoiceAmount, forKey: "invoiceAmount")
        try container.encodeIfPresent(amountPrepaid, forKey: "amountPrepaid")
        try container.encodeIfPresent(isSelectInspectionType, forKey: "isSelectInspectionType")
        try container.encodeIfPresent(inspectionType, forKey: "inspectionType")
        try container.encodeIfPresent(isSelectBuildingType, forKey: "isSelectBuildingType")
        try container.encodeIfPresent(buildingType, forKey: "buildingType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        isSelectTestResult = try container.decodeIfPresent(String.self, forKey: "isSelectTestResult")
        testResult = try container.decodeIfPresent(String.self, forKey: "testResult")
        inspectionTestResult = try container.decodeIfPresent(String.self, forKey: "inspectionTestResult")
        isSelectCondition = try container.decodeIfPresent(String.self, forKey: "isSelectCondition")
        condition = try container.decodeIfPresent(String.self, forKey: "condition")
        isSelectWind = try container.decodeIfPresent(String.self, forKey: "isSelectWind")
        wind = try container.decodeIfPresent(String.self, forKey: "wind")
        isSelectYearBuilt = try container.decodeIfPresent(String.self, forKey: "isSelectYearBuilt")
        yearBuilt = try container.decodeIfPresent(String.self, forKey: "yearBuilt")
        isSelectSqFt = try container.decodeIfPresent(String.self, forKey: "isSelectSqFt")
        sqFt = try container.decodeIfPresent(String.self, forKey: "sqFt")
        isSelectStructureType = try container.decodeIfPresent(String.self, forKey: "isSelectStructureType")
        structureType = try container.decodeIfPresent(String.self, forKey: "structureType")
        isSelectMonitorLocation = try container.decodeIfPresent(String.self, forKey: "isSelectMonitorLocation")
        monitorLocation = try container.decodeIfPresent(String.self, forKey: "monitorLocation")
        mitigationSystemInstalled = try container.decodeIfPresent(Bool.self, forKey: "mitigationSystemInstalled")
        mitigationSystemActive = try container.decodeIfPresent(Bool.self, forKey: "mitigationSystemActive")
        mitigation = try container.decodeIfPresent(String.self, forKey: "mitigation")
        isSelectTestSpecificComment = try container.decodeIfPresent(String.self, forKey: "isSelectTestSpecificComment")
        testSpecificComment = try container.decodeIfPresent(String.self, forKey: "testSpecificComment")
        inspectedBy = try container.decodeIfPresent(String.self, forKey: "inspectedBy")
        invoiceAmount = try container.decodeIfPresent(String.self, forKey: "invoiceAmount")
        amountPrepaid = try container.decodeIfPresent(String.self, forKey: "amountPrepaid")
        isSelectInspectionType = try container.decodeIfPresent(String.self, forKey: "isSelectInspectionType")
        inspectionType = try container.decodeIfPresent(String.self, forKey: "inspectionType")
        isSelectBuildingType = try container.decodeIfPresent(String.self, forKey: "isSelectBuildingType")
        buildingType = try container.decodeIfPresent(String.self, forKey: "buildingType")
    }
}

