//
// Chartinformation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Chartinformation: Codable {

    public var actionLevel: [Actionlevel]?
    public var dectectorIntervalCountOverflowErrors: [Dectectorintervalcountoverflowerror]?
    public var displayAverageData: Bool?
    public var displayMotionErrors: Bool?
    public var measurementInterval: Int?
    public var motionErrors: [Motionerror]?
    public var pressureReadings: [Pressurereading]?
    public var vocReadings: [VOCReadings]?
    public var cO2Readings: [CO2Readings]?
    public var pressureSeriesTitle: String?
    public var radonAxisTitle: String?
    public var radonReadings: [Radonreading]?
    public var relativeHumidityReadings: [Relativehumidityreading]?
    public var temperatureReadings: [Temperaturereading]?
    public var temperatureSeriesTitle: String?


    
    public init(actionLevel: [Actionlevel]?, dectectorIntervalCountOverflowErrors: [Dectectorintervalcountoverflowerror]?, displayAverageData: Bool?, displayMotionErrors: Bool?, measurementInterval: Int?, motionErrors: [Motionerror]?, pressureReadings: [Pressurereading]?, vocReadings: [VOCReadings]?, cO2Readings: [CO2Readings]?, pressureSeriesTitle: String?, radonAxisTitle: String?, radonReadings: [Radonreading]?, relativeHumidityReadings: [Relativehumidityreading]?, temperatureReadings: [Temperaturereading]?, temperatureSeriesTitle: String?) {
        self.actionLevel = actionLevel
        self.dectectorIntervalCountOverflowErrors = dectectorIntervalCountOverflowErrors
        self.displayAverageData = displayAverageData
        self.displayMotionErrors = displayMotionErrors
        self.measurementInterval = measurementInterval
        self.motionErrors = motionErrors
        self.pressureReadings = pressureReadings
        self.vocReadings = vocReadings
        self.cO2Readings = cO2Readings
        self.pressureSeriesTitle = pressureSeriesTitle
        self.radonAxisTitle = radonAxisTitle
        self.radonReadings = radonReadings
        self.relativeHumidityReadings = relativeHumidityReadings
        self.temperatureReadings = temperatureReadings
        self.temperatureSeriesTitle = temperatureSeriesTitle
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(actionLevel, forKey: "actionLevel")
        try container.encodeIfPresent(dectectorIntervalCountOverflowErrors, forKey: "dectectorIntervalCountOverflowErrors")
        try container.encodeIfPresent(displayAverageData, forKey: "displayAverageData")
        try container.encodeIfPresent(displayMotionErrors, forKey: "displayMotionErrors")
        try container.encodeIfPresent(measurementInterval, forKey: "measurementInterval")
        try container.encodeIfPresent(motionErrors, forKey: "motionErrors")
        try container.encodeIfPresent(pressureReadings, forKey: "pressureReadings")
        try container.encodeIfPresent(vocReadings, forKey: "vocReadings")
        try container.encodeIfPresent(cO2Readings, forKey: "cO2Readings")
        try container.encodeIfPresent(pressureSeriesTitle, forKey: "pressureSeriesTitle")
        try container.encodeIfPresent(radonAxisTitle, forKey: "radonAxisTitle")
        try container.encodeIfPresent(radonReadings, forKey: "radonReadings")
        try container.encodeIfPresent(relativeHumidityReadings, forKey: "relativeHumidityReadings")
        try container.encodeIfPresent(temperatureReadings, forKey: "temperatureReadings")
        try container.encodeIfPresent(temperatureSeriesTitle, forKey: "temperatureSeriesTitle")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        actionLevel = try container.decodeIfPresent([Actionlevel].self, forKey: "actionLevel")
        dectectorIntervalCountOverflowErrors = try container.decodeIfPresent([Dectectorintervalcountoverflowerror].self, forKey: "dectectorIntervalCountOverflowErrors")
        displayAverageData = try container.decodeIfPresent(Bool.self, forKey: "displayAverageData")
        displayMotionErrors = try container.decodeIfPresent(Bool.self, forKey: "displayMotionErrors")
        measurementInterval = try container.decodeIfPresent(Int.self, forKey: "measurementInterval")
        motionErrors = try container.decodeIfPresent([Motionerror].self, forKey: "motionErrors")
        pressureReadings = try container.decodeIfPresent([Pressurereading].self, forKey: "pressureReadings")
        vocReadings = try container.decodeIfPresent([VOCReadings].self, forKey: "vocReadings")
        cO2Readings = try container.decodeIfPresent([CO2Readings].self, forKey: "cO2Readings")
        pressureSeriesTitle = try container.decodeIfPresent(String.self, forKey: "pressureSeriesTitle")
        radonAxisTitle = try container.decodeIfPresent(String.self, forKey: "radonAxisTitle")
        radonReadings = try container.decodeIfPresent([Radonreading].self, forKey: "radonReadings")
        relativeHumidityReadings = try container.decodeIfPresent([Relativehumidityreading].self, forKey: "relativeHumidityReadings")
        temperatureReadings = try container.decodeIfPresent([Temperaturereading].self, forKey: "temperatureReadings")
        temperatureSeriesTitle = try container.decodeIfPresent(String.self, forKey: "temperatureSeriesTitle")
    }
}

