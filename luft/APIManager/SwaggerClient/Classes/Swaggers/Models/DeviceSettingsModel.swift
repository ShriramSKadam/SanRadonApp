//
// DeviceSettingsModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class DeviceSettingsModel: Codable {

    public var radonThresholdWarningLevel: Double?
    public var radonThresholdAlertLevel: Double?
    public var temperatureThresholdHighWarningLevel: Double?
    public var temperatureThresholdLowalertLevel: Double?
    public var temperatureThresholdLowWarningLevel: Double?
    public var temperatureThresholdHighalertLevel: Double?
    public var humidityThresholdLowWarningLevel: Int?
    public var humidityThresholdHighWarningLevel: Int?
    public var humidityThresholdLowalertLevel: Int?
    public var humidityThresholdHighalertLevel: Int?
    public var airpressureThresholdLowWarningLevel: Double?
    public var airpressureThresholdHighWarningLevel: Double?
    public var airpressureThresholdLowalertLevel: Double?
    public var airpressureThresholdHighalertLevel: Double?
    public var co2ThresholdWarningLevel: Int?
    public var co2ThresholdAlertLevel: Int?
    public var vocThresholdWarningLevel: Int?
    public var vocThresholdAlertLevel: Int?
    public var okColorCode: String?
    public var warningColorCode: String?
    public var alertColorCode: String?
    public var nightlightColorCode: String?
    public var nightColorStartTime: Int64?
    public var nightColorEndTime: Int64?
    public var tempOffset: String?
    public var okColorCodeHex: String?
    public var warningColorCodeHex: String?
    public var alertColorCodeHex: String?
    public var nightlightColorCodeHex: String?
    public var deviceTimeDifference: String?
    public var deviceTimeZone: String?


    
    public init(radonThresholdWarningLevel: Double?, radonThresholdAlertLevel: Double?, temperatureThresholdHighWarningLevel: Double?, temperatureThresholdLowalertLevel: Double?, temperatureThresholdLowWarningLevel: Double?, temperatureThresholdHighalertLevel: Double?, humidityThresholdLowWarningLevel: Int?, humidityThresholdHighWarningLevel: Int?, humidityThresholdLowalertLevel: Int?, humidityThresholdHighalertLevel: Int?, airpressureThresholdLowWarningLevel: Double?, airpressureThresholdHighWarningLevel: Double?, airpressureThresholdLowalertLevel: Double?, airpressureThresholdHighalertLevel: Double?, co2ThresholdWarningLevel: Int?, co2ThresholdAlertLevel: Int?, vocThresholdWarningLevel: Int?, vocThresholdAlertLevel: Int?, okColorCode: String?, warningColorCode: String?, alertColorCode: String?, nightlightColorCode: String?, nightColorStartTime: Int64?, nightColorEndTime: Int64?, tempOffset: String?, okColorCodeHex: String?, warningColorCodeHex: String?, alertColorCodeHex: String?, nightlightColorCodeHex: String?, deviceTimeDifference: String?, deviceTimeZone: String?) {
        self.radonThresholdWarningLevel = radonThresholdWarningLevel
        self.radonThresholdAlertLevel = radonThresholdAlertLevel
        self.temperatureThresholdHighWarningLevel = temperatureThresholdHighWarningLevel
        self.temperatureThresholdLowalertLevel = temperatureThresholdLowalertLevel
        self.temperatureThresholdLowWarningLevel = temperatureThresholdLowWarningLevel
        self.temperatureThresholdHighalertLevel = temperatureThresholdHighalertLevel
        self.humidityThresholdLowWarningLevel = humidityThresholdLowWarningLevel
        self.humidityThresholdHighWarningLevel = humidityThresholdHighWarningLevel
        self.humidityThresholdLowalertLevel = humidityThresholdLowalertLevel
        self.humidityThresholdHighalertLevel = humidityThresholdHighalertLevel
        self.airpressureThresholdLowWarningLevel = airpressureThresholdLowWarningLevel
        self.airpressureThresholdHighWarningLevel = airpressureThresholdHighWarningLevel
        self.airpressureThresholdLowalertLevel = airpressureThresholdLowalertLevel
        self.airpressureThresholdHighalertLevel = airpressureThresholdHighalertLevel
        self.co2ThresholdWarningLevel = co2ThresholdWarningLevel
        self.co2ThresholdAlertLevel = co2ThresholdAlertLevel
        self.vocThresholdWarningLevel = vocThresholdWarningLevel
        self.vocThresholdAlertLevel = vocThresholdAlertLevel
        self.okColorCode = okColorCode
        self.warningColorCode = warningColorCode
        self.alertColorCode = alertColorCode
        self.nightlightColorCode = nightlightColorCode
        self.nightColorStartTime = nightColorStartTime
        self.nightColorEndTime = nightColorEndTime
        self.tempOffset = tempOffset
        self.okColorCodeHex = okColorCodeHex
        self.warningColorCodeHex = warningColorCodeHex
        self.alertColorCodeHex = alertColorCodeHex
        self.nightlightColorCodeHex = nightlightColorCodeHex
        self.deviceTimeDifference = deviceTimeDifference
        self.deviceTimeZone = deviceTimeZone
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(radonThresholdWarningLevel, forKey: "radonThresholdWarningLevel")
        try container.encodeIfPresent(radonThresholdAlertLevel, forKey: "radonThresholdAlertLevel")
        try container.encodeIfPresent(temperatureThresholdHighWarningLevel, forKey: "temperatureThresholdHighWarningLevel")
        try container.encodeIfPresent(temperatureThresholdLowalertLevel, forKey: "temperatureThresholdLowalertLevel")
        try container.encodeIfPresent(temperatureThresholdLowWarningLevel, forKey: "temperatureThresholdLowWarningLevel")
        try container.encodeIfPresent(temperatureThresholdHighalertLevel, forKey: "temperatureThresholdHighalertLevel")
        try container.encodeIfPresent(humidityThresholdLowWarningLevel, forKey: "humidityThresholdLowWarningLevel")
        try container.encodeIfPresent(humidityThresholdHighWarningLevel, forKey: "humidityThresholdHighWarningLevel")
        try container.encodeIfPresent(humidityThresholdLowalertLevel, forKey: "humidityThresholdLowalertLevel")
        try container.encodeIfPresent(humidityThresholdHighalertLevel, forKey: "humidityThresholdHighalertLevel")
        try container.encodeIfPresent(airpressureThresholdLowWarningLevel, forKey: "airpressureThresholdLowWarningLevel")
        try container.encodeIfPresent(airpressureThresholdHighWarningLevel, forKey: "airpressureThresholdHighWarningLevel")
        try container.encodeIfPresent(airpressureThresholdLowalertLevel, forKey: "airpressureThresholdLowalertLevel")
        try container.encodeIfPresent(airpressureThresholdHighalertLevel, forKey: "airpressureThresholdHighalertLevel")
        try container.encodeIfPresent(co2ThresholdWarningLevel, forKey: "co2ThresholdWarningLevel")
        try container.encodeIfPresent(co2ThresholdAlertLevel, forKey: "co2ThresholdAlertLevel")
        try container.encodeIfPresent(vocThresholdWarningLevel, forKey: "vocThresholdWarningLevel")
        try container.encodeIfPresent(vocThresholdAlertLevel, forKey: "vocThresholdAlertLevel")
        try container.encodeIfPresent(okColorCode, forKey: "okColorCode")
        try container.encodeIfPresent(warningColorCode, forKey: "warningColorCode")
        try container.encodeIfPresent(alertColorCode, forKey: "alertColorCode")
        try container.encodeIfPresent(nightlightColorCode, forKey: "nightlightColorCode")
        try container.encodeIfPresent(nightColorStartTime, forKey: "nightColorStartTime")
        try container.encodeIfPresent(nightColorEndTime, forKey: "nightColorEndTime")
        try container.encodeIfPresent(tempOffset, forKey: "tempOffset")
        try container.encodeIfPresent(okColorCodeHex, forKey: "okColorCodeHex")
        try container.encodeIfPresent(warningColorCodeHex, forKey: "warningColorCodeHex")
        try container.encodeIfPresent(alertColorCodeHex, forKey: "alertColorCodeHex")
        try container.encodeIfPresent(nightlightColorCodeHex, forKey: "nightlightColorCodeHex")
        try container.encodeIfPresent(deviceTimeDifference, forKey: "deviceTimeDifference")
        try container.encodeIfPresent(deviceTimeZone, forKey: "deviceTimeZone")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        radonThresholdWarningLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdWarningLevel")
        radonThresholdAlertLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdAlertLevel")
        temperatureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighWarningLevel")
        temperatureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowalertLevel")
        temperatureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowWarningLevel")
        temperatureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighalertLevel")
        humidityThresholdLowWarningLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdLowWarningLevel")
        humidityThresholdHighWarningLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdHighWarningLevel")
        humidityThresholdLowalertLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdLowalertLevel")
        humidityThresholdHighalertLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdHighalertLevel")
        airpressureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowWarningLevel")
        airpressureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighWarningLevel")
        airpressureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowalertLevel")
        airpressureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighalertLevel")
        co2ThresholdWarningLevel = try container.decodeIfPresent(Int.self, forKey: "co2ThresholdWarningLevel")
        co2ThresholdAlertLevel = try container.decodeIfPresent(Int.self, forKey: "co2ThresholdAlertLevel")
        vocThresholdWarningLevel = try container.decodeIfPresent(Int.self, forKey: "vocThresholdWarningLevel")
        vocThresholdAlertLevel = try container.decodeIfPresent(Int.self, forKey: "vocThresholdAlertLevel")
        okColorCode = try container.decodeIfPresent(String.self, forKey: "okColorCode")
        warningColorCode = try container.decodeIfPresent(String.self, forKey: "warningColorCode")
        alertColorCode = try container.decodeIfPresent(String.self, forKey: "alertColorCode")
        nightlightColorCode = try container.decodeIfPresent(String.self, forKey: "nightlightColorCode")
        nightColorStartTime = try container.decodeIfPresent(Int64.self, forKey: "nightColorStartTime")
        nightColorEndTime = try container.decodeIfPresent(Int64.self, forKey: "nightColorEndTime")
        tempOffset = try container.decodeIfPresent(String.self, forKey: "tempOffset")
        okColorCodeHex = try container.decodeIfPresent(String.self, forKey: "okColorCodeHex")
        warningColorCodeHex = try container.decodeIfPresent(String.self, forKey: "warningColorCodeHex")
        alertColorCodeHex = try container.decodeIfPresent(String.self, forKey: "alertColorCodeHex")
        nightlightColorCodeHex = try container.decodeIfPresent(String.self, forKey: "nightlightColorCodeHex")
        deviceTimeDifference = try container.decodeIfPresent(String.self, forKey: "deviceTimeDifference")
        deviceTimeZone = try container.decodeIfPresent(String.self, forKey: "deviceTimeZone")
    }
}

