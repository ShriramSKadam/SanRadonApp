//
// InspectionManualUploadModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class InspectionManualUploadModel: Codable {

    public var buildingType: Int?
    public var checkListItems: [Checklistitem]?
    public var customerInformation: Customerinformation?
    public var inspectionType: Int?
    public var photos: [Photo]?
    public var qaFlags: Qaflags?
    public var radonInformation: Radoninformation?
    public var reportSetup: Reportsetup?
    public var companyInformation: Companyinformation?
    public var deviceInformation: Deviceinformation?
    public var inspectionDefinition: Inspectiondefinition?
    public var monitorSettings: Monitorsettings?
    public var appInfo: AppInfo?
    public var percentComplete: Int?
    public var token: String?


    
    public init(buildingType: Int?, checkListItems: [Checklistitem]?, customerInformation: Customerinformation?, inspectionType: Int?, photos: [Photo]?, qaFlags: Qaflags?, radonInformation: Radoninformation?, reportSetup: Reportsetup?, companyInformation: Companyinformation?, deviceInformation: Deviceinformation?, inspectionDefinition: Inspectiondefinition?, monitorSettings: Monitorsettings?, appInfo: AppInfo?, percentComplete: Int?, token: String?) {
        self.buildingType = buildingType
        self.checkListItems = checkListItems
        self.customerInformation = customerInformation
        self.inspectionType = inspectionType
        self.photos = photos
        self.qaFlags = qaFlags
        self.radonInformation = radonInformation
        self.reportSetup = reportSetup
        self.companyInformation = companyInformation
        self.deviceInformation = deviceInformation
        self.inspectionDefinition = inspectionDefinition
        self.monitorSettings = monitorSettings
        self.appInfo = appInfo
        self.percentComplete = percentComplete
        self.token = token
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(buildingType, forKey: "buildingType")
        try container.encodeIfPresent(checkListItems, forKey: "checkListItems")
        try container.encodeIfPresent(customerInformation, forKey: "customerInformation")
        try container.encodeIfPresent(inspectionType, forKey: "inspectionType")
        try container.encodeIfPresent(photos, forKey: "photos")
        try container.encodeIfPresent(qaFlags, forKey: "qaFlags")
        try container.encodeIfPresent(radonInformation, forKey: "radonInformation")
        try container.encodeIfPresent(reportSetup, forKey: "reportSetup")
        try container.encodeIfPresent(companyInformation, forKey: "companyInformation")
        try container.encodeIfPresent(deviceInformation, forKey: "deviceInformation")
        try container.encodeIfPresent(inspectionDefinition, forKey: "inspectionDefinition")
        try container.encodeIfPresent(monitorSettings, forKey: "monitorSettings")
        try container.encodeIfPresent(appInfo, forKey: "appInfo")
        try container.encodeIfPresent(percentComplete, forKey: "percentComplete")
        try container.encodeIfPresent(token, forKey: "token")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        buildingType = try container.decodeIfPresent(Int.self, forKey: "buildingType")
        checkListItems = try container.decodeIfPresent([Checklistitem].self, forKey: "checkListItems")
        customerInformation = try container.decodeIfPresent(Customerinformation.self, forKey: "customerInformation")
        inspectionType = try container.decodeIfPresent(Int.self, forKey: "inspectionType")
        photos = try container.decodeIfPresent([Photo].self, forKey: "photos")
        qaFlags = try container.decodeIfPresent(Qaflags.self, forKey: "qaFlags")
        radonInformation = try container.decodeIfPresent(Radoninformation.self, forKey: "radonInformation")
        reportSetup = try container.decodeIfPresent(Reportsetup.self, forKey: "reportSetup")
        companyInformation = try container.decodeIfPresent(Companyinformation.self, forKey: "companyInformation")
        deviceInformation = try container.decodeIfPresent(Deviceinformation.self, forKey: "deviceInformation")
        inspectionDefinition = try container.decodeIfPresent(Inspectiondefinition.self, forKey: "inspectionDefinition")
        monitorSettings = try container.decodeIfPresent(Monitorsettings.self, forKey: "monitorSettings")
        appInfo = try container.decodeIfPresent(AppInfo.self, forKey: "appInfo")
        percentComplete = try container.decodeIfPresent(Int.self, forKey: "percentComplete")
        token = try container.decodeIfPresent(String.self, forKey: "token")
    }
}

