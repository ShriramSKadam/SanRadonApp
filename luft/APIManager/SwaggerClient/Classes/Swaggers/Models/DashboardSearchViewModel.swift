//
// DashboardSearchViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/**  */

public class DashboardSearchViewModel: Codable {

    /** Gets or sets the latitude. */
    public var latitude: Double
    /** Gets or sets the longtitude. */
    public var longtitude: Double
    /** Gets or sets the start date time. */
    public var startDateTime: String
    /** Gets or sets the end date time. */
    public var endDateTime: String
    /** Gets or sets the user identifier. */
    public var userId: Int64?
    public var deviceId: String?
    /** Gets or sets the user type identifier. */
    public var userTypeId: Int
    /** Gets or sets the sensor identifier. */
    public var sensorId: Int
    /** get details in selected details */
    public var radius: Int64
    public var inspectionType: Int64


    
    public init(latitude: Double, longtitude: Double, startDateTime: String, endDateTime: String, userId: Int64?, deviceId: String?, userTypeId: Int, sensorId: Int, radius: Int64, inspectionType: Int64) {
        self.latitude = latitude
        self.longtitude = longtitude
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime
        self.userId = userId
        self.deviceId = deviceId
        self.userTypeId = userTypeId
        self.sensorId = sensorId
        self.radius = radius
        self.inspectionType = inspectionType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(latitude, forKey: "latitude")
        try container.encode(longtitude, forKey: "longtitude")
        try container.encode(startDateTime, forKey: "startDateTime")
        try container.encode(endDateTime, forKey: "endDateTime")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encode(userTypeId, forKey: "userTypeId")
        try container.encode(sensorId, forKey: "sensorId")
        try container.encode(radius, forKey: "radius")
        try container.encode(inspectionType, forKey: "inspectionType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        latitude = try container.decode(Double.self, forKey: "latitude")
        longtitude = try container.decode(Double.self, forKey: "longtitude")
        startDateTime = try container.decode(String.self, forKey: "startDateTime")
        endDateTime = try container.decode(String.self, forKey: "endDateTime")
        userId = try container.decodeIfPresent(Int64.self, forKey: "userId")
        deviceId = try container.decodeIfPresent(String.self, forKey: "deviceId")
        userTypeId = try container.decode(Int.self, forKey: "userTypeId")
        sensorId = try container.decode(Int.self, forKey: "sensorId")
        radius = try container.decode(Int64.self, forKey: "radius")
        inspectionType = try container.decode(Int64.self, forKey: "inspectionType")
    }
}

