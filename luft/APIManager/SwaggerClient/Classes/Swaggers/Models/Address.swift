//
// Address.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Address: Codable {

    public var name: String?
    public var flatNo: String?
    public var street: String?
    public var city: String?
    public var state: String?
    public var zipCode: String?
    public var phoneNo: String?
    public var email: String?
    public var addressTypeId: Int64?
    public var licenseNo: String?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(name: String?, flatNo: String?, street: String?, city: String?, state: String?, zipCode: String?, phoneNo: String?, email: String?, addressTypeId: Int64?, licenseNo: String?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.name = name
        self.flatNo = flatNo
        self.street = street
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.phoneNo = phoneNo
        self.email = email
        self.addressTypeId = addressTypeId
        self.licenseNo = licenseNo
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(flatNo, forKey: "flatNo")
        try container.encodeIfPresent(street, forKey: "street")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(zipCode, forKey: "zipCode")
        try container.encodeIfPresent(phoneNo, forKey: "phoneNo")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(addressTypeId, forKey: "addressTypeId")
        try container.encodeIfPresent(licenseNo, forKey: "licenseNo")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        flatNo = try container.decodeIfPresent(String.self, forKey: "flatNo")
        street = try container.decodeIfPresent(String.self, forKey: "street")
        city = try container.decodeIfPresent(String.self, forKey: "city")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        zipCode = try container.decodeIfPresent(String.self, forKey: "zipCode")
        phoneNo = try container.decodeIfPresent(String.self, forKey: "phoneNo")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        addressTypeId = try container.decodeIfPresent(Int64.self, forKey: "addressTypeId")
        licenseNo = try container.decodeIfPresent(String.self, forKey: "licenseNo")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

