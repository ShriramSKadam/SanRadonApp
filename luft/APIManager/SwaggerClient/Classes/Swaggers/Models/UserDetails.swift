//
// UserDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class UserDetails: Codable {

    public var companyName: String?
    public var licenseType: String?
    public var fullAddress: String?
    public var gender: String?
    public var noOfDevices: Int64?
    public var buildTypeName: String?
    public var mitigationSystemName: String?
    public var name: String?
    public var mobileNo: String?
    public var email: String?
    public var roleId: Int64?
    public var hasAcceptedTerms: Bool?
    public var hasAcceptedPrivacyPolicy: Bool?
    public var deviceId: Int64?
    public var userTypeId: Int64?
    public var licenseTypeId: Int64?
    public var address: String?
    public var firstName: String?
    public var lastName: String?
    public var genderId: Int64?
    public var dob: String?
    public var stateId: Int64?
    public var cityId: Int64?
    public var zipcode: String?
    public var isDeleted: Bool?
    public var enableNotifications: Bool?
    public var sendNotificationOnSncApproval: Bool?
    public var sendNotificationonDataSync: Bool?
    public var stateNoticeId: Int64?
    public var radonUnitTypeId: Int64?
    public var headerImage: String?
    public var signatureImage: String?
    public var actionLevel: Double?
    public var alignmentId: Int64?
    public var comments: String?
    public var isSelectedSignatureImageForReport: Bool?
    public var isSelectedRadonRiskInformationForReport: Bool?
    public var isSelectedUnderstandingRadonTestResults: Bool?
    public var isSelectedEpaAverage: Bool?
    public var isSelectedOverallAverage: Bool?
    public var isSelectedLicenseNo: Bool?
    public var isSelectedTestData: Bool?
    public var isSelectedTestChart: Bool?
    public var companyAddress1: String?
    public var companyAddress2: String?
    public var companyCity: String?
    public var companyState: String?
    public var companyZip: String?
    public var companyPhonenumber: String?
    public var companyLicenseNumber: String?
    public var profileImage: String?
    public var pressureUnitTypeId: Int64?
    public var temperatureUnitTypeId: Int64?
    public var isTextNotificationEnabled: Bool?
    public var isEmailNotificationEnabled: Bool?
    public var isMobileNotificationFrequencyEnabled: Bool?
    public var isSummaryEmailEnabled: Bool?
    public var isDailySummaryEmailEnabled: Bool?
    public var isWeeklySummaryEmailEnabled: Bool?
    public var isMonthlySummaryEmailEnabled: Bool?
    public var notificationEmail: String?
    public var isTrialUser: Bool?
    public var trialaccountstartdate: String?
    public var trialaccountenddate: String?
    public var crmid: String?
    public var crmcreateddate: String?
    public var crmmodifieddate: String?
    public var radonThresholdWarningLevel: Double?
    public var radonThresholdAlertLevel: Double?
    public var temperatureThresholdHighWarningLevel: Double?
    public var temperatureThresholdLowalertLevel: Double?
    public var temperatureThresholdLowWarningLevel: Double?
    public var temperatureThresholdHighalertLevel: Double?
    public var humidityThresholdLowWarningLevel: Double?
    public var humidityThresholdHighWarningLevel: Double?
    public var humidityThresholdLowalertLevel: Double?
    public var humidityThresholdHighalertLevel: Double?
    public var airpressureThresholdLowWarningLevel: Double?
    public var airpressureThresholdHighWarningLevel: Double?
    public var airpressureThresholdLowalertLevel: Double?
    public var airpressureThresholdHighalertLevel: Double?
    public var co2ThresholdWarningLevel: Double?
    public var co2ThresholdAlertLevel: Double?
    public var vocThresholdWarningLevel: Double?
    public var vocThresholdAlertLevel: Double?
    public var okColorCode: String?
    public var warningColorCode: String?
    public var alertColorCode: String?
    public var nightlightColorCode: String?
    public var lastSummaryNotificationdate: String?
    public var lastMothlyNotificationDate: String?
    public var temperatureRadonUnits: Int?
    public var humidityRadonUnits: Int?
    public var airpressureRadonUnits: Int?
    public var loginlevel: Int?
    public var crmAccountId: String?
    public var timeZone: Int?
    public var mitigationsystemtypeid: Int?
    public var buildingtypeid: Int?
    public var okColorCodeHex: String?
    public var warningColorCodeHex: String?
    public var alertColorCodeHex: String?
    public var nightlightColorCodeHex: String?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(companyName: String?, licenseType: String?, fullAddress: String?, gender: String?, noOfDevices: Int64?, buildTypeName: String?, mitigationSystemName: String?, name: String?, mobileNo: String?, email: String?, roleId: Int64?, hasAcceptedTerms: Bool?, hasAcceptedPrivacyPolicy: Bool?, deviceId: Int64?, userTypeId: Int64?, licenseTypeId: Int64?, address: String?, firstName: String?, lastName: String?, genderId: Int64?, dob: String?, stateId: Int64?, cityId: Int64?, zipcode: String?, isDeleted: Bool?, enableNotifications: Bool?, sendNotificationOnSncApproval: Bool?, sendNotificationonDataSync: Bool?, stateNoticeId: Int64?, radonUnitTypeId: Int64?, headerImage: String?, signatureImage: String?, actionLevel: Double?, alignmentId: Int64?, comments: String?, isSelectedSignatureImageForReport: Bool?, isSelectedRadonRiskInformationForReport: Bool?, isSelectedUnderstandingRadonTestResults: Bool?, isSelectedEpaAverage: Bool?, isSelectedOverallAverage: Bool?, isSelectedLicenseNo: Bool?, isSelectedTestData: Bool?, isSelectedTestChart: Bool?, companyAddress1: String?, companyAddress2: String?, companyCity: String?, companyState: String?, companyZip: String?, companyPhonenumber: String?, companyLicenseNumber: String?, profileImage: String?, pressureUnitTypeId: Int64?, temperatureUnitTypeId: Int64?, isTextNotificationEnabled: Bool?, isEmailNotificationEnabled: Bool?, isMobileNotificationFrequencyEnabled: Bool?, isSummaryEmailEnabled: Bool?, isDailySummaryEmailEnabled: Bool?, isWeeklySummaryEmailEnabled: Bool?, isMonthlySummaryEmailEnabled: Bool?, notificationEmail: String?, isTrialUser: Bool?, trialaccountstartdate: String?, trialaccountenddate: String?, crmid: String?, crmcreateddate: String?, crmmodifieddate: String?, radonThresholdWarningLevel: Double?, radonThresholdAlertLevel: Double?, temperatureThresholdHighWarningLevel: Double?, temperatureThresholdLowalertLevel: Double?, temperatureThresholdLowWarningLevel: Double?, temperatureThresholdHighalertLevel: Double?, humidityThresholdLowWarningLevel: Double?, humidityThresholdHighWarningLevel: Double?, humidityThresholdLowalertLevel: Double?, humidityThresholdHighalertLevel: Double?, airpressureThresholdLowWarningLevel: Double?, airpressureThresholdHighWarningLevel: Double?, airpressureThresholdLowalertLevel: Double?, airpressureThresholdHighalertLevel: Double?, co2ThresholdWarningLevel: Double?, co2ThresholdAlertLevel: Double?, vocThresholdWarningLevel: Double?, vocThresholdAlertLevel: Double?, okColorCode: String?, warningColorCode: String?, alertColorCode: String?, nightlightColorCode: String?, lastSummaryNotificationdate: String?, lastMothlyNotificationDate: String?, temperatureRadonUnits: Int?, humidityRadonUnits: Int?, airpressureRadonUnits: Int?, loginlevel: Int?, crmAccountId: String?, timeZone: Int?, mitigationsystemtypeid: Int?, buildingtypeid: Int?, okColorCodeHex: String?, warningColorCodeHex: String?, alertColorCodeHex: String?, nightlightColorCodeHex: String?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.companyName = companyName
        self.licenseType = licenseType
        self.fullAddress = fullAddress
        self.gender = gender
        self.noOfDevices = noOfDevices
        self.buildTypeName = buildTypeName
        self.mitigationSystemName = mitigationSystemName
        self.name = name
        self.mobileNo = mobileNo
        self.email = email
        self.roleId = roleId
        self.hasAcceptedTerms = hasAcceptedTerms
        self.hasAcceptedPrivacyPolicy = hasAcceptedPrivacyPolicy
        self.deviceId = deviceId
        self.userTypeId = userTypeId
        self.licenseTypeId = licenseTypeId
        self.address = address
        self.firstName = firstName
        self.lastName = lastName
        self.genderId = genderId
        self.dob = dob
        self.stateId = stateId
        self.cityId = cityId
        self.zipcode = zipcode
        self.isDeleted = isDeleted
        self.enableNotifications = enableNotifications
        self.sendNotificationOnSncApproval = sendNotificationOnSncApproval
        self.sendNotificationonDataSync = sendNotificationonDataSync
        self.stateNoticeId = stateNoticeId
        self.radonUnitTypeId = radonUnitTypeId
        self.headerImage = headerImage
        self.signatureImage = signatureImage
        self.actionLevel = actionLevel
        self.alignmentId = alignmentId
        self.comments = comments
        self.isSelectedSignatureImageForReport = isSelectedSignatureImageForReport
        self.isSelectedRadonRiskInformationForReport = isSelectedRadonRiskInformationForReport
        self.isSelectedUnderstandingRadonTestResults = isSelectedUnderstandingRadonTestResults
        self.isSelectedEpaAverage = isSelectedEpaAverage
        self.isSelectedOverallAverage = isSelectedOverallAverage
        self.isSelectedLicenseNo = isSelectedLicenseNo
        self.isSelectedTestData = isSelectedTestData
        self.isSelectedTestChart = isSelectedTestChart
        self.companyAddress1 = companyAddress1
        self.companyAddress2 = companyAddress2
        self.companyCity = companyCity
        self.companyState = companyState
        self.companyZip = companyZip
        self.companyPhonenumber = companyPhonenumber
        self.companyLicenseNumber = companyLicenseNumber
        self.profileImage = profileImage
        self.pressureUnitTypeId = pressureUnitTypeId
        self.temperatureUnitTypeId = temperatureUnitTypeId
        self.isTextNotificationEnabled = isTextNotificationEnabled
        self.isEmailNotificationEnabled = isEmailNotificationEnabled
        self.isMobileNotificationFrequencyEnabled = isMobileNotificationFrequencyEnabled
        self.isSummaryEmailEnabled = isSummaryEmailEnabled
        self.isDailySummaryEmailEnabled = isDailySummaryEmailEnabled
        self.isWeeklySummaryEmailEnabled = isWeeklySummaryEmailEnabled
        self.isMonthlySummaryEmailEnabled = isMonthlySummaryEmailEnabled
        self.notificationEmail = notificationEmail
        self.isTrialUser = isTrialUser
        self.trialaccountstartdate = trialaccountstartdate
        self.trialaccountenddate = trialaccountenddate
        self.crmid = crmid
        self.crmcreateddate = crmcreateddate
        self.crmmodifieddate = crmmodifieddate
        self.radonThresholdWarningLevel = radonThresholdWarningLevel
        self.radonThresholdAlertLevel = radonThresholdAlertLevel
        self.temperatureThresholdHighWarningLevel = temperatureThresholdHighWarningLevel
        self.temperatureThresholdLowalertLevel = temperatureThresholdLowalertLevel
        self.temperatureThresholdLowWarningLevel = temperatureThresholdLowWarningLevel
        self.temperatureThresholdHighalertLevel = temperatureThresholdHighalertLevel
        self.humidityThresholdLowWarningLevel = humidityThresholdLowWarningLevel
        self.humidityThresholdHighWarningLevel = humidityThresholdHighWarningLevel
        self.humidityThresholdLowalertLevel = humidityThresholdLowalertLevel
        self.humidityThresholdHighalertLevel = humidityThresholdHighalertLevel
        self.airpressureThresholdLowWarningLevel = airpressureThresholdLowWarningLevel
        self.airpressureThresholdHighWarningLevel = airpressureThresholdHighWarningLevel
        self.airpressureThresholdLowalertLevel = airpressureThresholdLowalertLevel
        self.airpressureThresholdHighalertLevel = airpressureThresholdHighalertLevel
        self.co2ThresholdWarningLevel = co2ThresholdWarningLevel
        self.co2ThresholdAlertLevel = co2ThresholdAlertLevel
        self.vocThresholdWarningLevel = vocThresholdWarningLevel
        self.vocThresholdAlertLevel = vocThresholdAlertLevel
        self.okColorCode = okColorCode
        self.warningColorCode = warningColorCode
        self.alertColorCode = alertColorCode
        self.nightlightColorCode = nightlightColorCode
        self.lastSummaryNotificationdate = lastSummaryNotificationdate
        self.lastMothlyNotificationDate = lastMothlyNotificationDate
        self.temperatureRadonUnits = temperatureRadonUnits
        self.humidityRadonUnits = humidityRadonUnits
        self.airpressureRadonUnits = airpressureRadonUnits
        self.loginlevel = loginlevel
        self.crmAccountId = crmAccountId
        self.timeZone = timeZone
        self.mitigationsystemtypeid = mitigationsystemtypeid
        self.buildingtypeid = buildingtypeid
        self.okColorCodeHex = okColorCodeHex
        self.warningColorCodeHex = warningColorCodeHex
        self.alertColorCodeHex = alertColorCodeHex
        self.nightlightColorCodeHex = nightlightColorCodeHex
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(companyName, forKey: "companyName")
        try container.encodeIfPresent(licenseType, forKey: "licenseType")
        try container.encodeIfPresent(fullAddress, forKey: "fullAddress")
        try container.encodeIfPresent(gender, forKey: "gender")
        try container.encodeIfPresent(noOfDevices, forKey: "noOfDevices")
        try container.encodeIfPresent(buildTypeName, forKey: "buildTypeName")
        try container.encodeIfPresent(mitigationSystemName, forKey: "mitigationSystemName")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(mobileNo, forKey: "mobileNo")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(roleId, forKey: "roleId")
        try container.encodeIfPresent(hasAcceptedTerms, forKey: "hasAcceptedTerms")
        try container.encodeIfPresent(hasAcceptedPrivacyPolicy, forKey: "hasAcceptedPrivacyPolicy")
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encodeIfPresent(userTypeId, forKey: "userTypeId")
        try container.encodeIfPresent(licenseTypeId, forKey: "licenseTypeId")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(firstName, forKey: "firstName")
        try container.encodeIfPresent(lastName, forKey: "lastName")
        try container.encodeIfPresent(genderId, forKey: "genderId")
        try container.encodeIfPresent(dob, forKey: "dob")
        try container.encodeIfPresent(stateId, forKey: "stateId")
        try container.encodeIfPresent(cityId, forKey: "cityId")
        try container.encodeIfPresent(zipcode, forKey: "zipcode")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(enableNotifications, forKey: "enableNotifications")
        try container.encodeIfPresent(sendNotificationOnSncApproval, forKey: "sendNotificationOnSncApproval")
        try container.encodeIfPresent(sendNotificationonDataSync, forKey: "sendNotificationonDataSync")
        try container.encodeIfPresent(stateNoticeId, forKey: "stateNoticeId")
        try container.encodeIfPresent(radonUnitTypeId, forKey: "radonUnitTypeId")
        try container.encodeIfPresent(headerImage, forKey: "headerImage")
        try container.encodeIfPresent(signatureImage, forKey: "signatureImage")
        try container.encodeIfPresent(actionLevel, forKey: "actionLevel")
        try container.encodeIfPresent(alignmentId, forKey: "alignmentId")
        try container.encodeIfPresent(comments, forKey: "comments")
        try container.encodeIfPresent(isSelectedSignatureImageForReport, forKey: "isSelectedSignatureImageForReport")
        try container.encodeIfPresent(isSelectedRadonRiskInformationForReport, forKey: "isSelectedRadonRiskInformationForReport")
        try container.encodeIfPresent(isSelectedUnderstandingRadonTestResults, forKey: "isSelectedUnderstandingRadonTestResults")
        try container.encodeIfPresent(isSelectedEpaAverage, forKey: "isSelectedEpaAverage")
        try container.encodeIfPresent(isSelectedOverallAverage, forKey: "isSelectedOverallAverage")
        try container.encodeIfPresent(isSelectedLicenseNo, forKey: "isSelectedLicenseNo")
        try container.encodeIfPresent(isSelectedTestData, forKey: "isSelectedTestData")
        try container.encodeIfPresent(isSelectedTestChart, forKey: "isSelectedTestChart")
        try container.encodeIfPresent(companyAddress1, forKey: "companyAddress1")
        try container.encodeIfPresent(companyAddress2, forKey: "companyAddress2")
        try container.encodeIfPresent(companyCity, forKey: "companyCity")
        try container.encodeIfPresent(companyState, forKey: "companyState")
        try container.encodeIfPresent(companyZip, forKey: "companyZip")
        try container.encodeIfPresent(companyPhonenumber, forKey: "companyPhonenumber")
        try container.encodeIfPresent(companyLicenseNumber, forKey: "companyLicenseNumber")
        try container.encodeIfPresent(profileImage, forKey: "profileImage")
        try container.encodeIfPresent(pressureUnitTypeId, forKey: "pressureUnitTypeId")
        try container.encodeIfPresent(temperatureUnitTypeId, forKey: "temperatureUnitTypeId")
        try container.encodeIfPresent(isTextNotificationEnabled, forKey: "isTextNotificationEnabled")
        try container.encodeIfPresent(isEmailNotificationEnabled, forKey: "isEmailNotificationEnabled")
        try container.encodeIfPresent(isMobileNotificationFrequencyEnabled, forKey: "isMobileNotificationFrequencyEnabled")
        try container.encodeIfPresent(isSummaryEmailEnabled, forKey: "isSummaryEmailEnabled")
        try container.encodeIfPresent(isDailySummaryEmailEnabled, forKey: "isDailySummaryEmailEnabled")
        try container.encodeIfPresent(isWeeklySummaryEmailEnabled, forKey: "isWeeklySummaryEmailEnabled")
        try container.encodeIfPresent(isMonthlySummaryEmailEnabled, forKey: "isMonthlySummaryEmailEnabled")
        try container.encodeIfPresent(notificationEmail, forKey: "notificationEmail")
        try container.encodeIfPresent(isTrialUser, forKey: "isTrialUser")
        try container.encodeIfPresent(trialaccountstartdate, forKey: "trialaccountstartdate")
        try container.encodeIfPresent(trialaccountenddate, forKey: "trialaccountenddate")
        try container.encodeIfPresent(crmid, forKey: "crmid")
        try container.encodeIfPresent(crmcreateddate, forKey: "crmcreateddate")
        try container.encodeIfPresent(crmmodifieddate, forKey: "crmmodifieddate")
        try container.encodeIfPresent(radonThresholdWarningLevel, forKey: "radonThresholdWarningLevel")
        try container.encodeIfPresent(radonThresholdAlertLevel, forKey: "radonThresholdAlertLevel")
        try container.encodeIfPresent(temperatureThresholdHighWarningLevel, forKey: "temperatureThresholdHighWarningLevel")
        try container.encodeIfPresent(temperatureThresholdLowalertLevel, forKey: "temperatureThresholdLowalertLevel")
        try container.encodeIfPresent(temperatureThresholdLowWarningLevel, forKey: "temperatureThresholdLowWarningLevel")
        try container.encodeIfPresent(temperatureThresholdHighalertLevel, forKey: "temperatureThresholdHighalertLevel")
        try container.encodeIfPresent(humidityThresholdLowWarningLevel, forKey: "humidityThresholdLowWarningLevel")
        try container.encodeIfPresent(humidityThresholdHighWarningLevel, forKey: "humidityThresholdHighWarningLevel")
        try container.encodeIfPresent(humidityThresholdLowalertLevel, forKey: "humidityThresholdLowalertLevel")
        try container.encodeIfPresent(humidityThresholdHighalertLevel, forKey: "humidityThresholdHighalertLevel")
        try container.encodeIfPresent(airpressureThresholdLowWarningLevel, forKey: "airpressureThresholdLowWarningLevel")
        try container.encodeIfPresent(airpressureThresholdHighWarningLevel, forKey: "airpressureThresholdHighWarningLevel")
        try container.encodeIfPresent(airpressureThresholdLowalertLevel, forKey: "airpressureThresholdLowalertLevel")
        try container.encodeIfPresent(airpressureThresholdHighalertLevel, forKey: "airpressureThresholdHighalertLevel")
        try container.encodeIfPresent(co2ThresholdWarningLevel, forKey: "co2ThresholdWarningLevel")
        try container.encodeIfPresent(co2ThresholdAlertLevel, forKey: "co2ThresholdAlertLevel")
        try container.encodeIfPresent(vocThresholdWarningLevel, forKey: "vocThresholdWarningLevel")
        try container.encodeIfPresent(vocThresholdAlertLevel, forKey: "vocThresholdAlertLevel")
        try container.encodeIfPresent(okColorCode, forKey: "okColorCode")
        try container.encodeIfPresent(warningColorCode, forKey: "warningColorCode")
        try container.encodeIfPresent(alertColorCode, forKey: "alertColorCode")
        try container.encodeIfPresent(nightlightColorCode, forKey: "nightlightColorCode")
        try container.encodeIfPresent(lastSummaryNotificationdate, forKey: "lastSummaryNotificationdate")
        try container.encodeIfPresent(lastMothlyNotificationDate, forKey: "lastMothlyNotificationDate")
        try container.encodeIfPresent(temperatureRadonUnits, forKey: "temperatureRadonUnits")
        try container.encodeIfPresent(humidityRadonUnits, forKey: "humidityRadonUnits")
        try container.encodeIfPresent(airpressureRadonUnits, forKey: "airpressureRadonUnits")
        try container.encodeIfPresent(loginlevel, forKey: "loginlevel")
        try container.encodeIfPresent(crmAccountId, forKey: "crmAccountId")
        try container.encodeIfPresent(timeZone, forKey: "timeZone")
        try container.encodeIfPresent(mitigationsystemtypeid, forKey: "mitigationsystemtypeid")
        try container.encodeIfPresent(buildingtypeid, forKey: "buildingtypeid")
        try container.encodeIfPresent(okColorCodeHex, forKey: "okColorCodeHex")
        try container.encodeIfPresent(warningColorCodeHex, forKey: "warningColorCodeHex")
        try container.encodeIfPresent(alertColorCodeHex, forKey: "alertColorCodeHex")
        try container.encodeIfPresent(nightlightColorCodeHex, forKey: "nightlightColorCodeHex")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        companyName = try container.decodeIfPresent(String.self, forKey: "companyName")
        licenseType = try container.decodeIfPresent(String.self, forKey: "licenseType")
        fullAddress = try container.decodeIfPresent(String.self, forKey: "fullAddress")
        gender = try container.decodeIfPresent(String.self, forKey: "gender")
        noOfDevices = try container.decodeIfPresent(Int64.self, forKey: "noOfDevices")
        buildTypeName = try container.decodeIfPresent(String.self, forKey: "buildTypeName")
        mitigationSystemName = try container.decodeIfPresent(String.self, forKey: "mitigationSystemName")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        mobileNo = try container.decodeIfPresent(String.self, forKey: "mobileNo")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        roleId = try container.decodeIfPresent(Int64.self, forKey: "roleId")
        hasAcceptedTerms = try container.decodeIfPresent(Bool.self, forKey: "hasAcceptedTerms")
        hasAcceptedPrivacyPolicy = try container.decodeIfPresent(Bool.self, forKey: "hasAcceptedPrivacyPolicy")
        deviceId = try container.decodeIfPresent(Int64.self, forKey: "deviceId")
        userTypeId = try container.decodeIfPresent(Int64.self, forKey: "userTypeId")
        licenseTypeId = try container.decodeIfPresent(Int64.self, forKey: "licenseTypeId")
        address = try container.decodeIfPresent(String.self, forKey: "address")
        firstName = try container.decodeIfPresent(String.self, forKey: "firstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "lastName")
        genderId = try container.decodeIfPresent(Int64.self, forKey: "genderId")
        dob = try container.decodeIfPresent(String.self, forKey: "dob")
        stateId = try container.decodeIfPresent(Int64.self, forKey: "stateId")
        cityId = try container.decodeIfPresent(Int64.self, forKey: "cityId")
        zipcode = try container.decodeIfPresent(String.self, forKey: "zipcode")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        enableNotifications = try container.decodeIfPresent(Bool.self, forKey: "enableNotifications")
        sendNotificationOnSncApproval = try container.decodeIfPresent(Bool.self, forKey: "sendNotificationOnSncApproval")
        sendNotificationonDataSync = try container.decodeIfPresent(Bool.self, forKey: "sendNotificationonDataSync")
        stateNoticeId = try container.decodeIfPresent(Int64.self, forKey: "stateNoticeId")
        radonUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "radonUnitTypeId")
        headerImage = try container.decodeIfPresent(String.self, forKey: "headerImage")
        signatureImage = try container.decodeIfPresent(String.self, forKey: "signatureImage")
        actionLevel = try container.decodeIfPresent(Double.self, forKey: "actionLevel")
        alignmentId = try container.decodeIfPresent(Int64.self, forKey: "alignmentId")
        comments = try container.decodeIfPresent(String.self, forKey: "comments")
        isSelectedSignatureImageForReport = try container.decodeIfPresent(Bool.self, forKey: "isSelectedSignatureImageForReport")
        isSelectedRadonRiskInformationForReport = try container.decodeIfPresent(Bool.self, forKey: "isSelectedRadonRiskInformationForReport")
        isSelectedUnderstandingRadonTestResults = try container.decodeIfPresent(Bool.self, forKey: "isSelectedUnderstandingRadonTestResults")
        isSelectedEpaAverage = try container.decodeIfPresent(Bool.self, forKey: "isSelectedEpaAverage")
        isSelectedOverallAverage = try container.decodeIfPresent(Bool.self, forKey: "isSelectedOverallAverage")
        isSelectedLicenseNo = try container.decodeIfPresent(Bool.self, forKey: "isSelectedLicenseNo")
        isSelectedTestData = try container.decodeIfPresent(Bool.self, forKey: "isSelectedTestData")
        isSelectedTestChart = try container.decodeIfPresent(Bool.self, forKey: "isSelectedTestChart")
        companyAddress1 = try container.decodeIfPresent(String.self, forKey: "companyAddress1")
        companyAddress2 = try container.decodeIfPresent(String.self, forKey: "companyAddress2")
        companyCity = try container.decodeIfPresent(String.self, forKey: "companyCity")
        companyState = try container.decodeIfPresent(String.self, forKey: "companyState")
        companyZip = try container.decodeIfPresent(String.self, forKey: "companyZip")
        companyPhonenumber = try container.decodeIfPresent(String.self, forKey: "companyPhonenumber")
        companyLicenseNumber = try container.decodeIfPresent(String.self, forKey: "companyLicenseNumber")
        profileImage = try container.decodeIfPresent(String.self, forKey: "profileImage")
        pressureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "pressureUnitTypeId")
        temperatureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "temperatureUnitTypeId")
        isTextNotificationEnabled = try container.decodeIfPresent(Bool.self, forKey: "isTextNotificationEnabled")
        isEmailNotificationEnabled = try container.decodeIfPresent(Bool.self, forKey: "isEmailNotificationEnabled")
        isMobileNotificationFrequencyEnabled = try container.decodeIfPresent(Bool.self, forKey: "isMobileNotificationFrequencyEnabled")
        isSummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isSummaryEmailEnabled")
        isDailySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isDailySummaryEmailEnabled")
        isWeeklySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isWeeklySummaryEmailEnabled")
        isMonthlySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isMonthlySummaryEmailEnabled")
        notificationEmail = try container.decodeIfPresent(String.self, forKey: "notificationEmail")
        isTrialUser = try container.decodeIfPresent(Bool.self, forKey: "isTrialUser")
        trialaccountstartdate = try container.decodeIfPresent(String.self, forKey: "trialaccountstartdate")
        trialaccountenddate = try container.decodeIfPresent(String.self, forKey: "trialaccountenddate")
        crmid = try container.decodeIfPresent(String.self, forKey: "crmid")
        crmcreateddate = try container.decodeIfPresent(String.self, forKey: "crmcreateddate")
        crmmodifieddate = try container.decodeIfPresent(String.self, forKey: "crmmodifieddate")
        radonThresholdWarningLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdWarningLevel")
        radonThresholdAlertLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdAlertLevel")
        temperatureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighWarningLevel")
        temperatureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowalertLevel")
        temperatureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowWarningLevel")
        temperatureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighalertLevel")
        humidityThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "humidityThresholdLowWarningLevel")
        humidityThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "humidityThresholdHighWarningLevel")
        humidityThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "humidityThresholdLowalertLevel")
        humidityThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "humidityThresholdHighalertLevel")
        airpressureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowWarningLevel")
        airpressureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighWarningLevel")
        airpressureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowalertLevel")
        airpressureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighalertLevel")
        co2ThresholdWarningLevel = try container.decodeIfPresent(Double.self, forKey: "co2ThresholdWarningLevel")
        co2ThresholdAlertLevel = try container.decodeIfPresent(Double.self, forKey: "co2ThresholdAlertLevel")
        vocThresholdWarningLevel = try container.decodeIfPresent(Double.self, forKey: "vocThresholdWarningLevel")
        vocThresholdAlertLevel = try container.decodeIfPresent(Double.self, forKey: "vocThresholdAlertLevel")
        okColorCode = try container.decodeIfPresent(String.self, forKey: "okColorCode")
        warningColorCode = try container.decodeIfPresent(String.self, forKey: "warningColorCode")
        alertColorCode = try container.decodeIfPresent(String.self, forKey: "alertColorCode")
        nightlightColorCode = try container.decodeIfPresent(String.self, forKey: "nightlightColorCode")
        lastSummaryNotificationdate = try container.decodeIfPresent(String.self, forKey: "lastSummaryNotificationdate")
        lastMothlyNotificationDate = try container.decodeIfPresent(String.self, forKey: "lastMothlyNotificationDate")
        temperatureRadonUnits = try container.decodeIfPresent(Int.self, forKey: "temperatureRadonUnits")
        humidityRadonUnits = try container.decodeIfPresent(Int.self, forKey: "humidityRadonUnits")
        airpressureRadonUnits = try container.decodeIfPresent(Int.self, forKey: "airpressureRadonUnits")
        loginlevel = try container.decodeIfPresent(Int.self, forKey: "loginlevel")
        crmAccountId = try container.decodeIfPresent(String.self, forKey: "crmAccountId")
        timeZone = try container.decodeIfPresent(Int.self, forKey: "timeZone")
        mitigationsystemtypeid = try container.decodeIfPresent(Int.self, forKey: "mitigationsystemtypeid")
        buildingtypeid = try container.decodeIfPresent(Int.self, forKey: "buildingtypeid")
        okColorCodeHex = try container.decodeIfPresent(String.self, forKey: "okColorCodeHex")
        warningColorCodeHex = try container.decodeIfPresent(String.self, forKey: "warningColorCodeHex")
        alertColorCodeHex = try container.decodeIfPresent(String.self, forKey: "alertColorCodeHex")
        nightlightColorCodeHex = try container.decodeIfPresent(String.self, forKey: "nightlightColorCodeHex")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

