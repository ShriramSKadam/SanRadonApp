//
// DeviceReadingViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class DeviceReadingViewModel: Codable {

    public var radon: Double?
    public var voc: Double?
    public var co2: Double?
    public var temperature: Double?
    public var humidity: Double?
    public var airPressure: Double?
    public var logIndex: Int64?
    public var logTypeId: Int64?
    public var discardedCount: Int?
    public var noiseCount: Int?
    public var timeOffsetUtc: Int?
    public var timeStampUtc: Int64?
    public var firmwareVersion: String?


    
    public init(radon: Double?, voc: Double?, co2: Double?, temperature: Double?, humidity: Double?, airPressure: Double?, logIndex: Int64?, logTypeId: Int64?, discardedCount: Int?, noiseCount: Int?, timeOffsetUtc: Int?, timeStampUtc: Int64?, firmwareVersion: String?) {
        self.radon = radon
        self.voc = voc
        self.co2 = co2
        self.temperature = temperature
        self.humidity = humidity
        self.airPressure = airPressure
        self.logIndex = logIndex
        self.logTypeId = logTypeId
        self.discardedCount = discardedCount
        self.noiseCount = noiseCount
        self.timeOffsetUtc = timeOffsetUtc
        self.timeStampUtc = timeStampUtc
        self.firmwareVersion = firmwareVersion
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(radon, forKey: "radon")
        try container.encodeIfPresent(voc, forKey: "voc")
        try container.encodeIfPresent(co2, forKey: "co2")
        try container.encodeIfPresent(temperature, forKey: "temperature")
        try container.encodeIfPresent(humidity, forKey: "humidity")
        try container.encodeIfPresent(airPressure, forKey: "airPressure")
        try container.encodeIfPresent(logIndex, forKey: "logIndex")
        try container.encodeIfPresent(logTypeId, forKey: "logTypeId")
        try container.encodeIfPresent(discardedCount, forKey: "discardedCount")
        try container.encodeIfPresent(noiseCount, forKey: "noiseCount")
        try container.encodeIfPresent(timeOffsetUtc, forKey: "timeOffsetUtc")
        try container.encodeIfPresent(timeStampUtc, forKey: "timeStampUtc")
        try container.encodeIfPresent(firmwareVersion, forKey: "firmwareVersion")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        radon = try container.decodeIfPresent(Double.self, forKey: "radon")
        voc = try container.decodeIfPresent(Double.self, forKey: "voc")
        co2 = try container.decodeIfPresent(Double.self, forKey: "co2")
        temperature = try container.decodeIfPresent(Double.self, forKey: "temperature")
        humidity = try container.decodeIfPresent(Double.self, forKey: "humidity")
        airPressure = try container.decodeIfPresent(Double.self, forKey: "airPressure")
        logIndex = try container.decodeIfPresent(Int64.self, forKey: "logIndex")
        logTypeId = try container.decodeIfPresent(Int64.self, forKey: "logTypeId")
        discardedCount = try container.decodeIfPresent(Int.self, forKey: "discardedCount")
        noiseCount = try container.decodeIfPresent(Int.self, forKey: "noiseCount")
        timeOffsetUtc = try container.decodeIfPresent(Int.self, forKey: "timeOffsetUtc")
        timeStampUtc = try container.decodeIfPresent(Int64.self, forKey: "timeStampUtc")
        firmwareVersion = try container.decodeIfPresent(String.self, forKey: "firmwareVersion")
    }
}

