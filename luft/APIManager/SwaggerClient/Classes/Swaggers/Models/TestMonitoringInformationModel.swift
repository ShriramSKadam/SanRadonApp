//
// TestMonitoringInformationModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class TestMonitoringInformationModel: Codable {

    public var modelNumber: String?
    public var serialNumber: String?
    public var lastCalibration: String?
    public var nextCalibration: String?
    public var calFactors: String?
    public var motionError: String?
    public var actionLevel: Int?


    
    public init(modelNumber: String?, serialNumber: String?, lastCalibration: String?, nextCalibration: String?, calFactors: String?, motionError: String?, actionLevel: Int?) {
        self.modelNumber = modelNumber
        self.serialNumber = serialNumber
        self.lastCalibration = lastCalibration
        self.nextCalibration = nextCalibration
        self.calFactors = calFactors
        self.motionError = motionError
        self.actionLevel = actionLevel
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(modelNumber, forKey: "modelNumber")
        try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        try container.encodeIfPresent(lastCalibration, forKey: "lastCalibration")
        try container.encodeIfPresent(nextCalibration, forKey: "nextCalibration")
        try container.encodeIfPresent(calFactors, forKey: "calFactors")
        try container.encodeIfPresent(motionError, forKey: "motionError")
        try container.encodeIfPresent(actionLevel, forKey: "actionLevel")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        modelNumber = try container.decodeIfPresent(String.self, forKey: "modelNumber")
        serialNumber = try container.decodeIfPresent(String.self, forKey: "serialNumber")
        lastCalibration = try container.decodeIfPresent(String.self, forKey: "lastCalibration")
        nextCalibration = try container.decodeIfPresent(String.self, forKey: "nextCalibration")
        calFactors = try container.decodeIfPresent(String.self, forKey: "calFactors")
        motionError = try container.decodeIfPresent(String.self, forKey: "motionError")
        actionLevel = try container.decodeIfPresent(Int.self, forKey: "actionLevel")
    }
}

