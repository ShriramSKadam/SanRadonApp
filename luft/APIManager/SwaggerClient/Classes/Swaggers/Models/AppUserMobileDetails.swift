//
// AppUserMobileDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class AppUserMobileDetails: Codable {

    public var firstName: String?
    public var lastName: String?
    public var buildingtypeid: Int?
    public var mitigationsystemtypeid: Int?
    public var enableNotifications: Bool?
    public var isTextNotificationEnabled: Bool?
    public var mobileNo: String?
    public var isEmailNotificationEnabled: Bool?
    public var notificationEmail: String?
    public var isMobileNotificationFrequencyEnabled: Bool?
    public var isSummaryEmailEnabled: Bool?
    public var isDailySummaryEmailEnabled: Bool?
    public var isWeeklySummaryEmailEnabled: Bool?
    public var isMonthlySummaryEmailEnabled: Bool?
    public var temperatureUnitTypeId: Int64?
    public var pressureUnitTypeId: Int64?
    public var radonUnitTypeId: Int64?
    public var appLayout: Int?
    public var appTheme: Int?
    
    //New Parameter added
    public var outageNotificationsDuration: String?
    public var notificationFrequency: String?
    public var isMobileOutageNotificationsEnabled: Bool?

//isMobileNotificationFrequencyEnabled
//isMobileOutageNotificationsEnabled
    
    public init(firstName: String?, lastName: String?, buildingtypeid: Int?, mitigationsystemtypeid: Int?, enableNotifications: Bool?, isTextNotificationEnabled: Bool?, mobileNo: String?, isEmailNotificationEnabled: Bool?, notificationEmail: String?, isMobileNotificationFrequencyEnabled: Bool?, isSummaryEmailEnabled: Bool?, isDailySummaryEmailEnabled: Bool?, isWeeklySummaryEmailEnabled: Bool?, isMonthlySummaryEmailEnabled: Bool?, temperatureUnitTypeId: Int64?, pressureUnitTypeId: Int64?, radonUnitTypeId: Int64?, appLayout: Int?, appTheme: Int?, outageNotificationsDuration: String?, notificationFrequency: String?, isMobileOutageNotificationsEnabled: Bool?) {
        self.outageNotificationsDuration = outageNotificationsDuration
        self.notificationFrequency = notificationFrequency
        self.isMobileOutageNotificationsEnabled = isMobileOutageNotificationsEnabled
        
        self.firstName = firstName
        self.lastName = lastName
        self.buildingtypeid = buildingtypeid
        self.mitigationsystemtypeid = mitigationsystemtypeid
        self.enableNotifications = enableNotifications
        self.isTextNotificationEnabled = isTextNotificationEnabled
        self.mobileNo = mobileNo
        self.isEmailNotificationEnabled = isEmailNotificationEnabled
        self.notificationEmail = notificationEmail
        self.isMobileNotificationFrequencyEnabled = isMobileNotificationFrequencyEnabled
        self.isSummaryEmailEnabled = isSummaryEmailEnabled
        self.isDailySummaryEmailEnabled = isDailySummaryEmailEnabled
        self.isWeeklySummaryEmailEnabled = isWeeklySummaryEmailEnabled
        self.isMonthlySummaryEmailEnabled = isMonthlySummaryEmailEnabled
        self.temperatureUnitTypeId = temperatureUnitTypeId
        self.pressureUnitTypeId = pressureUnitTypeId
        self.radonUnitTypeId = radonUnitTypeId
        self.appLayout = appLayout
        self.appTheme = appTheme
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(outageNotificationsDuration, forKey: "outageNotificationsDuration")
        try container.encodeIfPresent(notificationFrequency, forKey: "notificationFrequency")
        try container.encodeIfPresent(isMobileOutageNotificationsEnabled, forKey: "isMobileOutageNotificationsEnabled")

        try container.encodeIfPresent(firstName, forKey: "firstName")
        try container.encodeIfPresent(lastName, forKey: "lastName")
        try container.encodeIfPresent(buildingtypeid, forKey: "buildingtypeid")
        try container.encodeIfPresent(mitigationsystemtypeid, forKey: "mitigationsystemtypeid")
        try container.encodeIfPresent(enableNotifications, forKey: "enableNotifications")
        try container.encodeIfPresent(isTextNotificationEnabled, forKey: "isTextNotificationEnabled")
        try container.encodeIfPresent(mobileNo, forKey: "mobileNo")
        try container.encodeIfPresent(isEmailNotificationEnabled, forKey: "isEmailNotificationEnabled")
        try container.encodeIfPresent(notificationEmail, forKey: "notificationEmail")
        try container.encodeIfPresent(isMobileNotificationFrequencyEnabled, forKey: "isMobileNotificationFrequencyEnabled")
        try container.encodeIfPresent(isSummaryEmailEnabled, forKey: "isSummaryEmailEnabled")
        try container.encodeIfPresent(isDailySummaryEmailEnabled, forKey: "isDailySummaryEmailEnabled")
        try container.encodeIfPresent(isWeeklySummaryEmailEnabled, forKey: "isWeeklySummaryEmailEnabled")
        try container.encodeIfPresent(isMonthlySummaryEmailEnabled, forKey: "isMonthlySummaryEmailEnabled")
        try container.encodeIfPresent(temperatureUnitTypeId, forKey: "temperatureUnitTypeId")
        try container.encodeIfPresent(pressureUnitTypeId, forKey: "pressureUnitTypeId")
        try container.encodeIfPresent(radonUnitTypeId, forKey: "radonUnitTypeId")
        try container.encodeIfPresent(appLayout, forKey: "appLayout")
        try container.encodeIfPresent(appTheme, forKey: "appTheme")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        outageNotificationsDuration = try container.decodeIfPresent(String.self, forKey: "outageNotificationsDuration")
        notificationFrequency = try container.decodeIfPresent(String.self, forKey: "notificationFrequency")
        isMobileOutageNotificationsEnabled = try container.decodeIfPresent(Bool.self, forKey: "isMobileOutageNotificationsEnabled")
        
        firstName = try container.decodeIfPresent(String.self, forKey: "firstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "lastName")
        buildingtypeid = try container.decodeIfPresent(Int.self, forKey: "buildingtypeid")
        mitigationsystemtypeid = try container.decodeIfPresent(Int.self, forKey: "mitigationsystemtypeid")
        enableNotifications = try container.decodeIfPresent(Bool.self, forKey: "enableNotifications")
        isTextNotificationEnabled = try container.decodeIfPresent(Bool.self, forKey: "isTextNotificationEnabled")
        mobileNo = try container.decodeIfPresent(String.self, forKey: "mobileNo")
        isEmailNotificationEnabled = try container.decodeIfPresent(Bool.self, forKey: "isEmailNotificationEnabled")
        notificationEmail = try container.decodeIfPresent(String.self, forKey: "notificationEmail")
        isMobileNotificationFrequencyEnabled = try container.decodeIfPresent(Bool.self, forKey: "isMobileNotificationFrequencyEnabled")
        isSummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isSummaryEmailEnabled")
        isDailySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isDailySummaryEmailEnabled")
        isWeeklySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isWeeklySummaryEmailEnabled")
        isMonthlySummaryEmailEnabled = try container.decodeIfPresent(Bool.self, forKey: "isMonthlySummaryEmailEnabled")
        temperatureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "temperatureUnitTypeId")
        pressureUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "pressureUnitTypeId")
        radonUnitTypeId = try container.decodeIfPresent(Int64.self, forKey: "radonUnitTypeId")
        appLayout = try container.decodeIfPresent(Int.self, forKey: "appLayout")
        appTheme = try container.decodeIfPresent(Int.self, forKey: "appTheme")
    }
}

