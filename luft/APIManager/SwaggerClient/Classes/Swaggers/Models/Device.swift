//
// Device.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Device: Codable {

    public var name: String?
    public var serialId: String?
    public var geocode: NpgsqlPoint?
    public var userId: Int64?
    public var expirationDate: String?
    public var nextCalibrationDate: String?
    public var lastCalibrationDate: String?
    public var deviceStatusId: Int64?
    public var deviceTypeId: Int64?
    public var deviceModelTypeId: Int64?
    public var isActive: Bool?
    public var isDeleted: Bool?
    public var radonThresholdWarningLevel: Double?
    public var radonThresholdAlertLevel: Double?
    public var temperatureThresholdHighWarningLevel: Double?
    public var temperatureThresholdLowalertLevel: Double?
    public var temperatureThresholdLowWarningLevel: Double?
    public var temperatureThresholdHighalertLevel: Double?
    public var humidityThresholdLowWarningLevel: Int?
    public var humidityThresholdHighWarningLevel: Int?
    public var humidityThresholdLowalertLevel: Int?
    public var humidityThresholdHighalertLevel: Int?
    public var airpressureThresholdLowWarningLevel: Double?
    public var airpressureThresholdHighWarningLevel: Double?
    public var airpressureThresholdLowalertLevel: Double?
    public var airpressureThresholdHighalertLevel: Double?
    public var co2ThresholdWarningLevel: Int?
    public var co2ThresholdAlertLevel: Int?
    public var vocThresholdWarningLevel: Int?
    public var vocThresholdAlertLevel: Int?
    public var okColorCode: String?
    public var warningColorCode: String?
    public var alertColorCode: String?
    public var nightlightColorCode: String?
    public var isSettingsUpdatedToDevice: Bool?
    public var factoryResetIteration: Int?
    public var nightColorStartTime: Int64?
    public var nightColorEndTime: Int64?
    public var isCreatedWithoutSerialNumber: Bool?
    public var isVerifiedWithCrm: Bool?
    public var hwWarrantyExp: String?
    public var serviceProductCode: String?
    public var serviceProductName: String?
    public var serviceStartDate: String?
    public var serviceEndDate: String?
    public var crmStatus: String?
    public var crmcreateddate: String?
    public var crmmodifieddate: String?
    public var purchaseDate: String?
    public var crmId: String?
    public var productCode: String?
    public var batterypercent: String?
    public var isWifiOn: Bool?
    public var tempOffset: String?
    public var firmwareVersion: String?
    public var deviceTimeDifference: String?
    public var deviceTimeZone: String?
    public var deviceTimeDifferenceHours: String?
    public var inspectionStatus: String?
    public var isUserDevice: Bool?
    public var okColorCodeHex: String?
    public var warningColorCodeHex: String?
    public var alertColorCodeHex: String?
    public var nightlightColorCodeHex: String?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(name: String?, serialId: String?, geocode: NpgsqlPoint?, userId: Int64?, expirationDate: String?, nextCalibrationDate: String?, lastCalibrationDate: String?, deviceStatusId: Int64?, deviceTypeId: Int64?, deviceModelTypeId: Int64?, isActive: Bool?, isDeleted: Bool?, radonThresholdWarningLevel: Double?, radonThresholdAlertLevel: Double?, temperatureThresholdHighWarningLevel: Double?, temperatureThresholdLowalertLevel: Double?, temperatureThresholdLowWarningLevel: Double?, temperatureThresholdHighalertLevel: Double?, humidityThresholdLowWarningLevel: Int?, humidityThresholdHighWarningLevel: Int?, humidityThresholdLowalertLevel: Int?, humidityThresholdHighalertLevel: Int?, airpressureThresholdLowWarningLevel: Double?, airpressureThresholdHighWarningLevel: Double?, airpressureThresholdLowalertLevel: Double?, airpressureThresholdHighalertLevel: Double?, co2ThresholdWarningLevel: Int?, co2ThresholdAlertLevel: Int?, vocThresholdWarningLevel: Int?, vocThresholdAlertLevel: Int?, okColorCode: String?, warningColorCode: String?, alertColorCode: String?, nightlightColorCode: String?, isSettingsUpdatedToDevice: Bool?, factoryResetIteration: Int?, nightColorStartTime: Int64?, nightColorEndTime: Int64?, isCreatedWithoutSerialNumber: Bool?, isVerifiedWithCrm: Bool?, hwWarrantyExp: String?, serviceProductCode: String?, serviceProductName: String?, serviceStartDate: String?, serviceEndDate: String?, crmStatus: String?, crmcreateddate: String?, crmmodifieddate: String?, purchaseDate: String?, crmId: String?, productCode: String?, batterypercent: String?, isWifiOn: Bool?, tempOffset: String?, firmwareVersion: String?, deviceTimeDifference: String?, deviceTimeZone: String?, deviceTimeDifferenceHours: String?, inspectionStatus: String?, isUserDevice: Bool?, okColorCodeHex: String?, warningColorCodeHex: String?, alertColorCodeHex: String?, nightlightColorCodeHex: String?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.name = name
        self.serialId = serialId
        self.geocode = geocode
        self.userId = userId
        self.expirationDate = expirationDate
        self.nextCalibrationDate = nextCalibrationDate
        self.lastCalibrationDate = lastCalibrationDate
        self.deviceStatusId = deviceStatusId
        self.deviceTypeId = deviceTypeId
        self.deviceModelTypeId = deviceModelTypeId
        self.isActive = isActive
        self.isDeleted = isDeleted
        self.radonThresholdWarningLevel = radonThresholdWarningLevel
        self.radonThresholdAlertLevel = radonThresholdAlertLevel
        self.temperatureThresholdHighWarningLevel = temperatureThresholdHighWarningLevel
        self.temperatureThresholdLowalertLevel = temperatureThresholdLowalertLevel
        self.temperatureThresholdLowWarningLevel = temperatureThresholdLowWarningLevel
        self.temperatureThresholdHighalertLevel = temperatureThresholdHighalertLevel
        self.humidityThresholdLowWarningLevel = humidityThresholdLowWarningLevel
        self.humidityThresholdHighWarningLevel = humidityThresholdHighWarningLevel
        self.humidityThresholdLowalertLevel = humidityThresholdLowalertLevel
        self.humidityThresholdHighalertLevel = humidityThresholdHighalertLevel
        self.airpressureThresholdLowWarningLevel = airpressureThresholdLowWarningLevel
        self.airpressureThresholdHighWarningLevel = airpressureThresholdHighWarningLevel
        self.airpressureThresholdLowalertLevel = airpressureThresholdLowalertLevel
        self.airpressureThresholdHighalertLevel = airpressureThresholdHighalertLevel
        self.co2ThresholdWarningLevel = co2ThresholdWarningLevel
        self.co2ThresholdAlertLevel = co2ThresholdAlertLevel
        self.vocThresholdWarningLevel = vocThresholdWarningLevel
        self.vocThresholdAlertLevel = vocThresholdAlertLevel
        self.okColorCode = okColorCode
        self.warningColorCode = warningColorCode
        self.alertColorCode = alertColorCode
        self.nightlightColorCode = nightlightColorCode
        self.isSettingsUpdatedToDevice = isSettingsUpdatedToDevice
        self.factoryResetIteration = factoryResetIteration
        self.nightColorStartTime = nightColorStartTime
        self.nightColorEndTime = nightColorEndTime
        self.isCreatedWithoutSerialNumber = isCreatedWithoutSerialNumber
        self.isVerifiedWithCrm = isVerifiedWithCrm
        self.hwWarrantyExp = hwWarrantyExp
        self.serviceProductCode = serviceProductCode
        self.serviceProductName = serviceProductName
        self.serviceStartDate = serviceStartDate
        self.serviceEndDate = serviceEndDate
        self.crmStatus = crmStatus
        self.crmcreateddate = crmcreateddate
        self.crmmodifieddate = crmmodifieddate
        self.purchaseDate = purchaseDate
        self.crmId = crmId
        self.productCode = productCode
        self.batterypercent = batterypercent
        self.isWifiOn = isWifiOn
        self.tempOffset = tempOffset
        self.firmwareVersion = firmwareVersion
        self.deviceTimeDifference = deviceTimeDifference
        self.deviceTimeZone = deviceTimeZone
        self.deviceTimeDifferenceHours = deviceTimeDifferenceHours
        self.inspectionStatus = inspectionStatus
        self.isUserDevice = isUserDevice
        self.okColorCodeHex = okColorCodeHex
        self.warningColorCodeHex = warningColorCodeHex
        self.alertColorCodeHex = alertColorCodeHex
        self.nightlightColorCodeHex = nightlightColorCodeHex
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(serialId, forKey: "serialId")
        try container.encodeIfPresent(geocode, forKey: "geocode")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(expirationDate, forKey: "expirationDate")
        try container.encodeIfPresent(nextCalibrationDate, forKey: "nextCalibrationDate")
        try container.encodeIfPresent(lastCalibrationDate, forKey: "lastCalibrationDate")
        try container.encodeIfPresent(deviceStatusId, forKey: "deviceStatusId")
        try container.encodeIfPresent(deviceTypeId, forKey: "deviceTypeId")
        try container.encodeIfPresent(deviceModelTypeId, forKey: "deviceModelTypeId")
        try container.encodeIfPresent(isActive, forKey: "isActive")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(radonThresholdWarningLevel, forKey: "radonThresholdWarningLevel")
        try container.encodeIfPresent(radonThresholdAlertLevel, forKey: "radonThresholdAlertLevel")
        try container.encodeIfPresent(temperatureThresholdHighWarningLevel, forKey: "temperatureThresholdHighWarningLevel")
        try container.encodeIfPresent(temperatureThresholdLowalertLevel, forKey: "temperatureThresholdLowalertLevel")
        try container.encodeIfPresent(temperatureThresholdLowWarningLevel, forKey: "temperatureThresholdLowWarningLevel")
        try container.encodeIfPresent(temperatureThresholdHighalertLevel, forKey: "temperatureThresholdHighalertLevel")
        try container.encodeIfPresent(humidityThresholdLowWarningLevel, forKey: "humidityThresholdLowWarningLevel")
        try container.encodeIfPresent(humidityThresholdHighWarningLevel, forKey: "humidityThresholdHighWarningLevel")
        try container.encodeIfPresent(humidityThresholdLowalertLevel, forKey: "humidityThresholdLowalertLevel")
        try container.encodeIfPresent(humidityThresholdHighalertLevel, forKey: "humidityThresholdHighalertLevel")
        try container.encodeIfPresent(airpressureThresholdLowWarningLevel, forKey: "airpressureThresholdLowWarningLevel")
        try container.encodeIfPresent(airpressureThresholdHighWarningLevel, forKey: "airpressureThresholdHighWarningLevel")
        try container.encodeIfPresent(airpressureThresholdLowalertLevel, forKey: "airpressureThresholdLowalertLevel")
        try container.encodeIfPresent(airpressureThresholdHighalertLevel, forKey: "airpressureThresholdHighalertLevel")
        try container.encodeIfPresent(co2ThresholdWarningLevel, forKey: "co2ThresholdWarningLevel")
        try container.encodeIfPresent(co2ThresholdAlertLevel, forKey: "co2ThresholdAlertLevel")
        try container.encodeIfPresent(vocThresholdWarningLevel, forKey: "vocThresholdWarningLevel")
        try container.encodeIfPresent(vocThresholdAlertLevel, forKey: "vocThresholdAlertLevel")
        try container.encodeIfPresent(okColorCode, forKey: "okColorCode")
        try container.encodeIfPresent(warningColorCode, forKey: "warningColorCode")
        try container.encodeIfPresent(alertColorCode, forKey: "alertColorCode")
        try container.encodeIfPresent(nightlightColorCode, forKey: "nightlightColorCode")
        try container.encodeIfPresent(isSettingsUpdatedToDevice, forKey: "isSettingsUpdatedToDevice")
        try container.encodeIfPresent(factoryResetIteration, forKey: "factoryResetIteration")
        try container.encodeIfPresent(nightColorStartTime, forKey: "nightColorStartTime")
        try container.encodeIfPresent(nightColorEndTime, forKey: "nightColorEndTime")
        try container.encodeIfPresent(isCreatedWithoutSerialNumber, forKey: "isCreatedWithoutSerialNumber")
        try container.encodeIfPresent(isVerifiedWithCrm, forKey: "isVerifiedWithCrm")
        try container.encodeIfPresent(hwWarrantyExp, forKey: "hwWarrantyExp")
        try container.encodeIfPresent(serviceProductCode, forKey: "serviceProductCode")
        try container.encodeIfPresent(serviceProductName, forKey: "serviceProductName")
        try container.encodeIfPresent(serviceStartDate, forKey: "serviceStartDate")
        try container.encodeIfPresent(serviceEndDate, forKey: "serviceEndDate")
        try container.encodeIfPresent(crmStatus, forKey: "crmStatus")
        try container.encodeIfPresent(crmcreateddate, forKey: "crmcreateddate")
        try container.encodeIfPresent(crmmodifieddate, forKey: "crmmodifieddate")
        try container.encodeIfPresent(purchaseDate, forKey: "purchaseDate")
        try container.encodeIfPresent(crmId, forKey: "crmId")
        try container.encodeIfPresent(productCode, forKey: "productCode")
        try container.encodeIfPresent(batterypercent, forKey: "batterypercent")
        try container.encodeIfPresent(isWifiOn, forKey: "isWifiOn")
        try container.encodeIfPresent(tempOffset, forKey: "tempOffset")
        try container.encodeIfPresent(firmwareVersion, forKey: "firmwareVersion")
        try container.encodeIfPresent(deviceTimeDifference, forKey: "deviceTimeDifference")
        try container.encodeIfPresent(deviceTimeZone, forKey: "deviceTimeZone")
        try container.encodeIfPresent(deviceTimeDifferenceHours, forKey: "deviceTimeDifferenceHours")
        try container.encodeIfPresent(inspectionStatus, forKey: "inspectionStatus")
        try container.encodeIfPresent(isUserDevice, forKey: "isUserDevice")
        try container.encodeIfPresent(okColorCodeHex, forKey: "okColorCodeHex")
        try container.encodeIfPresent(warningColorCodeHex, forKey: "warningColorCodeHex")
        try container.encodeIfPresent(alertColorCodeHex, forKey: "alertColorCodeHex")
        try container.encodeIfPresent(nightlightColorCodeHex, forKey: "nightlightColorCodeHex")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        serialId = try container.decodeIfPresent(String.self, forKey: "serialId")
        geocode = try container.decodeIfPresent(NpgsqlPoint.self, forKey: "geocode")
        userId = try container.decodeIfPresent(Int64.self, forKey: "userId")
        expirationDate = try container.decodeIfPresent(String.self, forKey: "expirationDate")
        nextCalibrationDate = try container.decodeIfPresent(String.self, forKey: "nextCalibrationDate")
        lastCalibrationDate = try container.decodeIfPresent(String.self, forKey: "lastCalibrationDate")
        deviceStatusId = try container.decodeIfPresent(Int64.self, forKey: "deviceStatusId")
        deviceTypeId = try container.decodeIfPresent(Int64.self, forKey: "deviceTypeId")
        deviceModelTypeId = try container.decodeIfPresent(Int64.self, forKey: "deviceModelTypeId")
        isActive = try container.decodeIfPresent(Bool.self, forKey: "isActive")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        radonThresholdWarningLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdWarningLevel")
        radonThresholdAlertLevel = try container.decodeIfPresent(Double.self, forKey: "radonThresholdAlertLevel")
        temperatureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighWarningLevel")
        temperatureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowalertLevel")
        temperatureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdLowWarningLevel")
        temperatureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "temperatureThresholdHighalertLevel")
        humidityThresholdLowWarningLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdLowWarningLevel")
        humidityThresholdHighWarningLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdHighWarningLevel")
        humidityThresholdLowalertLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdLowalertLevel")
        humidityThresholdHighalertLevel = try container.decodeIfPresent(Int.self, forKey: "humidityThresholdHighalertLevel")
        airpressureThresholdLowWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowWarningLevel")
        airpressureThresholdHighWarningLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighWarningLevel")
        airpressureThresholdLowalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdLowalertLevel")
        airpressureThresholdHighalertLevel = try container.decodeIfPresent(Double.self, forKey: "airpressureThresholdHighalertLevel")
        co2ThresholdWarningLevel = try container.decodeIfPresent(Int.self, forKey: "co2ThresholdWarningLevel")
        co2ThresholdAlertLevel = try container.decodeIfPresent(Int.self, forKey: "co2ThresholdAlertLevel")
        vocThresholdWarningLevel = try container.decodeIfPresent(Int.self, forKey: "vocThresholdWarningLevel")
        vocThresholdAlertLevel = try container.decodeIfPresent(Int.self, forKey: "vocThresholdAlertLevel")
        okColorCode = try container.decodeIfPresent(String.self, forKey: "okColorCode")
        warningColorCode = try container.decodeIfPresent(String.self, forKey: "warningColorCode")
        alertColorCode = try container.decodeIfPresent(String.self, forKey: "alertColorCode")
        nightlightColorCode = try container.decodeIfPresent(String.self, forKey: "nightlightColorCode")
        isSettingsUpdatedToDevice = try container.decodeIfPresent(Bool.self, forKey: "isSettingsUpdatedToDevice")
        factoryResetIteration = try container.decodeIfPresent(Int.self, forKey: "factoryResetIteration")
        nightColorStartTime = try container.decodeIfPresent(Int64.self, forKey: "nightColorStartTime")
        nightColorEndTime = try container.decodeIfPresent(Int64.self, forKey: "nightColorEndTime")
        isCreatedWithoutSerialNumber = try container.decodeIfPresent(Bool.self, forKey: "isCreatedWithoutSerialNumber")
        isVerifiedWithCrm = try container.decodeIfPresent(Bool.self, forKey: "isVerifiedWithCrm")
        hwWarrantyExp = try container.decodeIfPresent(String.self, forKey: "hwWarrantyExp")
        serviceProductCode = try container.decodeIfPresent(String.self, forKey: "serviceProductCode")
        serviceProductName = try container.decodeIfPresent(String.self, forKey: "serviceProductName")
        serviceStartDate = try container.decodeIfPresent(String.self, forKey: "serviceStartDate")
        serviceEndDate = try container.decodeIfPresent(String.self, forKey: "serviceEndDate")
        crmStatus = try container.decodeIfPresent(String.self, forKey: "crmStatus")
        crmcreateddate = try container.decodeIfPresent(String.self, forKey: "crmcreateddate")
        crmmodifieddate = try container.decodeIfPresent(String.self, forKey: "crmmodifieddate")
        purchaseDate = try container.decodeIfPresent(String.self, forKey: "purchaseDate")
        crmId = try container.decodeIfPresent(String.self, forKey: "crmId")
        productCode = try container.decodeIfPresent(String.self, forKey: "productCode")
        batterypercent = try container.decodeIfPresent(String.self, forKey: "batterypercent")
        isWifiOn = try container.decodeIfPresent(Bool.self, forKey: "isWifiOn")
        tempOffset = try container.decodeIfPresent(String.self, forKey: "tempOffset")
        firmwareVersion = try container.decodeIfPresent(String.self, forKey: "firmwareVersion")
        deviceTimeDifference = try container.decodeIfPresent(String.self, forKey: "deviceTimeDifference")
        deviceTimeZone = try container.decodeIfPresent(String.self, forKey: "deviceTimeZone")
        deviceTimeDifferenceHours = try container.decodeIfPresent(String.self, forKey: "deviceTimeDifferenceHours")
        inspectionStatus = try container.decodeIfPresent(String.self, forKey: "inspectionStatus")
        isUserDevice = try container.decodeIfPresent(Bool.self, forKey: "isUserDevice")
        okColorCodeHex = try container.decodeIfPresent(String.self, forKey: "okColorCodeHex")
        warningColorCodeHex = try container.decodeIfPresent(String.self, forKey: "warningColorCodeHex")
        alertColorCodeHex = try container.decodeIfPresent(String.self, forKey: "alertColorCodeHex")
        nightlightColorCodeHex = try container.decodeIfPresent(String.self, forKey: "nightlightColorCodeHex")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

