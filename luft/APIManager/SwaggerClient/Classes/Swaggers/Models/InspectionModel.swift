//
// InspectionModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class InspectionModel: Codable {

    public var title: String?
    public var headerImage: String?
    public var radonTestReport: RadonTestReportModel?
    public var chartImage: String?
    public var chartImageTwo: String?
    public var isSelectChecklists: Bool?
    public var checklists: [ChecklistModel]?
    public var isSelectTestDataTable: Bool?
    public var testDataTable: TestDataTableModel?
    public var isSelectRadonTestInformation: Bool?
    public var radonTestInformation: RadonTestInformationModel?
    public var isSelectPropertyPictures: Bool?
    public var propertyPictures: PropertyPicturesModel?
    public var imagesCount: Int?
    public var images: [Image]?
    public var companyInformation: TestCompanyInformationModel?
    public var reviewStatus: Int?
    public var billingAddress: TestBillingAddress?
    public var siteAddress: TestSiteAddress?
    public var adminSignature: String?
    public var inspectedBy: InspectedBy?
    public var testSpecficComment: String?
    public var inspectionPictures: [[ImageData]]?
    public var isAdmin: Bool?


    
    public init(title: String?, headerImage: String?, radonTestReport: RadonTestReportModel?, chartImage: String?, chartImageTwo: String?, isSelectChecklists: Bool?, checklists: [ChecklistModel]?, isSelectTestDataTable: Bool?, testDataTable: TestDataTableModel?, isSelectRadonTestInformation: Bool?, radonTestInformation: RadonTestInformationModel?, isSelectPropertyPictures: Bool?, propertyPictures: PropertyPicturesModel?, imagesCount: Int?, images: [Image]?, companyInformation: TestCompanyInformationModel?, reviewStatus: Int?, billingAddress: TestBillingAddress?, siteAddress: TestSiteAddress?, adminSignature: String?, inspectedBy: InspectedBy?, testSpecficComment: String?, inspectionPictures: [[ImageData]]?, isAdmin: Bool?) {
        self.title = title
        self.headerImage = headerImage
        self.radonTestReport = radonTestReport
        self.chartImage = chartImage
        self.chartImageTwo = chartImageTwo
        self.isSelectChecklists = isSelectChecklists
        self.checklists = checklists
        self.isSelectTestDataTable = isSelectTestDataTable
        self.testDataTable = testDataTable
        self.isSelectRadonTestInformation = isSelectRadonTestInformation
        self.radonTestInformation = radonTestInformation
        self.isSelectPropertyPictures = isSelectPropertyPictures
        self.propertyPictures = propertyPictures
        self.imagesCount = imagesCount
        self.images = images
        self.companyInformation = companyInformation
        self.reviewStatus = reviewStatus
        self.billingAddress = billingAddress
        self.siteAddress = siteAddress
        self.adminSignature = adminSignature
        self.inspectedBy = inspectedBy
        self.testSpecficComment = testSpecficComment
        self.inspectionPictures = inspectionPictures
        self.isAdmin = isAdmin
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(headerImage, forKey: "headerImage")
        try container.encodeIfPresent(radonTestReport, forKey: "radonTestReport")
        try container.encodeIfPresent(chartImage, forKey: "chartImage")
        try container.encodeIfPresent(chartImageTwo, forKey: "chartImageTwo")
        try container.encodeIfPresent(isSelectChecklists, forKey: "isSelectChecklists")
        try container.encodeIfPresent(checklists, forKey: "checklists")
        try container.encodeIfPresent(isSelectTestDataTable, forKey: "isSelectTestDataTable")
        try container.encodeIfPresent(testDataTable, forKey: "testDataTable")
        try container.encodeIfPresent(isSelectRadonTestInformation, forKey: "isSelectRadonTestInformation")
        try container.encodeIfPresent(radonTestInformation, forKey: "radonTestInformation")
        try container.encodeIfPresent(isSelectPropertyPictures, forKey: "isSelectPropertyPictures")
        try container.encodeIfPresent(propertyPictures, forKey: "propertyPictures")
        try container.encodeIfPresent(imagesCount, forKey: "imagesCount")
        try container.encodeIfPresent(images, forKey: "images")
        try container.encodeIfPresent(companyInformation, forKey: "companyInformation")
        try container.encodeIfPresent(reviewStatus, forKey: "reviewStatus")
        try container.encodeIfPresent(billingAddress, forKey: "billingAddress")
        try container.encodeIfPresent(siteAddress, forKey: "siteAddress")
        try container.encodeIfPresent(adminSignature, forKey: "adminSignature")
        try container.encodeIfPresent(inspectedBy, forKey: "inspectedBy")
        try container.encodeIfPresent(testSpecficComment, forKey: "testSpecficComment")
        try container.encodeIfPresent(inspectionPictures, forKey: "inspectionPictures")
        try container.encodeIfPresent(isAdmin, forKey: "isAdmin")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        headerImage = try container.decodeIfPresent(String.self, forKey: "headerImage")
        radonTestReport = try container.decodeIfPresent(RadonTestReportModel.self, forKey: "radonTestReport")
        chartImage = try container.decodeIfPresent(String.self, forKey: "chartImage")
        chartImageTwo = try container.decodeIfPresent(String.self, forKey: "chartImageTwo")
        isSelectChecklists = try container.decodeIfPresent(Bool.self, forKey: "isSelectChecklists")
        checklists = try container.decodeIfPresent([ChecklistModel].self, forKey: "checklists")
        isSelectTestDataTable = try container.decodeIfPresent(Bool.self, forKey: "isSelectTestDataTable")
        testDataTable = try container.decodeIfPresent(TestDataTableModel.self, forKey: "testDataTable")
        isSelectRadonTestInformation = try container.decodeIfPresent(Bool.self, forKey: "isSelectRadonTestInformation")
        radonTestInformation = try container.decodeIfPresent(RadonTestInformationModel.self, forKey: "radonTestInformation")
        isSelectPropertyPictures = try container.decodeIfPresent(Bool.self, forKey: "isSelectPropertyPictures")
        propertyPictures = try container.decodeIfPresent(PropertyPicturesModel.self, forKey: "propertyPictures")
        imagesCount = try container.decodeIfPresent(Int.self, forKey: "imagesCount")
        images = try container.decodeIfPresent([Image].self, forKey: "images")
        companyInformation = try container.decodeIfPresent(TestCompanyInformationModel.self, forKey: "companyInformation")
        reviewStatus = try container.decodeIfPresent(Int.self, forKey: "reviewStatus")
        billingAddress = try container.decodeIfPresent(TestBillingAddress.self, forKey: "billingAddress")
        siteAddress = try container.decodeIfPresent(TestSiteAddress.self, forKey: "siteAddress")
        adminSignature = try container.decodeIfPresent(String.self, forKey: "adminSignature")
        inspectedBy = try container.decodeIfPresent(InspectedBy.self, forKey: "inspectedBy")
        testSpecficComment = try container.decodeIfPresent(String.self, forKey: "testSpecficComment")
        inspectionPictures = try container.decodeIfPresent([[ImageData]].self, forKey: "inspectionPictures")
        isAdmin = try container.decodeIfPresent(Bool.self, forKey: "isAdmin")
    }
}

