//
// AppUserNotification.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class AppUserNotification: Codable {

    public var userId: Int64?
    public var message: String?
    public var isRead: Bool?
    public var pagename: String?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(userId: Int64?, message: String?, isRead: Bool?, pagename: String?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.userId = userId
        self.message = message
        self.isRead = isRead
        self.pagename = pagename
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(isRead, forKey: "isRead")
        try container.encodeIfPresent(pagename, forKey: "pagename")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        userId = try container.decodeIfPresent(Int64.self, forKey: "userId")
        message = try container.decodeIfPresent(String.self, forKey: "message")
        isRead = try container.decodeIfPresent(Bool.self, forKey: "isRead")
        pagename = try container.decodeIfPresent(String.self, forKey: "pagename")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

