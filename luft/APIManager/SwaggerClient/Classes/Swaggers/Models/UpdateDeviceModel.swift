//
// UpdateDeviceModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class UpdateDeviceModel: Codable {
    
    
    public var deviceId: Int64?
    public var wifiStatus: Bool?
    public var timeDifference: String?
    public var timeZone: String?
    public var deviceTimeZoneFullName: String?
    public var macAddress: String?
    
    
    
    public init(deviceId: Int64?, wifiStatus: Bool?, timeDifference: String?, timeZone: String?, deviceTimeZoneFullName: String?, macAddress: String?) {
        self.deviceId = deviceId
        self.wifiStatus = wifiStatus
        self.timeDifference = timeDifference
        self.timeZone = timeZone
        self.deviceTimeZoneFullName = deviceTimeZoneFullName
        self.macAddress = macAddress
    }
    
    
    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encodeIfPresent(wifiStatus, forKey: "wifiStatus")
        try container.encodeIfPresent(timeDifference, forKey: "timeDifference")
        try container.encodeIfPresent(timeZone, forKey: "timeZone")
        try container.encodeIfPresent(deviceTimeZoneFullName, forKey: "deviceTimeZoneFullName")
        try container.encodeIfPresent(macAddress, forKey: "macAddress")
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        deviceId = try container.decodeIfPresent(Int64.self, forKey: "deviceId")
        wifiStatus = try container.decodeIfPresent(Bool.self, forKey: "wifiStatus")
        timeDifference = try container.decodeIfPresent(String.self, forKey: "timeDifference")
        timeZone = try container.decodeIfPresent(String.self, forKey: "timeZone")
        macAddress = try container.decodeIfPresent(String.self, forKey: "macAddress")
        deviceTimeZoneFullName = try container.decodeIfPresent(String.self, forKey: "deviceTimeZoneFullName")
    }
}

