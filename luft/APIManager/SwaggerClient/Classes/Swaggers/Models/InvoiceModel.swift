//
// InvoiceModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class InvoiceModel: Codable {

    public var title: String?
    public var radonTestReport: RadonTestReportModel?
    public var headerImage: String?
    public var testLocation: TestLocationModel?
    public var date: String?
    public var description: String?
    public var amount: String?
    public var lessAmount: String?
    public var amountDue: String?
    public var version: String?
    public var companyInformation: TestCompanyInformationModel?
    public var billingAddress: TestBillingAddress?
    public var siteAddress: TestSiteAddress?
    public var adminSignature: String?
    public var inspectedBy: InspectedBy?


    
    public init(title: String?, radonTestReport: RadonTestReportModel?, headerImage: String?, testLocation: TestLocationModel?, date: String?, description: String?, amount: String?, lessAmount: String?, amountDue: String?, version: String?, companyInformation: TestCompanyInformationModel?, billingAddress: TestBillingAddress?, siteAddress: TestSiteAddress?, adminSignature: String?, inspectedBy: InspectedBy?) {
        self.title = title
        self.radonTestReport = radonTestReport
        self.headerImage = headerImage
        self.testLocation = testLocation
        self.date = date
        self.description = description
        self.amount = amount
        self.lessAmount = lessAmount
        self.amountDue = amountDue
        self.version = version
        self.companyInformation = companyInformation
        self.billingAddress = billingAddress
        self.siteAddress = siteAddress
        self.adminSignature = adminSignature
        self.inspectedBy = inspectedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(radonTestReport, forKey: "radonTestReport")
        try container.encodeIfPresent(headerImage, forKey: "headerImage")
        try container.encodeIfPresent(testLocation, forKey: "testLocation")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(lessAmount, forKey: "lessAmount")
        try container.encodeIfPresent(amountDue, forKey: "amountDue")
        try container.encodeIfPresent(version, forKey: "version")
        try container.encodeIfPresent(companyInformation, forKey: "companyInformation")
        try container.encodeIfPresent(billingAddress, forKey: "billingAddress")
        try container.encodeIfPresent(siteAddress, forKey: "siteAddress")
        try container.encodeIfPresent(adminSignature, forKey: "adminSignature")
        try container.encodeIfPresent(inspectedBy, forKey: "inspectedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        radonTestReport = try container.decodeIfPresent(RadonTestReportModel.self, forKey: "radonTestReport")
        headerImage = try container.decodeIfPresent(String.self, forKey: "headerImage")
        testLocation = try container.decodeIfPresent(TestLocationModel.self, forKey: "testLocation")
        date = try container.decodeIfPresent(String.self, forKey: "date")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        amount = try container.decodeIfPresent(String.self, forKey: "amount")
        lessAmount = try container.decodeIfPresent(String.self, forKey: "lessAmount")
        amountDue = try container.decodeIfPresent(String.self, forKey: "amountDue")
        version = try container.decodeIfPresent(String.self, forKey: "version")
        companyInformation = try container.decodeIfPresent(TestCompanyInformationModel.self, forKey: "companyInformation")
        billingAddress = try container.decodeIfPresent(TestBillingAddress.self, forKey: "billingAddress")
        siteAddress = try container.decodeIfPresent(TestSiteAddress.self, forKey: "siteAddress")
        adminSignature = try container.decodeIfPresent(String.self, forKey: "adminSignature")
        inspectedBy = try container.decodeIfPresent(InspectedBy.self, forKey: "inspectedBy")
    }
}

