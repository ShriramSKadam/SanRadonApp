//
// SNAirQualityWebViewModelsRegisterSocialUserViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** View model with fields for registerd */

public class SNAirQualityWebViewModelsRegisterSocialUserViewModel: Codable {
    
    /** Gets or sets the access token. */
    public var accessToken: String
    /** Gets or sets the phone number. */
    public var phoneNumber: String?
    /** Gets or sets the provider.supported are google, facebook.  Keep it to lower case. */
    public var provider: String
    public var deviceToken: String?
    public var deviceId: String?
    public var loginDevice: Int64?
    public var isWeb: Bool?
    public var userAgentId: String?
    public var osVersion: String?
    public var osName: String?
    public var mobileDeviceModel: String?
    public var appversion: String?
    public var buildVersion: String?
    
    
    public init(accessToken: String, phoneNumber: String?, provider: String, deviceToken: String?, deviceId: String?, loginDevice: Int64?, isWeb: Bool?, userAgentId: String?, osVersion: String?, osName: String?, mobileDeviceModel: String?, appversion: String?, buildVersion: String?) {
        self.accessToken = accessToken
        self.phoneNumber = phoneNumber
        self.provider = provider
        self.deviceToken = deviceToken
        self.deviceId = deviceId
        self.loginDevice = loginDevice
        self.isWeb = isWeb
        self.userAgentId = userAgentId
        self.osVersion = osVersion
        self.osName = osName
        self.mobileDeviceModel = mobileDeviceModel
        self.appversion = appversion
        self.buildVersion = buildVersion
    }
    
    
    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encode(accessToken, forKey: "accessToken")
        try container.encodeIfPresent(phoneNumber, forKey: "phoneNumber")
        try container.encode(provider, forKey: "provider")
        try container.encodeIfPresent(deviceToken, forKey: "deviceToken")
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encodeIfPresent(loginDevice, forKey: "loginDevice")
        try container.encodeIfPresent(isWeb, forKey: "isWeb")
        try container.encodeIfPresent(userAgentId, forKey: "userAgentId")
        
        try container.encodeIfPresent(osVersion, forKey: "osVersion")
        try container.encodeIfPresent(osName, forKey: "osName")
        try container.encodeIfPresent(mobileDeviceModel, forKey: "mobileDeviceModel")
        try container.encodeIfPresent(appversion, forKey: "appversion")
        try container.encodeIfPresent(buildVersion, forKey: "buildVersion")
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        accessToken = try container.decode(String.self, forKey: "accessToken")
        phoneNumber = try container.decodeIfPresent(String.self, forKey: "phoneNumber")
        provider = try container.decode(String.self, forKey: "provider")
        deviceToken = try container.decodeIfPresent(String.self, forKey: "deviceToken")
        deviceId = try container.decodeIfPresent(String.self, forKey: "deviceId")
        loginDevice = try container.decodeIfPresent(Int64.self, forKey: "loginDevice")
        isWeb = try container.decodeIfPresent(Bool.self, forKey: "isWeb")
        userAgentId = try container.decodeIfPresent(String.self, forKey: "userAgentId")
        
        osVersion = try container.decodeIfPresent(String.self, forKey: "osVersion")
        osName = try container.decodeIfPresent(String.self, forKey: "osName")
        mobileDeviceModel = try container.decodeIfPresent(String.self, forKey: "mobileDeviceModel")
        appversion = try container.decodeIfPresent(String.self, forKey: "appversion")
        buildVersion = try container.decodeIfPresent(String.self, forKey: "buildVersion")
    }
}

