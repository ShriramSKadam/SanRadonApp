//
// Deviceinformation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class Deviceinformation: Codable {

    public var calibrationDate: String?
    public var calibrationFactors: [CalibrationFactor]?
    public var deviceName: String?
    public var modelNumber: String?
    public var nextCalibrationDate: String?
    public var serialNumber: String?
    public var batteryPercent: String?
    public var externalModuleFWRevision: String?


    
    public init(calibrationDate: String?, calibrationFactors: [CalibrationFactor]?, deviceName: String?, modelNumber: String?, nextCalibrationDate: String?, serialNumber: String?, batteryPercent: String?, externalModuleFWRevision: String?) {
        self.calibrationDate = calibrationDate
        self.calibrationFactors = calibrationFactors
        self.deviceName = deviceName
        self.modelNumber = modelNumber
        self.nextCalibrationDate = nextCalibrationDate
        self.serialNumber = serialNumber
        self.batteryPercent = batteryPercent
        self.externalModuleFWRevision = externalModuleFWRevision
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(calibrationDate, forKey: "calibrationDate")
        try container.encodeIfPresent(calibrationFactors, forKey: "calibrationFactors")
        try container.encodeIfPresent(deviceName, forKey: "deviceName")
        try container.encodeIfPresent(modelNumber, forKey: "modelNumber")
        try container.encodeIfPresent(nextCalibrationDate, forKey: "nextCalibrationDate")
        try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        try container.encodeIfPresent(batteryPercent, forKey: "batteryPercent")
        try container.encodeIfPresent(externalModuleFWRevision, forKey: "externalModuleFWRevision")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        calibrationDate = try container.decodeIfPresent(String.self, forKey: "calibrationDate")
        calibrationFactors = try container.decodeIfPresent([CalibrationFactor].self, forKey: "calibrationFactors")
        deviceName = try container.decodeIfPresent(String.self, forKey: "deviceName")
        modelNumber = try container.decodeIfPresent(String.self, forKey: "modelNumber")
        nextCalibrationDate = try container.decodeIfPresent(String.self, forKey: "nextCalibrationDate")
        serialNumber = try container.decodeIfPresent(String.self, forKey: "serialNumber")
        batteryPercent = try container.decodeIfPresent(String.self, forKey: "batteryPercent")
        externalModuleFWRevision = try container.decodeIfPresent(String.self, forKey: "externalModuleFWRevision")
    }
}

