//
// ReportInputModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ReportInputModel: Codable {

    public var inpectionId: Int64?
    public var selectRandomInformation: [Int]?
    public var reportName: String?
    public var start: String?
    public var stop: String?
    public var interval: String?
    public var duration: String?
    public var overallAvg: String?
    public var epaAverage: String?
    public var testResult: String?
    public var chartImageData: String?
    public var chartTwoImageData: String?
    public var version: String?


    
    public init(inpectionId: Int64?, selectRandomInformation: [Int]?, reportName: String?, start: String?, stop: String?, interval: String?, duration: String?, overallAvg: String?, epaAverage: String?, testResult: String?, chartImageData: String?, chartTwoImageData: String?, version: String?) {
        self.inpectionId = inpectionId
        self.selectRandomInformation = selectRandomInformation
        self.reportName = reportName
        self.start = start
        self.stop = stop
        self.interval = interval
        self.duration = duration
        self.overallAvg = overallAvg
        self.epaAverage = epaAverage
        self.testResult = testResult
        self.chartImageData = chartImageData
        self.chartTwoImageData = chartTwoImageData
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(inpectionId, forKey: "inpectionId")
        try container.encodeIfPresent(selectRandomInformation, forKey: "selectRandomInformation")
        try container.encodeIfPresent(reportName, forKey: "reportName")
        try container.encodeIfPresent(start, forKey: "start")
        try container.encodeIfPresent(stop, forKey: "stop")
        try container.encodeIfPresent(interval, forKey: "interval")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(overallAvg, forKey: "overallAvg")
        try container.encodeIfPresent(epaAverage, forKey: "epaAverage")
        try container.encodeIfPresent(testResult, forKey: "testResult")
        try container.encodeIfPresent(chartImageData, forKey: "chartImageData")
        try container.encodeIfPresent(chartTwoImageData, forKey: "chartTwoImageData")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        inpectionId = try container.decodeIfPresent(Int64.self, forKey: "inpectionId")
        selectRandomInformation = try container.decodeIfPresent([Int].self, forKey: "selectRandomInformation")
        reportName = try container.decodeIfPresent(String.self, forKey: "reportName")
        start = try container.decodeIfPresent(String.self, forKey: "start")
        stop = try container.decodeIfPresent(String.self, forKey: "stop")
        interval = try container.decodeIfPresent(String.self, forKey: "interval")
        duration = try container.decodeIfPresent(String.self, forKey: "duration")
        overallAvg = try container.decodeIfPresent(String.self, forKey: "overallAvg")
        epaAverage = try container.decodeIfPresent(String.self, forKey: "epaAverage")
        testResult = try container.decodeIfPresent(String.self, forKey: "testResult")
        chartImageData = try container.decodeIfPresent(String.self, forKey: "chartImageData")
        chartTwoImageData = try container.decodeIfPresent(String.self, forKey: "chartTwoImageData")
        version = try container.decodeIfPresent(String.self, forKey: "version")
    }
}

