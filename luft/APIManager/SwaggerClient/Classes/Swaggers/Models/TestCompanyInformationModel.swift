//
// TestCompanyInformationModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class TestCompanyInformationModel: Codable {

    public var name: String?
    public var email: String?
    public var address: String?
    public var city: String?
    public var state: String?
    public var zipcode: String?
    public var contact: String?
    public var headerImage: String?


    
    public init(name: String?, email: String?, address: String?, city: String?, state: String?, zipcode: String?, contact: String?, headerImage: String?) {
        self.name = name
        self.email = email
        self.address = address
        self.city = city
        self.state = state
        self.zipcode = zipcode
        self.contact = contact
        self.headerImage = headerImage
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(zipcode, forKey: "zipcode")
        try container.encodeIfPresent(contact, forKey: "contact")
        try container.encodeIfPresent(headerImage, forKey: "headerImage")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        address = try container.decodeIfPresent(String.self, forKey: "address")
        city = try container.decodeIfPresent(String.self, forKey: "city")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        zipcode = try container.decodeIfPresent(String.self, forKey: "zipcode")
        contact = try container.decodeIfPresent(String.self, forKey: "contact")
        headerImage = try container.decodeIfPresent(String.self, forKey: "headerImage")
    }
}

