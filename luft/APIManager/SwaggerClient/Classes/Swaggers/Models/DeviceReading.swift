//
// DeviceReading.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class DeviceReading: Codable {

    public var userId: Int64?
    public var deviceId: Int64?
    public var radon: Double?
    public var voc: Double?
    public var co2: Double?
    public var temperature: Double?
    public var humidity: Double?
    public var syncDate: String?
    public var airPressure: Double?
    public var timestampFromDevice: Int64?
    public var inspectionid: Int64?
    public var logIndex: Int64?
    public var logTypeId: Int64?
    public var discardedCount: Int?
    public var noiseCount: Int?
    public var timeOffsetUtc: Int?
    public var timeStampUtc: Int64?
    public var factoryResetIteration: Int?
    public var syncDateTimeId: String?
    public var lastSyncDate: String?
    public var createdBy: Int64?
    public var id: Int64?
    public var updatedBy: Int64?


    
    public init(userId: Int64?, deviceId: Int64?, radon: Double?, voc: Double?, co2: Double?, temperature: Double?, humidity: Double?, syncDate: String?, airPressure: Double?, timestampFromDevice: Int64?, inspectionid: Int64?, logIndex: Int64?, logTypeId: Int64?, discardedCount: Int?, noiseCount: Int?, timeOffsetUtc: Int?, timeStampUtc: Int64?, factoryResetIteration: Int?, syncDateTimeId: String?, lastSyncDate: String?, createdBy: Int64?, id: Int64?, updatedBy: Int64?) {
        self.userId = userId
        self.deviceId = deviceId
        self.radon = radon
        self.voc = voc
        self.co2 = co2
        self.temperature = temperature
        self.humidity = humidity
        self.syncDate = syncDate
        self.airPressure = airPressure
        self.timestampFromDevice = timestampFromDevice
        self.inspectionid = inspectionid
        self.logIndex = logIndex
        self.logTypeId = logTypeId
        self.discardedCount = discardedCount
        self.noiseCount = noiseCount
        self.timeOffsetUtc = timeOffsetUtc
        self.timeStampUtc = timeStampUtc
        self.factoryResetIteration = factoryResetIteration
        self.syncDateTimeId = syncDateTimeId
        self.lastSyncDate = lastSyncDate
        self.createdBy = createdBy
        self.id = id
        self.updatedBy = updatedBy
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(deviceId, forKey: "deviceId")
        try container.encodeIfPresent(radon, forKey: "radon")
        try container.encodeIfPresent(voc, forKey: "voc")
        try container.encodeIfPresent(co2, forKey: "co2")
        try container.encodeIfPresent(temperature, forKey: "temperature")
        try container.encodeIfPresent(humidity, forKey: "humidity")
        try container.encodeIfPresent(syncDate, forKey: "syncDate")
        try container.encodeIfPresent(airPressure, forKey: "airPressure")
        try container.encodeIfPresent(timestampFromDevice, forKey: "timestampFromDevice")
        try container.encodeIfPresent(inspectionid, forKey: "inspectionid")
        try container.encodeIfPresent(logIndex, forKey: "logIndex")
        try container.encodeIfPresent(logTypeId, forKey: "logTypeId")
        try container.encodeIfPresent(discardedCount, forKey: "discardedCount")
        try container.encodeIfPresent(noiseCount, forKey: "noiseCount")
        try container.encodeIfPresent(timeOffsetUtc, forKey: "timeOffsetUtc")
        try container.encodeIfPresent(timeStampUtc, forKey: "timeStampUtc")
        try container.encodeIfPresent(factoryResetIteration, forKey: "factoryResetIteration")
        try container.encodeIfPresent(syncDateTimeId, forKey: "syncDateTimeId")
        try container.encodeIfPresent(lastSyncDate, forKey: "lastSyncDate")
        try container.encodeIfPresent(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        userId = try container.decodeIfPresent(Int64.self, forKey: "userId")
        deviceId = try container.decodeIfPresent(Int64.self, forKey: "deviceId")
        radon = try container.decodeIfPresent(Double.self, forKey: "radon")
        voc = try container.decodeIfPresent(Double.self, forKey: "voc")
        co2 = try container.decodeIfPresent(Double.self, forKey: "co2")
        temperature = try container.decodeIfPresent(Double.self, forKey: "temperature")
        humidity = try container.decodeIfPresent(Double.self, forKey: "humidity")
        syncDate = try container.decodeIfPresent(String.self, forKey: "syncDate")
        airPressure = try container.decodeIfPresent(Double.self, forKey: "airPressure")
        timestampFromDevice = try container.decodeIfPresent(Int64.self, forKey: "timestampFromDevice")
        inspectionid = try container.decodeIfPresent(Int64.self, forKey: "inspectionid")
        logIndex = try container.decodeIfPresent(Int64.self, forKey: "logIndex")
        logTypeId = try container.decodeIfPresent(Int64.self, forKey: "logTypeId")
        discardedCount = try container.decodeIfPresent(Int.self, forKey: "discardedCount")
        noiseCount = try container.decodeIfPresent(Int.self, forKey: "noiseCount")
        timeOffsetUtc = try container.decodeIfPresent(Int.self, forKey: "timeOffsetUtc")
        timeStampUtc = try container.decodeIfPresent(Int64.self, forKey: "timeStampUtc")
        factoryResetIteration = try container.decodeIfPresent(Int.self, forKey: "factoryResetIteration")
        syncDateTimeId = try container.decodeIfPresent(String.self, forKey: "syncDateTimeId")
        lastSyncDate = try container.decodeIfPresent(String.self, forKey: "lastSyncDate")
        createdBy = try container.decodeIfPresent(Int64.self, forKey: "createdBy")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        updatedBy = try container.decodeIfPresent(Int64.self, forKey: "updatedBy")
    }
}

