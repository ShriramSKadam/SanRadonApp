//
// AppUserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



public class AppUserAPI {
    /**
     Adds the device.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserAddDevicePost(model: AddDeviceViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiAppUserAddDevicePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/AddDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Adds the device.
     - POST /api/AppUser/AddDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<String>
     */
    public class func apiAppUserAddDevicePostWithRequestBuilder(model: AddDeviceViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/AppUser/AddDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Adds the device token.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserAddDeviceTokenPost(model: UserDeviceToken? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserAddDeviceTokenPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/AddDeviceToken")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Adds the device token.
     - POST /api/AppUser/AddDeviceToken
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserAddDeviceTokenPostWithRequestBuilder(model: UserDeviceToken? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/AddDeviceToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Addors the update device location.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserAddorUpdateDeviceLocationPost(model: DeviceLocation? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserAddorUpdateDeviceLocationPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/AddorUpdateDeviceLocation")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Addors the update device location.
     - POST /api/AppUser/AddorUpdateDeviceLocation
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserAddorUpdateDeviceLocationPostWithRequestBuilder(model: DeviceLocation? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/AddorUpdateDeviceLocation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Change password with given OTP
     
     - parameter model: (body) Change Password inputs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserChangePasswordPost(model: ChangePasswordViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserChangePasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/ChangePassword")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Change password with given OTP
     - POST /api/AppUser/ChangePassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) Change Password inputs (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserChangePasswordPostWithRequestBuilder(model: ChangePasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/ChangePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Deletes the account.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserDeleteAccountDelete(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAppUserDeleteAccountDeleteWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/DeleteAccount")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes the account.
     - DELETE /api/AppUser/DeleteAccount
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAppUserDeleteAccountDeleteWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/api/AppUser/DeleteAccount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Deletes all notification.
     
     - parameter userID: (query) The user identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserDeleteAllNotificationDelete(userID: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAppUserDeleteAllNotificationDeleteWithRequestBuilder(userID: userID).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/DeleteAllNotification")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes all notification.
     - DELETE /api/AppUser/DeleteAllNotification
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter userID: (query) The user identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAppUserDeleteAllNotificationDeleteWithRequestBuilder(userID: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/AppUser/DeleteAllNotification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userID": userID?.encodeToJSON()
            ])
        
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("userID :\(userID?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Deletes the notification.
     
     - parameter iD: (query) The identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserDeleteNotificationDelete(iD: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAppUserDeleteNotificationDeleteWithRequestBuilder(iD: iD).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/DeleteNotification")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes the notification.
     - DELETE /api/AppUser/DeleteNotification
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter iD: (query) The identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAppUserDeleteNotificationDeleteWithRequestBuilder(iD: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/AppUser/DeleteNotification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "iD": iD?.encodeToJSON()
            ])
        
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("iD :\(iD?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets my devices.
     
     - parameter deviceTypeId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetMyDevicesGet(deviceTypeId: Int64? = nil, completion: @escaping ((_ data: [MyDeviceModel]?,_ error: Error?) -> Void)) {
        apiAppUserGetMyDevicesGetWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetMyDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets my devices.
     - GET /api/AppUser/GetMyDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "deviceModelTypeId" : 5,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "shareduseremail" : "shareduseremail",
     "shouldNotifyOnCo2" : true,
     "shouldNotifyOnVoc" : true,
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 1,
     "nightColorEndTime" : 9,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 3.616076749251911,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 2.3021358869347655,
     "warningColorCode" : "warningColorCode",
     "id" : 3,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 8,
     "updatedBy" : 6,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "userDeviceName" : "userDeviceName",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "shouldNotifyOnRadon" : true,
     "airpressureThresholdLowalertLevel" : 7.457744773683766,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 4,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 9.301444243932576,
     "humidityThresholdLowWarningLevel" : 4,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 7,
     "shouldNotifyOnHumidity" : true,
     "temperatureThresholdHighalertLevel" : 2.027123023002322,
     "deviceTypeId" : 1,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 1.1730742509559433,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 5,
     "shouldNotifyOnTemperature" : true,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 7.061401241503109,
     "airpressureThresholdHighWarningLevel" : 6.84685269835264,
     "vocThresholdWarningLevel" : 9,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 0,
     "airpressureThresholdLowWarningLevel" : 1.4894159098541704,
     "factoryResetIteration" : 6,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "token" : "token",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "shouldNotifyOnAirPressure" : true,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 9,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 5.637376656633329,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 6
     }, {
     "deviceModelTypeId" : 5,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "shareduseremail" : "shareduseremail",
     "shouldNotifyOnCo2" : true,
     "shouldNotifyOnVoc" : true,
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 1,
     "nightColorEndTime" : 9,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 3.616076749251911,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 2.3021358869347655,
     "warningColorCode" : "warningColorCode",
     "id" : 3,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 8,
     "updatedBy" : 6,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "userDeviceName" : "userDeviceName",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "shouldNotifyOnRadon" : true,
     "airpressureThresholdLowalertLevel" : 7.457744773683766,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 4,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 9.301444243932576,
     "humidityThresholdLowWarningLevel" : 4,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 7,
     "shouldNotifyOnHumidity" : true,
     "temperatureThresholdHighalertLevel" : 2.027123023002322,
     "deviceTypeId" : 1,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 1.1730742509559433,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 5,
     "shouldNotifyOnTemperature" : true,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 7.061401241503109,
     "airpressureThresholdHighWarningLevel" : 6.84685269835264,
     "vocThresholdWarningLevel" : 9,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 0,
     "airpressureThresholdLowWarningLevel" : 1.4894159098541704,
     "factoryResetIteration" : 6,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "token" : "token",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "shouldNotifyOnAirPressure" : true,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 9,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 5.637376656633329,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 6
     } ]}]
     
     - parameter deviceTypeId: (query)  (optional)
     
     - returns: RequestBuilder<[MyDeviceModel]>
     */
    public class func apiAppUserGetMyDevicesGetWithRequestBuilder(deviceTypeId: Int64? = nil) -> RequestBuilder<[MyDeviceModel]> {
        let path = "/api/AppUser/GetMyDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceTypeId": deviceTypeId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceTypeId :\(deviceTypeId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<[MyDeviceModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets my notifications.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetMyNotificationsGet(completion: @escaping ((_ data: [NotificationList]?,_ error: Error?) -> Void)) {
        apiAppUserGetMyNotificationsGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetMyNotifications")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets my notifications.
     - GET /api/AppUser/GetMyNotifications
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "items" : [ {
     "updatedBy" : 5,
     "createdBy" : 6,
     "isRead" : true,
     "id" : 1,
     "message" : "message",
     "userId" : 0,
     "pagename" : "pagename"
     }, {
     "updatedBy" : 5,
     "createdBy" : 6,
     "isRead" : true,
     "id" : 1,
     "message" : "message",
     "userId" : 0,
     "pagename" : "pagename"
     } ],
     "key" : "key"
     }, {
     "items" : [ {
     "updatedBy" : 5,
     "createdBy" : 6,
     "isRead" : true,
     "id" : 1,
     "message" : "message",
     "userId" : 0,
     "pagename" : "pagename"
     }, {
     "updatedBy" : 5,
     "createdBy" : 6,
     "isRead" : true,
     "id" : 1,
     "message" : "message",
     "userId" : 0,
     "pagename" : "pagename"
     } ],
     "key" : "key"
     } ]}]
     
     - returns: RequestBuilder<[NotificationList]>
     */
    public class func apiAppUserGetMyNotificationsGetWithRequestBuilder() -> RequestBuilder<[NotificationList]> {
        let path = "/api/AppUser/GetMyNotifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<[NotificationList]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the notifications device list.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetNotificationsDeviceListGet(completion: @escaping ((_ data: [AppUserMobileDevice]?,_ error: Error?) -> Void)) {
        apiAppUserGetNotificationsDeviceListGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetNotificationsDeviceList")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the notifications device list.
     - GET /api/AppUser/GetNotificationsDeviceList
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "userAgentId" : "userAgentId",
     "updatedBy" : 5,
     "createdBy" : 1,
     "ipAddress" : "ipAddress",
     "loginDevice" : 6,
     "id" : 5,
     "userId" : 0,
     "deviceId" : "deviceId",
     "deviceToken" : "deviceToken"
     }, {
     "userAgentId" : "userAgentId",
     "updatedBy" : 5,
     "createdBy" : 1,
     "ipAddress" : "ipAddress",
     "loginDevice" : 6,
     "id" : 5,
     "userId" : 0,
     "deviceId" : "deviceId",
     "deviceToken" : "deviceToken"
     } ]}]
     
     - returns: RequestBuilder<[AppUserMobileDevice]>
     */
    public class func apiAppUserGetNotificationsDeviceListGetWithRequestBuilder() -> RequestBuilder<[AppUserMobileDevice]> {
        let path = "/api/AppUser/GetNotificationsDeviceList"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<[AppUserMobileDevice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Get device list
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetSalesForceDevcieListGet(completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAppUserGetSalesForceDevcieListGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetSalesForceDevcieList")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Get device list
     - GET /api/AppUser/GetSalesForceDevcieList
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAppUserGetSalesForceDevcieListGetWithRequestBuilder() -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/AppUser/GetSalesForceDevcieList"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     get login salesforce user details
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetSalesForceUserDetailsGet(completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAppUserGetSalesForceUserDetailsGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetSalesForceUserDetails")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     get login salesforce user details
     - GET /api/AppUser/GetSalesForceUserDetails
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAppUserGetSalesForceUserDetailsGetWithRequestBuilder() -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/AppUser/GetSalesForceUserDetails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets current user details by Id
     
     - parameter userId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserGetUserByIdGet(userId: Int64? = nil, completion: @escaping ((_ data: AppUser?,_ error: Error?) -> Void)) {
        apiAppUserGetUserByIdGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/GetUserById")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets current user details by Id
     - GET /api/AppUser/GetUserById
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 4,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 8,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 6,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 7,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 0,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     }}]
     
     - parameter userId: (query)  (optional)
     
     - returns: RequestBuilder<AppUser>
     */
    public class func apiAppUserGetUserByIdGetWithRequestBuilder(userId: Int64? = nil) -> RequestBuilder<AppUser> {
        let path = "/api/AppUser/GetUserById"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId?.encodeToJSON()
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("userId :\(userId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<AppUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets current user details
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserMeGet(completion: @escaping ((_ data: AppUser?,_ error: Error?) -> Void)) {
        apiAppUserMeGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/Me")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets current user details
     - GET /api/AppUser/Me
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 4,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 8,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 6,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 7,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 0,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     }}]
     
     - returns: RequestBuilder<AppUser>
     */
    public class func apiAppUserMeGetWithRequestBuilder() -> RequestBuilder<AppUser> {
        let path = "/api/AppUser/Me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<AppUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Removes the specified device identifier.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserRemoveDelete(deviceId: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserRemoveDeleteWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/Remove")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Removes the specified device identifier.
     - DELETE /api/AppUser/Remove
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceId: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserRemoveDeleteWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/Remove"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Renames the specified model.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserRenamePost(model: RenameDeviceViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserRenamePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/Rename")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Renames the specified model.
     - POST /api/AppUser/Rename
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserRenamePostWithRequestBuilder(model: RenameDeviceViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/Rename"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Searches the devices.
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserSearchDevicesGet(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, completion: @escaping ((_ data: SearchResultDeviceDetails?,_ error: Error?) -> Void)) {
        apiAppUserSearchDevicesGetWithRequestBuilder(deviceTypeId: deviceTypeId, deviceStatusId: deviceStatusId, searchKey: searchKey, pageCount: pageCount, pageNumber: pageNumber, sortByColumn: sortByColumn, sortAsc: sortAsc).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/SearchDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Searches the devices.
     - GET /api/AppUser/SearchDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "deviceModelTypeId" : 9,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "type" : "type",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "lastDataSync" : "lastDataSync",
     "humidityThresholdHighalertLevel" : 1,
     "nightColorEndTime" : 1,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.2315135367772556,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 2.027123023002322,
     "warningColorCode" : "warningColorCode",
     "model" : "model",
     "timeDifference" : "timeDifference",
     "id" : 6,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "longitude" : 6.027456183070403,
     "nightColorStartTime" : 6,
     "updatedBy" : 6,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "timeZone" : "timeZone",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "customerName" : "customerName",
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 9.965781217890562,
     "inspectionStatus" : "inspectionStatus",
     "deviceLocationAddress" : "deviceLocationAddress",
     "co2ThresholdWarningLevel" : 6,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.386281948385884,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 6,
     "status" : "status",
     "temperatureThresholdHighalertLevel" : 1.0246457001441578,
     "deviceTypeId" : 7,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "latitude" : 1.4658129805029452,
     "airpressureThresholdHighalertLevel" : 9.369310271410669,
     "deviceDerivedStatus" : "deviceDerivedStatus",
     "serviceProductCode" : "serviceProductCode",
     "expired" : 5,
     "ownerName" : "ownerName",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 8,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 4.145608029883936,
     "airpressureThresholdHighWarningLevel" : 5.025004791520295,
     "vocThresholdWarningLevel" : 9,
     "humidityThresholdLowalertLevel" : 7,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 5,
     "airpressureThresholdLowWarningLevel" : 4.965218492984954,
     "factoryResetIteration" : 3,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "ownerEmail" : "ownerEmail",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 2,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 3.616076749251911,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 2
     }, {
     "deviceModelTypeId" : 9,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "type" : "type",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "lastDataSync" : "lastDataSync",
     "humidityThresholdHighalertLevel" : 1,
     "nightColorEndTime" : 1,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.2315135367772556,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 2.027123023002322,
     "warningColorCode" : "warningColorCode",
     "model" : "model",
     "timeDifference" : "timeDifference",
     "id" : 6,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "longitude" : 6.027456183070403,
     "nightColorStartTime" : 6,
     "updatedBy" : 6,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "timeZone" : "timeZone",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "customerName" : "customerName",
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 9.965781217890562,
     "inspectionStatus" : "inspectionStatus",
     "deviceLocationAddress" : "deviceLocationAddress",
     "co2ThresholdWarningLevel" : 6,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.386281948385884,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 6,
     "status" : "status",
     "temperatureThresholdHighalertLevel" : 1.0246457001441578,
     "deviceTypeId" : 7,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "latitude" : 1.4658129805029452,
     "airpressureThresholdHighalertLevel" : 9.369310271410669,
     "deviceDerivedStatus" : "deviceDerivedStatus",
     "serviceProductCode" : "serviceProductCode",
     "expired" : 5,
     "ownerName" : "ownerName",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 8,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 4.145608029883936,
     "airpressureThresholdHighWarningLevel" : 5.025004791520295,
     "vocThresholdWarningLevel" : 9,
     "humidityThresholdLowalertLevel" : 7,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 5,
     "airpressureThresholdLowWarningLevel" : 4.965218492984954,
     "factoryResetIteration" : 3,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "ownerEmail" : "ownerEmail",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 2,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 3.616076749251911,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 2
     } ],
     "inspectionIds" : [ 5, 5 ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     
     - returns: RequestBuilder<SearchResultDeviceDetails>
     */
    public class func apiAppUserSearchDevicesGetWithRequestBuilder(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil) -> RequestBuilder<SearchResultDeviceDetails> {
        let path = "/api/AppUser/SearchDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceTypeId": deviceTypeId?.encodeToJSON(),
            "deviceStatusId": deviceStatusId?.encodeToJSON(),
            "searchKey": searchKey,
            "pageCount": pageCount?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortByColumn": sortByColumn,
            "sortAsc": sortAsc
            ])
        
        textLog.writeAPI(URLString)
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceTypeId :\(deviceTypeId?.encodeToJSON() ?? ""),deviceStatusId :\(deviceStatusId?.encodeToJSON() ?? ""),searchKey :\(searchKey ?? ""),pageCount :\(pageCount?.encodeToJSON() ?? ""),pageNumber :\(pageNumber?.encodeToJSON() ?? ""),sortByColumn :\(sortByColumn ?? ""),sortAsc :\(sortAsc ?? true)")
        
        let requestBuilder: RequestBuilder<SearchResultDeviceDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Send a message/instruction to Device
     
     - parameter model: (body) Model containing device id and message (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserSendMessageToDevicePost(model: SendMessageToDeviceViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserSendMessageToDevicePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/SendMessageToDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Send a message/instruction to Device
     - POST /api/AppUser/SendMessageToDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) Model containing device id and message (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserSendMessageToDevicePostWithRequestBuilder(model: SendMessageToDeviceViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/SendMessageToDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Sends the text notification.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserSendTextNotificationPost(model: TextnNotification? = nil, completion: @escaping ((_ data: Int64?,_ error: Error?) -> Void)) {
        apiAppUserSendTextNotificationPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/SendTextNotification")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Sends the text notification.
     - POST /api/AppUser/SendTextNotification
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Int64>
     */
    public class func apiAppUserSendTextNotificationPostWithRequestBuilder(model: TextnNotification? = nil) -> RequestBuilder<Int64> {
        let path = "/api/AppUser/SendTextNotification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Int64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Toggle Pollution Notification per device per user
     
     - parameter deviceId: (query) Device Id (optional)
     - parameter settingName: (query) Should be one of the following (\&quot;ShouldNotifyOnRadon\&quot;, \&quot;ShouldNotifyOnVoc\&quot;, \&quot;ShouldNotifyOnCo2\&quot;, \&quot;ShouldNotifyOnTemperature\&quot;,\&quot;ShouldNotifyOnHumidity\&quot;, \&quot;ShouldNotifyOnAirPressure\&quot;) (optional)
     - parameter value: (query) Boolean value to update (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserTogglePollutionNotificationPost(deviceId: Int64? = nil, settingName: String? = nil, value: Bool? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserTogglePollutionNotificationPostWithRequestBuilder(deviceId: deviceId, settingName: settingName, value: value).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/TogglePollutionNotification")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Toggle Pollution Notification per device per user
     - POST /api/AppUser/TogglePollutionNotification
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceId: (query) Device Id (optional)
     - parameter settingName: (query) Should be one of the following (\&quot;ShouldNotifyOnRadon\&quot;, \&quot;ShouldNotifyOnVoc\&quot;, \&quot;ShouldNotifyOnCo2\&quot;, \&quot;ShouldNotifyOnTemperature\&quot;,\&quot;ShouldNotifyOnHumidity\&quot;, \&quot;ShouldNotifyOnAirPressure\&quot;) (optional)
     - parameter value: (query) Boolean value to update (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserTogglePollutionNotificationPostWithRequestBuilder(deviceId: Int64? = nil, settingName: String? = nil, value: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/TogglePollutionNotification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(),
            "settingName": settingName,
            "value": value
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),settingName :\(settingName ?? ""),value :\(value ?? true)")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Updates the device setting for all devices of users.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateDeviceSettingPost(model: UpdateSettingViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUpdateDeviceSettingPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateDeviceSetting")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Updates the device setting for all devices of users.
     - POST /api/AppUser/UpdateDeviceSetting
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateDeviceSettingPostWithRequestBuilder(model: UpdateSettingViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateDeviceSetting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Update Device User
     
     - parameter model: (body) Device User Details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateDeviceUserPut(model: DeviceUserDetails? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUpdateDeviceUserPutWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateDeviceUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Update Device User
     - PUT /api/AppUser/UpdateDeviceUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) Device User Details (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateDeviceUserPutWithRequestBuilder(model: DeviceUserDetails? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateDeviceUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updated user setting value
     
     - parameter model: (body) MobileSettingsUpdateModel (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateMobileSettingPost(model: MobileSettingsUpdateModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUpdateMobileSettingPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateMobileSetting")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Updated user setting value
     - POST /api/AppUser/UpdateMobileSetting
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) MobileSettingsUpdateModel (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateMobileSettingPostWithRequestBuilder(model: MobileSettingsUpdateModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateMobileSetting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Update mobile user settings
     
     - parameter user: (body) User details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateMobileUserPost(user: AppUserMobileDetails? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        SwaggerClientAPI.customHeaders = HttpManager.sharedInstance.getDefaultHeaderDetails()
        apiAppUserUpdateMobileUserPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateMobileUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Update mobile user settings
     - POST /api/AppUser/UpdateMobileUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter user: (body) User details (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateMobileUserPostWithRequestBuilder(user: AppUserMobileDetails? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateMobileUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: user) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updates the notification status.
     
     - parameter iD: (query) The identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateNotificationStatusPut(iD: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAppUserUpdateNotificationStatusPutWithRequestBuilder(iD: iD).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateNotificationStatus")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Updates the notification status.
     - PUT /api/AppUser/UpdateNotificationStatus
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter iD: (query) The identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAppUserUpdateNotificationStatusPutWithRequestBuilder(iD: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/AppUser/UpdateNotificationStatus"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "iD": iD?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("iD :\(iD?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     update device list
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateSalesForceDevciesPost(model: [SalesForceDevices]? = nil, completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAppUserUpdateSalesForceDevciesPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateSalesForceDevcies")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     update device list
     - POST /api/AppUser/UpdateSalesForceDevcies
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAppUserUpdateSalesForceDevciesPostWithRequestBuilder(model: [SalesForceDevices]? = nil) -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/AppUser/UpdateSalesForceDevcies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updated User Settings
     
     - parameter model: (body) Update settings veiw model (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateSettingsPost(model: SettingsUpdateModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUpdateSettingsPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateSettings")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Updated User Settings
     - POST /api/AppUser/UpdateSettings
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) Update settings veiw model (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateSettingsPostWithRequestBuilder(model: SettingsUpdateModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateSettings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Update User ByUser Type
     
     - parameter model: (body) User Update Model (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateUserByUserTypePut(model: UserUpdateModel? = nil, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        apiAppUserUpdateUserByUserTypePutWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateUserByUserType")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Update User ByUser Type
     - PUT /api/AppUser/UpdateUserByUserType
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : "{}",
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body) User Update Model (optional)
     
     - returns: RequestBuilder<ApiResponse>
     */
    public class func apiAppUserUpdateUserByUserTypePutWithRequestBuilder(model: UserUpdateModel? = nil) -> RequestBuilder<ApiResponse> {
        let path = "/api/AppUser/UpdateUserByUserType"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Update login level
     
     - parameter loginlevel: (query) user login level. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateUserLoginLevelPut(loginlevel: Int? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAppUserUpdateUserLoginLevelPutWithRequestBuilder(loginlevel: loginlevel).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateUserLoginLevel")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Update login level
     - PUT /api/AppUser/UpdateUserLoginLevel
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter loginlevel: (query) user login level. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAppUserUpdateUserLoginLevelPutWithRequestBuilder(loginlevel: Int? = nil) -> RequestBuilder<Int> {
        let path = "/api/AppUser/UpdateUserLoginLevel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "loginlevel": loginlevel?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("loginlevel :\(loginlevel?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Update the user along with settings
     
     - parameter user: (body) User details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateUserPost(user: AppUser? = nil, completion: @escaping ((_ data: AppUser?,_ error: Error?) -> Void)) {
        apiAppUserUpdateUserPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Update the user along with settings
     - POST /api/AppUser/UpdateUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 4,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 8,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 6,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 7,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 0,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     }}]
     
     - parameter user: (body) User details (optional)
     
     - returns: RequestBuilder<AppUser>
     */
    public class func apiAppUserUpdateUserPostWithRequestBuilder(user: AppUser? = nil) -> RequestBuilder<AppUser> {
        let path = "/api/AppUser/UpdateUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: user) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<AppUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updates the user profile.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUpdateUserProfilePut(model: UserProfileDetails? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUpdateUserProfilePutWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UpdateUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Updates the user profile.
     - PUT /api/AppUser/UpdateUserProfile
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUpdateUserProfilePutWithRequestBuilder(model: UserProfileDetails? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UpdateUserProfile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upload Header Image
     
     - parameter model: (body) ImageData, User Id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUploadHeaderImagePost(model: ImageModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUploadHeaderImagePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UploadHeaderImage")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Upload Header Image
     - POST /api/AppUser/UploadHeaderImage
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) ImageData, User Id (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUploadHeaderImagePostWithRequestBuilder(model: ImageModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UploadHeaderImage"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Uploads the readings.
     
     - parameter readings: (body) The readings. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUploadReadingsPost(readings: [DeviceReading]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUploadReadingsPostWithRequestBuilder(readings: readings).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UploadReadings")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Uploads the readings.
     - POST /api/AppUser/UploadReadings
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter readings: (body) The readings. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUploadReadingsPostWithRequestBuilder(readings: [DeviceReading]? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UploadReadings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: readings)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: readings) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upload Signature Image
     
     - parameter model: (body) ImageData, User Id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAppUserUploadSignatureImagePost(model: ImageModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAppUserUploadSignatureImagePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/AppUser/UploadSignatureImage")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Upload Signature Image
     - POST /api/AppUser/UploadSignatureImage
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) ImageData, User Id (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAppUserUploadSignatureImagePostWithRequestBuilder(model: ImageModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/AppUser/UploadSignatureImage"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
}
