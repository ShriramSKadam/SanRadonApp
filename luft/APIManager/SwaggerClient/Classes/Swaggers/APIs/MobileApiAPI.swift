//
// MobileApiAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



public class MobileApiAPI {
    /**
     Changes the password.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiChangePasswordUsingTempPasswordPost(model: ChangePasswordWithTempPasswordViewModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiChangePasswordUsingTempPasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/ChangePasswordUsingTempPassword")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            
            completion(response?.body, error);
        }
    }
    
    
    /**
     Changes the password.
     - POST /api/MobileApi/ChangePasswordUsingTempPassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiChangePasswordUsingTempPasswordPostWithRequestBuilder(model: ChangePasswordWithTempPasswordViewModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/ChangePasswordUsingTempPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Deletes the account.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiDeleteAccountDelete(completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiDeleteAccountDeleteWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/DeleteAccount")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes the account.
     - DELETE /api/MobileApi/DeleteAccount
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiDeleteAccountDeleteWithRequestBuilder() -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/DeleteAccount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Remove sharing for home device
     
     - parameter deviceId: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiDeleteSharedHomeDevicePost(deviceId: Int64? = nil, email: String? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiDeleteSharedHomeDevicePostWithRequestBuilder(deviceId: deviceId, email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/DeleteSharedHomeDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            
            completion(response?.body, error);
        }
    }
    
    
    /**
     Remove sharing for home device
     - POST /api/MobileApi/DeleteSharedHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter deviceId: (query)  (optional)
     - parameter email: (query)  (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiDeleteSharedHomeDevicePostWithRequestBuilder(deviceId: Int64? = nil, email: String? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/DeleteSharedHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(),
            "email": email
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),email :\(email ?? "")")
        
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Login with user details passed.
     
     - parameter model: (body) Model with details of Login user. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiLoginPost(model: LoginUserViewModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiLoginPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/Login")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            
            completion(response?.body, error);
        }
    }
    
    
    /**
     Login with user details passed.
     - POST /api/MobileApi/Login
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) Model with details of Login user. (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiLoginPostWithRequestBuilder(model: LoginUserViewModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/Login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("email: \(model?.email ?? ""), password: *****, deviceToken: \(model?.deviceToken ?? ""), deviceId: \(model?.deviceId ?? ""), loginDevice: \(model?.loginDevice ?? 0), isWeb: \(model?.isWeb ?? true), userAgentId: \(model?.userAgentId ?? ""), ipAddress: \(model?.ipAddress ?? ""), osVersion: \(model?.osVersion ?? ""), osName: \(model?.osName ?? ""), mobileDeviceModel: \(model?.mobileDeviceModel ?? ""), appversion: \(model?.appversion ?? ""), buildVersion: \(model?.buildVersion ?? "")")
        
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Registers the specified user phone number with given details.
     
     - parameter model: (body) Model with details of user to be registered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiRegisterPost(model: RegisterUserViewModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiRegisterPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/Register")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Registers the specified user phone number with given details.
     - POST /api/MobileApi/Register
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) Model with details of user to be registered. (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiRegisterPostWithRequestBuilder(model: RegisterUserViewModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/Register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        textLog.writeAPI("name: \(model?.name ?? ""), email: \(model?.email ?? ""), mobile: \(model?.mobile ?? ""), password: *****")
        
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Registers the social user.
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiRegisterSocialUserPost(model: RegisterSocialUserViewModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiRegisterSocialUserPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/RegisterSocialUser")
            textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
            textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
            textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
            textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
           
            completion(response?.body, error);
        }
    }
    
    
    /**
     Registers the social user.
     - POST /api/MobileApi/RegisterSocialUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiRegisterSocialUserPostWithRequestBuilder(model: RegisterSocialUserViewModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/RegisterSocialUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let url = NSURLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Sends the temporary password.
     
     - parameter email: (query) The email. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiSendTemporaryPasswordGet(email: String? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiSendTemporaryPasswordGetWithRequestBuilder(email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/SendTemporaryPassword")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error);
        }
    }
    
    
    /**
     Sends the temporary password.
     - GET /api/MobileApi/SendTemporaryPassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter email: (query) The email. (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiSendTemporaryPasswordGetWithRequestBuilder(email: String? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/SendTemporaryPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("email:\(email ?? "")")
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     share home device for professional user
     
     - parameter email: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiSharedHomeDevicePost(email: String? = nil, deviceId: Int64? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiSharedHomeDevicePostWithRequestBuilder(email: email, deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/SharedHomeDevice")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                
            completion(response?.body, error);
        }
    }
    
    
    /**
     share home device for professional user
     - POST /api/MobileApi/SharedHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter email: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     
     - returns: RequestBuilder<ResponseModel>
     */
    public class func apiMobileApiSharedHomeDevicePostWithRequestBuilder(email: String? = nil, deviceId: Int64? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/SharedHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email,
            "deviceId": deviceId?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),email :\(email ?? "")")

        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiMobileApiCheckSocialUserPost(model: SNAirQualityWebViewModelsRegisterSocialUserViewModel? = nil, completion: @escaping ((_ data: SNAirQualityBALModelResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiCheckSocialUserPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/CheckSocialUser")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        //textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        //textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        //textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
            completion(response?.body, error);
        }
    }
    
    
    /**
     - POST /api/MobileApi/CheckSocialUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    public class func apiMobileApiCheckSocialUserPostWithRequestBuilder(model: SNAirQualityWebViewModelsRegisterSocialUserViewModel? = nil) -> RequestBuilder<SNAirQualityBALModelResponseModel> {
        let path = "/api/MobileApi/CheckSocialUser"
        let URLString = SwaggerClientAPI.basePath + path
        textLog.writeAPI(URLString)

        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let url = NSURLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<SNAirQualityBALModelResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     
     - parameter email: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiMobileApiCheckHomeUserAlreadyExistGet(email: String? = nil, completion: @escaping ((_ data: SNAirQualityBALModelResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiCheckHomeUserAlreadyExistGetWithRequestBuilder(email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/CheckHomeUserAlreadyExist")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        //textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        //textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        //textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error)
        }
    }
    
    
    /**
     - GET /api/MobileApi/CheckHomeUserAlreadyExist
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter email: (query)  (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    open class func apiMobileApiCheckHomeUserAlreadyExistGetWithRequestBuilder(email: String? = nil) -> RequestBuilder<SNAirQualityBALModelResponseModel> {
        let path = "/api/MobileApi/CheckHomeUserAlreadyExist"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
            "email": email
        ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("email :\(email ?? "")")
        let requestBuilder: RequestBuilder<SNAirQualityBALModelResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter timeZone: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiMobileApiGetServerTimeGet(timeZone: String? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiGetServerTimeGetWithRequestBuilder(timeZone: timeZone).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/GetServerTime")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error)
        }
    }
    
    
    /**
     - GET /api/MobileApi/GetServerTime
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter timeZone: (query)  (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    open class func apiMobileApiGetServerTimeGetWithRequestBuilder(timeZone: String? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/GetServerTime"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
            "timeZone": timeZone
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("timeZone :\(timeZone ?? "")")
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Registers the social user.
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiMobileApiLoginAppleUserPost(model: SNAirQualityWebViewModelsAppleLogin? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiLoginAppleUserPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/loginAppleUser")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error)
        }
    }
    
    
    /**
     Registers the social user.
     - POST /api/MobileApi/loginAppleUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    open class func apiMobileApiLoginAppleUserPostWithRequestBuilder(model: SNAirQualityWebViewModelsAppleLogin? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/loginAppleUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = URLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    
    /**
     MobileLogout clear notification details
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiMobileApiMobileLogoutPost(model: LoginUserViewModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiMobileLogoutPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/MobileLogout")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error)
        }
    }
    
    
    /**
     MobileLogout clear notification details
     - POST /api/MobileApi/MobileLogout
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    open class func apiMobileApiMobileLogoutPostWithRequestBuilder(model: LoginUserViewModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/MobileLogout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = URLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiMobileApiUpdateWifiStatusPost(model: UpdateDeviceModel? = nil, completion: @escaping ((_ data: ResponseModel?,_ error: Error?) -> Void)) {
        apiMobileApiUpdateWifiStatusPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/MobileApi/UpdateWifiStatus")
                        textLog.writeAPI(String(format:"Response success %d",response?.body?.success ?? ""))
                        textLog.writeAPI(String(format:"Response data %@",response?.body?.data ?? ""))
                        textLog.writeAPI(String(format:"Response message %@",response?.body?.message ?? ""))
                        textLog.writeAPI(String(format:"Response errorCode   %@",response?.body?.errorCode ?? ""))
                        
            completion(response?.body, error)
        }
    }
    
    
    /**
     - POST /api/MobileApi/UpdateWifiStatus
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "data" : "{}",
     "success" : true,
     "errorCode" : "errorCode",
     "message" : "message"
     }}]
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<SNAirQualityBALModelResponseModel>
     */
    open class func apiMobileApiUpdateWifiStatusPostWithRequestBuilder(model: UpdateDeviceModel? = nil) -> RequestBuilder<ResponseModel> {
        let path = "/api/MobileApi/UpdateWifiStatus"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = URLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<ResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
