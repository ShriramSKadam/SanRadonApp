//
// AdminAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



public class AdminAPI {
    /**
     Changes the password.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminChangePasswordPost(model: ChangePasswordViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminChangePasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Changes the password.
     - POST /api/Admin/ChangePassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminChangePasswordPostWithRequestBuilder(model: ChangePasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/ChangePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Changes the password.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminChangePasswordUsingTempPasswordPost(model: ChangePasswordWithTempPasswordViewModel? = nil, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        apiAdminChangePasswordUsingTempPasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/ChangePasswordUsingTempPassword")
          
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            textLog.writeAPI(String(format:"Response header %@",response?.header ?? ""))
                        
            completion(response?.body, error);
        }
    }
    
    
    /**
     Changes the password.
     - POST /api/Admin/ChangePasswordUsingTempPassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : true,
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<ApiResponseBoolean>
     */
    public class func apiAdminChangePasswordUsingTempPasswordPostWithRequestBuilder(model: ChangePasswordWithTempPasswordViewModel? = nil) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/api/Admin/ChangePasswordUsingTempPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     
     - parameter emailAddress: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminCheckCrmServiceByEmailGet(emailAddress: String? = nil, completion: @escaping ((_ data: CRMContact?,_ error: Error?) -> Void)) {
        apiAdminCheckCrmServiceByEmailGetWithRequestBuilder(emailAddress: emailAddress).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/CheckCrmServiceByEmail")
          
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            textLog.writeAPI(String(format:"Response header %@",response?.header ?? ""))
           
            completion(response?.body, error);
        }
    }
    
    
    /**
     - GET /api/Admin/CheckCrmServiceByEmail
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "firstName" : "firstName",
     "lastName" : "lastName",
     "address" : {
     "country" : "country",
     "city" : "city",
     "street" : "street",
     "postalCode" : "postalCode",
     "state" : "state"
     },
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "phone" : "phone",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "id" : "id",
     "email" : "email",
     "account" : {
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "name" : "name",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "id" : "id",
     "billingAddress" : {
     "country" : "country",
     "city" : "city",
     "street" : "street",
     "postalCode" : "postalCode",
     "state" : "state"
     }
     }
     }}]
     
     - parameter emailAddress: (query)  (optional)
     
     - returns: RequestBuilder<CRMContact>
     */
    public class func apiAdminCheckCrmServiceByEmailGetWithRequestBuilder(emailAddress: String? = nil) -> RequestBuilder<CRMContact> {
        let path = "/api/Admin/CheckCrmServiceByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "emailAddress": emailAddress
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("emailAddress :\(emailAddress ?? "")")
        let requestBuilder: RequestBuilder<CRMContact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter serialNumber: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminCheckCrmServiceBySerialNumberGet(serialNumber: String? = nil, completion: @escaping ((_ data: CRMAsset?,_ error: Error?) -> Void)) {
        apiAdminCheckCrmServiceBySerialNumberGetWithRequestBuilder(serialNumber: serialNumber).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/CheckCrmServiceBySerialNumber")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
                        
            completion(response?.body, error);
        }
    }
    
    
    /**
     - GET /api/Admin/CheckCrmServiceBySerialNumber
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "serialNumber" : "serialNumber",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "serviceProductCode" : "serviceProductCode",
     "productCode" : "productCode",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "contact" : {
     "firstName" : "firstName",
     "lastName" : "lastName",
     "address" : {
     "country" : "country",
     "city" : "city",
     "street" : "street",
     "postalCode" : "postalCode",
     "state" : "state"
     },
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "phone" : "phone",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "id" : "id",
     "email" : "email",
     "account" : {
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "name" : "name",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "id" : "id",
     "billingAddress" : {
     "country" : "country",
     "city" : "city",
     "street" : "street",
     "postalCode" : "postalCode",
     "state" : "state"
     }
     }
     },
     "name" : "name",
     "serviceProductName" : "serviceProductName",
     "id" : "id",
     "account" : {
     "createdDate" : "2000-01-23T04:56:07.000+00:00",
     "name" : "name",
     "systemModstamp" : "2000-01-23T04:56:07.000+00:00",
     "id" : "id",
     "billingAddress" : {
     "country" : "country",
     "city" : "city",
     "street" : "street",
     "postalCode" : "postalCode",
     "state" : "state"
     }
     },
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "status" : "status"
     }}]
     
     - parameter serialNumber: (query)  (optional)
     
     - returns: RequestBuilder<CRMAsset>
     */
    public class func apiAdminCheckCrmServiceBySerialNumberGetWithRequestBuilder(serialNumber: String? = nil) -> RequestBuilder<CRMAsset> {
        let path = "/api/Admin/CheckCrmServiceBySerialNumber"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serialNumber": serialNumber
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("serialNumber :\(serialNumber ?? "")")
      
        let requestBuilder: RequestBuilder<CRMAsset>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter list: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminDateconvertGet(list: [String]? = nil, completion: @escaping ((_ data: [Double]?,_ error: Error?) -> Void)) {
        apiAdminDateconvertGetWithRequestBuilder(list: list).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/dateconvert")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))

            completion(response?.body, error);
        }
    }
    
    
    /**
     - GET /api/Admin/dateconvert
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ 0.8008281904610115, 0.8008281904610115 ]}]
     
     - parameter list: (query)  (optional)
     
     - returns: RequestBuilder<[Double]>
     */
    public class func apiAdminDateconvertGetWithRequestBuilder(list: [String]? = nil) -> RequestBuilder<[Double]> {
        let path = "/api/Admin/dateconvert"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "list": list
            ])
        
        textLog.writeAPI(URLString)
        //textLog.writeAPI("list :\(list ?? "")")
      
        let requestBuilder: RequestBuilder<[Double]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Disables the device.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminDisableDeviceGet(deviceId: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminDisableDeviceGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/DisableDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))

            completion(response?.body, error);
        }
    }
    
    
    /**
     Disables the device.
     - GET /api/Admin/DisableDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminDisableDeviceGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/DisableDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
      
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Enable the device.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminEnableDeviceGet(deviceId: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminEnableDeviceGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/EnableDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Enable the device.
     - GET /api/Admin/EnableDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminEnableDeviceGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/EnableDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
      
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Get all users
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminGetAllPost(completion: @escaping ((_ data: [AppUser]?,_ error: Error?) -> Void)) {
        apiAdminGetAllPostWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/GetAll")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Get all users
     - POST /api/Admin/GetAll
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     }, {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     } ]}]
     
     - returns: RequestBuilder<[AppUser]>
     */
    public class func apiAdminGetAllPostWithRequestBuilder() -> RequestBuilder<[AppUser]> {
        let path = "/api/Admin/GetAll"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
      
        let requestBuilder: RequestBuilder<[AppUser]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Login with user details passed.
     
     - parameter model: (body) Model with details of Login user. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminLoginPost(model: LoginUserViewModel? = nil, completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAdminLoginPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/Login")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Login with user details passed.
     - POST /api/Admin/Login
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body) Model with details of Login user. (optional)
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAdminLoginPostWithRequestBuilder(model: LoginUserViewModel? = nil) -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/Admin/Login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Logout clear notification details
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminLogoutPost(model: LoginUserViewModel? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminLogoutPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/Logout")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Logout clear notification details
     - POST /api/Admin/Logout
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminLogoutPostWithRequestBuilder(model: LoginUserViewModel? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/Logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Changes the password.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminOwnChangePasswordPost(model: OwnChangePasswordModel? = nil, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        apiAdminOwnChangePasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/OwnChangePassword")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Changes the password.
     - POST /api/Admin/OwnChangePassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : true,
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<ApiResponseBoolean>
     */
    public class func apiAdminOwnChangePasswordPostWithRequestBuilder(model: OwnChangePasswordModel? = nil) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/api/Admin/OwnChangePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Registers the specified user phone number with given details.
     
     - parameter model: (body) Model with details of user to be registered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminRegisterPost(model: RegisterUserViewModel? = nil, completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAdminRegisterPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/Register")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Registers the specified user phone number with given details.
     - POST /api/Admin/Register
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter model: (body) Model with details of user to be registered. (optional)
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAdminRegisterPostWithRequestBuilder(model: RegisterUserViewModel? = nil) -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/Admin/Register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Registers the social user.
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminRegisterSocialUserPost(model: RegisterSocialUserViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiAdminRegisterSocialUserPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/RegisterSocialUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Registers the social user.
     - POST /api/Admin/RegisterSocialUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body) The model with accesstoken and provider name. (optional)
     
     - returns: RequestBuilder<String>
     */
    public class func apiAdminRegisterSocialUserPostWithRequestBuilder(model: RegisterSocialUserViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/Admin/RegisterSocialUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Restart Inspection in device
     
     - parameter deviceId: (query) Id of device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminRestartInspectionGet(deviceId: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminRestartInspectionGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/RestartInspection")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Restart Inspection in device
     - GET /api/Admin/RestartInspection
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceId: (query) Id of device (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminRestartInspectionGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/RestartInspection"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Search Calibration Inspections
     
     - parameter inspectionReviewStatusId: (query) Inspection Review Status (optional)
     - parameter userId: (query) Device User Id (optional)
     - parameter searchKey: (query) Search key  &#x3D;&amp;gt; TestId, TesterName, CustomerName, MonitorSerialNumber (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageCount: (query) Page count (optional)
     - parameter sortByColumn: (query) Sort by column (optional, default to datecreated)
     - parameter sortAsc: (query) Sort by ASC/DESC (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSearchCalibrationInspectionsGet(inspectionReviewStatusId: Int64? = nil, userId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, completion: @escaping ((_ data: SearchResultInspectionDetails?,_ error: Error?) -> Void)) {
        apiAdminSearchCalibrationInspectionsGetWithRequestBuilder(inspectionReviewStatusId: inspectionReviewStatusId, userId: userId, searchKey: searchKey, pageNumber: pageNumber, pageCount: pageCount, sortByColumn: sortByColumn, sortAsc: sortAsc).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SearchCalibrationInspections")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Search Calibration Inspections
     - GET /api/Admin/SearchCalibrationInspections
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "licenseNo" : "licenseNo",
     "appVersion" : "appVersion",
     "deviceModelTypeId" : "deviceModelTypeId",
     "testNumber" : "testNumber",
     "deviceId" : 4,
     "lteinspectionstatus" : "lteinspectionstatus",
     "batteryLevelDuringInspection" : 0,
     "isselectatmosphericconditions" : true,
     "testSpecificComment" : "testSpecificComment",
     "monitorPressureUnitTypeId" : 6,
     "monitorFirmwareVersion" : "monitorFirmwareVersion",
     "timeDifference" : "timeDifference",
     "id" : 3,
     "inspectionReviewStatusId" : 1,
     "customerAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inputData" : "inputData",
     "timeZone" : "timeZone",
     "filteredStartTime" : "2000-01-23T04:56:07.000+00:00",
     "customerName" : "customerName",
     "motionErrors" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     } ],
     "inspectionImages" : [ {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     }, {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     } ],
     "licenseNumberDuringInspection" : "licenseNumberDuringInspection",
     "windSpeedIndex" : 5,
     "device" : {
     "deviceModelTypeId" : 2,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 6,
     "nightColorEndTime" : 3,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 4.145608029883936,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 9.301444243932576,
     "warningColorCode" : "warningColorCode",
     "id" : 1,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 6,
     "updatedBy" : 2,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 4.965218492984954,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 9,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 2.027123023002322,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 1,
     "temperatureThresholdHighalertLevel" : 7.386281948385884,
     "deviceTypeId" : 5,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 5.025004791520295,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 3.616076749251911,
     "airpressureThresholdHighWarningLevel" : 1.1730742509559433,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 1,
     "airpressureThresholdLowWarningLevel" : 7.457744773683766,
     "factoryResetIteration" : 9,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 8,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 7.061401241503109,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 5
     },
     "overrideTestResultId" : 8,
     "status" : "status",
     "isSelectedTestSpecificComment" : true,
     "deviceReadings" : [ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ],
     "latitude" : 8.761432466225475,
     "filteredEndTime" : "2000-01-23T04:56:07.000+00:00",
     "dateandTime" : "2000-01-23T04:56:07.000+00:00",
     "squareFootage" : 0,
     "isSelectedOverridetestResultId" : true,
     "isDeleted" : true,
     "customerId" : 6,
     "testResultId" : 0,
     "isMitigationSystemInstalled" : true,
     "isSelectedIsMitigationSystemActive" : true,
     "isSelectedIsMitigationSystemInstalled" : true,
     "actionLevels" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     } ],
     "isMitigationSystemActive" : true,
     "inspectionType" : 1,
     "monitorLocationId" : 4,
     "monitorRadonUnitTypeId" : 8,
     "buildingtype" : 9,
     "testerName" : "testerName",
     "startDateTime" : "2000-01-23T04:56:07.000+00:00",
     "hoursDelayed" : 9,
     "ismitigationSystemsWorking" : true,
     "customerAddress1" : "customerAddress1",
     "customerShippingAddressId" : 4,
     "monitorSerialNumber" : "monitorSerialNumber",
     "cpuArchitecture" : "cpuArchitecture",
     "isSelectedSquareFootage" : true,
     "invoiceAmount" : 4.573936264232251,
     "calibrationFactors" : [ {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     }, {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     } ],
     "reviewComments" : "reviewComments",
     "yearBuilt" : 6,
     "inspectionActionLevel" : 5.299143560275359,
     "customerAddressId" : 1,
     "isSelectedRadonRiskInformation" : true,
     "customerEmail" : "customerEmail",
     "isSelectedStructureTypeId" : true,
     "testedById" : 7,
     "inspectionTestStatus" : "inspectionTestStatus",
     "epaCounts" : [ 7, 7 ],
     "inspectedBy" : "inspectedBy",
     "testDuration" : 5,
     "longitude" : 0.4182561061793122,
     "measurementInterval" : 3,
     "isSelectedMonitorLocation" : true,
     "isSelectedInspectionType" : true,
     "updatedBy" : 9,
     "customerShippingAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inspectionactionlevel" : 6.628464275087742,
     "endDateTime" : "2000-01-23T04:56:07.000+00:00",
     "licenseTypeId" : 0,
     "isSelectedYearBuilt" : true,
     "inspectionAddress" : "inspectionAddress",
     "isSelectedbuildingType" : true,
     "inspectionStartTime" : "2000-01-23T04:56:07.000+00:00",
     "updateRadonUnits" : 8,
     "inspection_Complete" : "inspection_Complete",
     "monitorPin" : "monitorPin",
     "inspectionStatusId" : 2,
     "amountPrepaid" : 8.863729185622827,
     "dataSync" : "2000-01-23T04:56:07.000+00:00",
     "isSelectedStructureType" : true,
     "licenseType" : "licenseType",
     "platformVersion" : "platformVersion",
     "windDirectionIndex" : 7,
     "platformName" : "platformName",
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "atmosphericConditionsIndex" : 9,
     "measurementCount" : 3,
     "isMitigationSystemsInstalled" : true,
     "checkListItems" : [ {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     }, {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     } ],
     "isSelectedUnderstandingOfTestResults" : true,
     "percentComplete" : 9,
     "isSelectedWindSpeedIndex" : true,
     "monitorLocation" : "monitorLocation",
     "createdBy" : 3,
     "discriptions" : "discriptions",
     "structureType" : "structureType",
     "monitorTemperatureUnitTypeId" : 4,
     "inspectionUser" : {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     },
     "isSelectedWindDirectionIndex" : true,
     "testId" : "testId",
     "comment" : "comment"
     }, {
     "licenseNo" : "licenseNo",
     "appVersion" : "appVersion",
     "deviceModelTypeId" : "deviceModelTypeId",
     "testNumber" : "testNumber",
     "deviceId" : 4,
     "lteinspectionstatus" : "lteinspectionstatus",
     "batteryLevelDuringInspection" : 0,
     "isselectatmosphericconditions" : true,
     "testSpecificComment" : "testSpecificComment",
     "monitorPressureUnitTypeId" : 6,
     "monitorFirmwareVersion" : "monitorFirmwareVersion",
     "timeDifference" : "timeDifference",
     "id" : 3,
     "inspectionReviewStatusId" : 1,
     "customerAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inputData" : "inputData",
     "timeZone" : "timeZone",
     "filteredStartTime" : "2000-01-23T04:56:07.000+00:00",
     "customerName" : "customerName",
     "motionErrors" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     } ],
     "inspectionImages" : [ {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     }, {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     } ],
     "licenseNumberDuringInspection" : "licenseNumberDuringInspection",
     "windSpeedIndex" : 5,
     "device" : {
     "deviceModelTypeId" : 2,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 6,
     "nightColorEndTime" : 3,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 4.145608029883936,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 9.301444243932576,
     "warningColorCode" : "warningColorCode",
     "id" : 1,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 6,
     "updatedBy" : 2,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 4.965218492984954,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 9,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 2.027123023002322,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 1,
     "temperatureThresholdHighalertLevel" : 7.386281948385884,
     "deviceTypeId" : 5,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 5.025004791520295,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 3.616076749251911,
     "airpressureThresholdHighWarningLevel" : 1.1730742509559433,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 1,
     "airpressureThresholdLowWarningLevel" : 7.457744773683766,
     "factoryResetIteration" : 9,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 8,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 7.061401241503109,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 5
     },
     "overrideTestResultId" : 8,
     "status" : "status",
     "isSelectedTestSpecificComment" : true,
     "deviceReadings" : [ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ],
     "latitude" : 8.761432466225475,
     "filteredEndTime" : "2000-01-23T04:56:07.000+00:00",
     "dateandTime" : "2000-01-23T04:56:07.000+00:00",
     "squareFootage" : 0,
     "isSelectedOverridetestResultId" : true,
     "isDeleted" : true,
     "customerId" : 6,
     "testResultId" : 0,
     "isMitigationSystemInstalled" : true,
     "isSelectedIsMitigationSystemActive" : true,
     "isSelectedIsMitigationSystemInstalled" : true,
     "actionLevels" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     } ],
     "isMitigationSystemActive" : true,
     "inspectionType" : 1,
     "monitorLocationId" : 4,
     "monitorRadonUnitTypeId" : 8,
     "buildingtype" : 9,
     "testerName" : "testerName",
     "startDateTime" : "2000-01-23T04:56:07.000+00:00",
     "hoursDelayed" : 9,
     "ismitigationSystemsWorking" : true,
     "customerAddress1" : "customerAddress1",
     "customerShippingAddressId" : 4,
     "monitorSerialNumber" : "monitorSerialNumber",
     "cpuArchitecture" : "cpuArchitecture",
     "isSelectedSquareFootage" : true,
     "invoiceAmount" : 4.573936264232251,
     "calibrationFactors" : [ {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     }, {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     } ],
     "reviewComments" : "reviewComments",
     "yearBuilt" : 6,
     "inspectionActionLevel" : 5.299143560275359,
     "customerAddressId" : 1,
     "isSelectedRadonRiskInformation" : true,
     "customerEmail" : "customerEmail",
     "isSelectedStructureTypeId" : true,
     "testedById" : 7,
     "inspectionTestStatus" : "inspectionTestStatus",
     "epaCounts" : [ 7, 7 ],
     "inspectedBy" : "inspectedBy",
     "testDuration" : 5,
     "longitude" : 0.4182561061793122,
     "measurementInterval" : 3,
     "isSelectedMonitorLocation" : true,
     "isSelectedInspectionType" : true,
     "updatedBy" : 9,
     "customerShippingAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inspectionactionlevel" : 6.628464275087742,
     "endDateTime" : "2000-01-23T04:56:07.000+00:00",
     "licenseTypeId" : 0,
     "isSelectedYearBuilt" : true,
     "inspectionAddress" : "inspectionAddress",
     "isSelectedbuildingType" : true,
     "inspectionStartTime" : "2000-01-23T04:56:07.000+00:00",
     "updateRadonUnits" : 8,
     "inspection_Complete" : "inspection_Complete",
     "monitorPin" : "monitorPin",
     "inspectionStatusId" : 2,
     "amountPrepaid" : 8.863729185622827,
     "dataSync" : "2000-01-23T04:56:07.000+00:00",
     "isSelectedStructureType" : true,
     "licenseType" : "licenseType",
     "platformVersion" : "platformVersion",
     "windDirectionIndex" : 7,
     "platformName" : "platformName",
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "atmosphericConditionsIndex" : 9,
     "measurementCount" : 3,
     "isMitigationSystemsInstalled" : true,
     "checkListItems" : [ {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     }, {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     } ],
     "isSelectedUnderstandingOfTestResults" : true,
     "percentComplete" : 9,
     "isSelectedWindSpeedIndex" : true,
     "monitorLocation" : "monitorLocation",
     "createdBy" : 3,
     "discriptions" : "discriptions",
     "structureType" : "structureType",
     "monitorTemperatureUnitTypeId" : 4,
     "inspectionUser" : {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     },
     "isSelectedWindDirectionIndex" : true,
     "testId" : "testId",
     "comment" : "comment"
     } ],
     "inspectionIds" : [ 5, 5 ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter inspectionReviewStatusId: (query) Inspection Review Status (optional)
     - parameter userId: (query) Device User Id (optional)
     - parameter searchKey: (query) Search key  &#x3D;&amp;gt; TestId, TesterName, CustomerName, MonitorSerialNumber (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageCount: (query) Page count (optional)
     - parameter sortByColumn: (query) Sort by column (optional, default to datecreated)
     - parameter sortAsc: (query) Sort by ASC/DESC (optional, default to true)
     
     - returns: RequestBuilder<SearchResultInspectionDetails>
     */
    public class func apiAdminSearchCalibrationInspectionsGetWithRequestBuilder(inspectionReviewStatusId: Int64? = nil, userId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil) -> RequestBuilder<SearchResultInspectionDetails> {
        let path = "/api/Admin/SearchCalibrationInspections"
        let URLString = SwaggerClientAPI.basePath + path
        textLog.writeAPI(URLString)
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "inspectionReviewStatusId": inspectionReviewStatusId?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "searchKey": searchKey,
            "pageNumber": pageNumber?.encodeToJSON(),
            "pageCount": pageCount?.encodeToJSON(),
            "sortByColumn": sortByColumn,
            "sortAsc": sortAsc
            ])
        
        
        let requestBuilder: RequestBuilder<SearchResultInspectionDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Searches the devices.
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     - parameter userId: (query) The user identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSearchDevicesGet(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, userId: Int64? = nil, completion: @escaping ((_ data: SearchResultDeviceDetails?,_ error: Error?) -> Void)) {
        apiAdminSearchDevicesGetWithRequestBuilder(deviceTypeId: deviceTypeId, deviceStatusId: deviceStatusId, searchKey: searchKey, pageCount: pageCount, pageNumber: pageNumber, sortByColumn: sortByColumn, sortAsc: sortAsc, userId: userId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SearchDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Searches the devices.
     - GET /api/Admin/SearchDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "deviceModelTypeId" : 3,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "type" : "type",
     "lteInspection" : 5,
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "lastDataSync" : "lastDataSync",
     "humidityThresholdHighalertLevel" : 4,
     "nightColorEndTime" : 2,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.0246457001441578,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 4.145608029883936,
     "warningColorCode" : "warningColorCode",
     "model" : "model",
     "timeDifference" : "timeDifference",
     "id" : 6,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "longitude" : 6.027456183070403,
     "nightColorStartTime" : 1,
     "updatedBy" : 5,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "timeZone" : "timeZone",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "customerName" : "customerName",
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 9.369310271410669,
     "inspectionStatus" : "inspectionStatus",
     "deviceLocationAddress" : "deviceLocationAddress",
     "co2ThresholdWarningLevel" : 8,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 1.2315135367772556,
     "humidityThresholdLowWarningLevel" : 6,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 7,
     "status" : "status",
     "temperatureThresholdHighalertLevel" : 1.4894159098541704,
     "deviceTypeId" : 9,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "latitude" : 1.4658129805029452,
     "airpressureThresholdHighalertLevel" : 6.683562403749608,
     "deviceDerivedStatus" : "deviceDerivedStatus",
     "serviceProductCode" : "serviceProductCode",
     "expired" : 5,
     "ownerName" : "ownerName",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 7.386281948385884,
     "airpressureThresholdHighWarningLevel" : 9.965781217890562,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 2,
     "airpressureThresholdLowWarningLevel" : 5.025004791520295,
     "factoryResetIteration" : 6,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "ownerEmail" : "ownerEmail",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 3,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 2.027123023002322,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 7
     }, {
     "deviceModelTypeId" : 3,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "type" : "type",
     "lteInspection" : 5,
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "lastDataSync" : "lastDataSync",
     "humidityThresholdHighalertLevel" : 4,
     "nightColorEndTime" : 2,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.0246457001441578,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 4.145608029883936,
     "warningColorCode" : "warningColorCode",
     "model" : "model",
     "timeDifference" : "timeDifference",
     "id" : 6,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "longitude" : 6.027456183070403,
     "nightColorStartTime" : 1,
     "updatedBy" : 5,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "timeZone" : "timeZone",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "customerName" : "customerName",
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 9.369310271410669,
     "inspectionStatus" : "inspectionStatus",
     "deviceLocationAddress" : "deviceLocationAddress",
     "co2ThresholdWarningLevel" : 8,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 1.2315135367772556,
     "humidityThresholdLowWarningLevel" : 6,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 7,
     "status" : "status",
     "temperatureThresholdHighalertLevel" : 1.4894159098541704,
     "deviceTypeId" : 9,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "latitude" : 1.4658129805029452,
     "airpressureThresholdHighalertLevel" : 6.683562403749608,
     "deviceDerivedStatus" : "deviceDerivedStatus",
     "serviceProductCode" : "serviceProductCode",
     "expired" : 5,
     "ownerName" : "ownerName",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 7.386281948385884,
     "airpressureThresholdHighWarningLevel" : 9.965781217890562,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 2,
     "airpressureThresholdLowWarningLevel" : 5.025004791520295,
     "factoryResetIteration" : 6,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "ownerEmail" : "ownerEmail",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 3,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 2.027123023002322,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 7
     } ],
     "inspectionIds" : [ 6, 6 ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     - parameter userId: (query) The user identifier. (optional)
     
     - returns: RequestBuilder<SearchResultDeviceDetails>
     */
    public class func apiAdminSearchDevicesGetWithRequestBuilder(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, userId: Int64? = nil) -> RequestBuilder<SearchResultDeviceDetails> {
        let path = "/api/Admin/SearchDevices"
        let URLString = SwaggerClientAPI.basePath + path
        textLog.writeAPI(URLString)
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceTypeId": deviceTypeId?.encodeToJSON(),
            "deviceStatusId": deviceStatusId?.encodeToJSON(),
            "searchKey": searchKey,
            "pageCount": pageCount?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortByColumn": sortByColumn,
            "sortAsc": sortAsc,
            "userId": userId?.encodeToJSON()
            ])
        
        
        let requestBuilder: RequestBuilder<SearchResultDeviceDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Search Inspections
     
     - parameter licenseTypeId: (query) License type (optional)
     - parameter searchKey: (query) Search key  &#x3D;&amp;gt; TestId, TesterName, CustomerName, MonitorSerialNumber (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageCount: (query) Page count (optional)
     - parameter sortByColumn: (query) Sort by column (optional, default to datecreated)
     - parameter sortAsc: (query) Sort by ASC/DESC (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSearchInspectionsGet(licenseTypeId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, completion: @escaping ((_ data: SearchResultInspectionDetails?,_ error: Error?) -> Void)) {
        apiAdminSearchInspectionsGetWithRequestBuilder(licenseTypeId: licenseTypeId, searchKey: searchKey, pageNumber: pageNumber, pageCount: pageCount, sortByColumn: sortByColumn, sortAsc: sortAsc).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SearchInspections")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Search Inspections
     - GET /api/Admin/SearchInspections
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "licenseNo" : "licenseNo",
     "appVersion" : "appVersion",
     "deviceModelTypeId" : "deviceModelTypeId",
     "testNumber" : "testNumber",
     "deviceId" : 4,
     "lteinspectionstatus" : "lteinspectionstatus",
     "batteryLevelDuringInspection" : 0,
     "isselectatmosphericconditions" : true,
     "testSpecificComment" : "testSpecificComment",
     "monitorPressureUnitTypeId" : 6,
     "monitorFirmwareVersion" : "monitorFirmwareVersion",
     "timeDifference" : "timeDifference",
     "id" : 3,
     "inspectionReviewStatusId" : 1,
     "customerAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inputData" : "inputData",
     "timeZone" : "timeZone",
     "filteredStartTime" : "2000-01-23T04:56:07.000+00:00",
     "customerName" : "customerName",
     "motionErrors" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     } ],
     "inspectionImages" : [ {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     }, {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     } ],
     "licenseNumberDuringInspection" : "licenseNumberDuringInspection",
     "windSpeedIndex" : 5,
     "device" : {
     "deviceModelTypeId" : 2,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 6,
     "nightColorEndTime" : 3,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 4.145608029883936,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 9.301444243932576,
     "warningColorCode" : "warningColorCode",
     "id" : 1,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 6,
     "updatedBy" : 2,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 4.965218492984954,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 9,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 2.027123023002322,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 1,
     "temperatureThresholdHighalertLevel" : 7.386281948385884,
     "deviceTypeId" : 5,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 5.025004791520295,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 3.616076749251911,
     "airpressureThresholdHighWarningLevel" : 1.1730742509559433,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 1,
     "airpressureThresholdLowWarningLevel" : 7.457744773683766,
     "factoryResetIteration" : 9,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 8,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 7.061401241503109,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 5
     },
     "overrideTestResultId" : 8,
     "status" : "status",
     "isSelectedTestSpecificComment" : true,
     "deviceReadings" : [ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ],
     "latitude" : 8.761432466225475,
     "filteredEndTime" : "2000-01-23T04:56:07.000+00:00",
     "dateandTime" : "2000-01-23T04:56:07.000+00:00",
     "squareFootage" : 0,
     "isSelectedOverridetestResultId" : true,
     "isDeleted" : true,
     "customerId" : 6,
     "testResultId" : 0,
     "isMitigationSystemInstalled" : true,
     "isSelectedIsMitigationSystemActive" : true,
     "isSelectedIsMitigationSystemInstalled" : true,
     "actionLevels" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     } ],
     "isMitigationSystemActive" : true,
     "inspectionType" : 1,
     "monitorLocationId" : 4,
     "monitorRadonUnitTypeId" : 8,
     "buildingtype" : 9,
     "testerName" : "testerName",
     "startDateTime" : "2000-01-23T04:56:07.000+00:00",
     "hoursDelayed" : 9,
     "ismitigationSystemsWorking" : true,
     "customerAddress1" : "customerAddress1",
     "customerShippingAddressId" : 4,
     "monitorSerialNumber" : "monitorSerialNumber",
     "cpuArchitecture" : "cpuArchitecture",
     "isSelectedSquareFootage" : true,
     "invoiceAmount" : 4.573936264232251,
     "calibrationFactors" : [ {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     }, {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     } ],
     "reviewComments" : "reviewComments",
     "yearBuilt" : 6,
     "inspectionActionLevel" : 5.299143560275359,
     "customerAddressId" : 1,
     "isSelectedRadonRiskInformation" : true,
     "customerEmail" : "customerEmail",
     "isSelectedStructureTypeId" : true,
     "testedById" : 7,
     "inspectionTestStatus" : "inspectionTestStatus",
     "epaCounts" : [ 7, 7 ],
     "inspectedBy" : "inspectedBy",
     "testDuration" : 5,
     "longitude" : 0.4182561061793122,
     "measurementInterval" : 3,
     "isSelectedMonitorLocation" : true,
     "isSelectedInspectionType" : true,
     "updatedBy" : 9,
     "customerShippingAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inspectionactionlevel" : 6.628464275087742,
     "endDateTime" : "2000-01-23T04:56:07.000+00:00",
     "licenseTypeId" : 0,
     "isSelectedYearBuilt" : true,
     "inspectionAddress" : "inspectionAddress",
     "isSelectedbuildingType" : true,
     "inspectionStartTime" : "2000-01-23T04:56:07.000+00:00",
     "updateRadonUnits" : 8,
     "inspection_Complete" : "inspection_Complete",
     "monitorPin" : "monitorPin",
     "inspectionStatusId" : 2,
     "amountPrepaid" : 8.863729185622827,
     "dataSync" : "2000-01-23T04:56:07.000+00:00",
     "isSelectedStructureType" : true,
     "licenseType" : "licenseType",
     "platformVersion" : "platformVersion",
     "windDirectionIndex" : 7,
     "platformName" : "platformName",
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "atmosphericConditionsIndex" : 9,
     "measurementCount" : 3,
     "isMitigationSystemsInstalled" : true,
     "checkListItems" : [ {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     }, {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     } ],
     "isSelectedUnderstandingOfTestResults" : true,
     "percentComplete" : 9,
     "isSelectedWindSpeedIndex" : true,
     "monitorLocation" : "monitorLocation",
     "createdBy" : 3,
     "discriptions" : "discriptions",
     "structureType" : "structureType",
     "monitorTemperatureUnitTypeId" : 4,
     "inspectionUser" : {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     },
     "isSelectedWindDirectionIndex" : true,
     "testId" : "testId",
     "comment" : "comment"
     }, {
     "licenseNo" : "licenseNo",
     "appVersion" : "appVersion",
     "deviceModelTypeId" : "deviceModelTypeId",
     "testNumber" : "testNumber",
     "deviceId" : 4,
     "lteinspectionstatus" : "lteinspectionstatus",
     "batteryLevelDuringInspection" : 0,
     "isselectatmosphericconditions" : true,
     "testSpecificComment" : "testSpecificComment",
     "monitorPressureUnitTypeId" : 6,
     "monitorFirmwareVersion" : "monitorFirmwareVersion",
     "timeDifference" : "timeDifference",
     "id" : 3,
     "inspectionReviewStatusId" : 1,
     "customerAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inputData" : "inputData",
     "timeZone" : "timeZone",
     "filteredStartTime" : "2000-01-23T04:56:07.000+00:00",
     "customerName" : "customerName",
     "motionErrors" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 8,
     "updatedBy" : 3,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 7,
     "id" : 3,
     "value" : 4
     } ],
     "inspectionImages" : [ {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     }, {
     "inspectionId" : 6,
     "updatedBy" : 5,
     "imageData" : "imageData",
     "createdBy" : 1,
     "caption" : "caption",
     "isCoverPhoto" : true,
     "imageHash" : "imageHash",
     "id" : 5
     } ],
     "licenseNumberDuringInspection" : "licenseNumberDuringInspection",
     "windSpeedIndex" : 5,
     "device" : {
     "deviceModelTypeId" : 2,
     "crmStatus" : "crmStatus",
     "warningColorCodeHex" : "warningColorCodeHex",
     "isActive" : true,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 6,
     "nightColorEndTime" : 3,
     "batterypercent" : "batterypercent",
     "nextCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 4.145608029883936,
     "isVerifiedWithCrm" : true,
     "radonThresholdAlertLevel" : 9.301444243932576,
     "warningColorCode" : "warningColorCode",
     "id" : 1,
     "firmwareVersion" : "firmwareVersion",
     "serviceEndDate" : "2000-01-23T04:56:07.000+00:00",
     "nightColorStartTime" : 6,
     "updatedBy" : 2,
     "lastCalibrationDate" : "2000-01-23T04:56:07.000+00:00",
     "isWifiOn" : true,
     "okColorCode" : "okColorCode",
     "isUserDevice" : true,
     "crmId" : "crmId",
     "airpressureThresholdLowalertLevel" : 4.965218492984954,
     "inspectionStatus" : "inspectionStatus",
     "co2ThresholdWarningLevel" : 9,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 2.027123023002322,
     "humidityThresholdLowWarningLevel" : 1,
     "isCreatedWithoutSerialNumber" : true,
     "humidityThresholdHighWarningLevel" : 1,
     "temperatureThresholdHighalertLevel" : 7.386281948385884,
     "deviceTypeId" : 5,
     "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
     "deviceTimeDifferenceHours" : "deviceTimeDifferenceHours",
     "airpressureThresholdHighalertLevel" : 5.025004791520295,
     "serviceProductCode" : "serviceProductCode",
     "isDeleted" : true,
     "hwWarrantyExp" : "2000-01-23T04:56:07.000+00:00",
     "serialId" : "serialId",
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 9,
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "temperatureThresholdHighWarningLevel" : 3.616076749251911,
     "airpressureThresholdHighWarningLevel" : 1.1730742509559433,
     "vocThresholdWarningLevel" : 6,
     "humidityThresholdLowalertLevel" : 1,
     "deviceTimeDifference" : "deviceTimeDifference",
     "userId" : 1,
     "airpressureThresholdLowWarningLevel" : 7.457744773683766,
     "factoryResetIteration" : 9,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "serviceStartDate" : "2000-01-23T04:56:07.000+00:00",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "productCode" : "productCode",
     "isSettingsUpdatedToDevice" : true,
     "createdBy" : 6,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 8,
     "geocode" : {
     "x" : 0.8008281904610115,
     "y" : 6.027456183070403
     },
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 7.061401241503109,
     "serviceProductName" : "serviceProductName",
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "deviceStatusId" : 5
     },
     "overrideTestResultId" : 8,
     "status" : "status",
     "isSelectedTestSpecificComment" : true,
     "deviceReadings" : [ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ],
     "latitude" : 8.761432466225475,
     "filteredEndTime" : "2000-01-23T04:56:07.000+00:00",
     "dateandTime" : "2000-01-23T04:56:07.000+00:00",
     "squareFootage" : 0,
     "isSelectedOverridetestResultId" : true,
     "isDeleted" : true,
     "customerId" : 6,
     "testResultId" : 0,
     "isMitigationSystemInstalled" : true,
     "isSelectedIsMitigationSystemActive" : true,
     "isSelectedIsMitigationSystemInstalled" : true,
     "actionLevels" : [ {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     }, {
     "timeStamp" : "2000-01-23T04:56:07.000+00:00",
     "inspectionId" : 5,
     "updatedBy" : 0,
     "syncDateTimeId" : "syncDateTimeId",
     "createdBy" : 3,
     "id" : 4,
     "value" : 7.04836565559697
     } ],
     "isMitigationSystemActive" : true,
     "inspectionType" : 1,
     "monitorLocationId" : 4,
     "monitorRadonUnitTypeId" : 8,
     "buildingtype" : 9,
     "testerName" : "testerName",
     "startDateTime" : "2000-01-23T04:56:07.000+00:00",
     "hoursDelayed" : 9,
     "ismitigationSystemsWorking" : true,
     "customerAddress1" : "customerAddress1",
     "customerShippingAddressId" : 4,
     "monitorSerialNumber" : "monitorSerialNumber",
     "cpuArchitecture" : "cpuArchitecture",
     "isSelectedSquareFootage" : true,
     "invoiceAmount" : 4.573936264232251,
     "calibrationFactors" : [ {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     }, {
     "inspectionId" : 6,
     "updatedBy" : 3,
     "createdBy" : 5,
     "id" : 6,
     "value" : 6.878052220127876
     } ],
     "reviewComments" : "reviewComments",
     "yearBuilt" : 6,
     "inspectionActionLevel" : 5.299143560275359,
     "customerAddressId" : 1,
     "isSelectedRadonRiskInformation" : true,
     "customerEmail" : "customerEmail",
     "isSelectedStructureTypeId" : true,
     "testedById" : 7,
     "inspectionTestStatus" : "inspectionTestStatus",
     "epaCounts" : [ 7, 7 ],
     "inspectedBy" : "inspectedBy",
     "testDuration" : 5,
     "longitude" : 0.4182561061793122,
     "measurementInterval" : 3,
     "isSelectedMonitorLocation" : true,
     "isSelectedInspectionType" : true,
     "updatedBy" : 9,
     "customerShippingAddress" : {
     "zipCode" : "zipCode",
     "licenseNo" : "licenseNo",
     "updatedBy" : 7,
     "city" : "city",
     "phoneNo" : "phoneNo",
     "flatNo" : "flatNo",
     "addressTypeId" : 3,
     "createdBy" : 7,
     "street" : "street",
     "name" : "name",
     "state" : "state",
     "id" : 0,
     "email" : "email"
     },
     "inspectionactionlevel" : 6.628464275087742,
     "endDateTime" : "2000-01-23T04:56:07.000+00:00",
     "licenseTypeId" : 0,
     "isSelectedYearBuilt" : true,
     "inspectionAddress" : "inspectionAddress",
     "isSelectedbuildingType" : true,
     "inspectionStartTime" : "2000-01-23T04:56:07.000+00:00",
     "updateRadonUnits" : 8,
     "inspection_Complete" : "inspection_Complete",
     "monitorPin" : "monitorPin",
     "inspectionStatusId" : 2,
     "amountPrepaid" : 8.863729185622827,
     "dataSync" : "2000-01-23T04:56:07.000+00:00",
     "isSelectedStructureType" : true,
     "licenseType" : "licenseType",
     "platformVersion" : "platformVersion",
     "windDirectionIndex" : 7,
     "platformName" : "platformName",
     "expirationDate" : "2000-01-23T04:56:07.000+00:00",
     "atmosphericConditionsIndex" : 9,
     "measurementCount" : 3,
     "isMitigationSystemsInstalled" : true,
     "checkListItems" : [ {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     }, {
     "inspectionId" : 2,
     "isNewCheckList" : true,
     "updatedBy" : 2,
     "createdBy" : 9,
     "name" : "name",
     "index" : 7,
     "id" : 3,
     "isCompleted" : true
     } ],
     "isSelectedUnderstandingOfTestResults" : true,
     "percentComplete" : 9,
     "isSelectedWindSpeedIndex" : true,
     "monitorLocation" : "monitorLocation",
     "createdBy" : 3,
     "discriptions" : "discriptions",
     "structureType" : "structureType",
     "monitorTemperatureUnitTypeId" : 4,
     "inspectionUser" : {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 7,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 6,
     "humidityThresholdHighalertLevel" : 6.683562403749608,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 1.1730742509559433,
     "radonThresholdAlertLevel" : 1.4894159098541704,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 0,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 3,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 6.965117697638846,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "humidityThresholdLowWarningLevel" : 5.025004791520295,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 3,
     "userTypeId" : 1,
     "lastName" : "lastName",
     "airpressureThresholdHighalertLevel" : 3.5571952270680973,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 9,
     "isSelectedEpaAverage" : true,
     "stateId" : 2,
     "genderId" : 5,
     "humidityThresholdLowalertLevel" : 9.369310271410669,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 8.762042012749001,
     "airpressureRadonUnits" : 6,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 3,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 0,
     "alignmentId" : 4,
     "updatedBy" : 4,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 7,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 5,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.438423552598547,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 7.457744773683766,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 2.027123023002322,
     "humidityThresholdHighWarningLevel" : 9.965781217890562,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 8,
     "temperatureThresholdHighalertLevel" : 4.965218492984954,
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 6,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 1.284659006116532,
     "temperatureThresholdHighWarningLevel" : 6.84685269835264,
     "humidityRadonUnits" : 5,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 9.018348186070783,
     "roleId" : 0,
     "vocThresholdWarningLevel" : 2.8841621266687802,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "createdBy" : 7,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 6.778324963048013,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 1.0246457001441578,
     "isSelectedLicenseNo" : true
     },
     "isSelectedWindDirectionIndex" : true,
     "testId" : "testId",
     "comment" : "comment"
     } ],
     "inspectionIds" : [ 5, 5 ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter licenseTypeId: (query) License type (optional)
     - parameter searchKey: (query) Search key  &#x3D;&amp;gt; TestId, TesterName, CustomerName, MonitorSerialNumber (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageCount: (query) Page count (optional)
     - parameter sortByColumn: (query) Sort by column (optional, default to datecreated)
     - parameter sortAsc: (query) Sort by ASC/DESC (optional, default to true)
     
     - returns: RequestBuilder<SearchResultInspectionDetails>
     */
    public class func apiAdminSearchInspectionsGetWithRequestBuilder(licenseTypeId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil) -> RequestBuilder<SearchResultInspectionDetails> {
        let path = "/api/Admin/SearchInspections"
        let URLString = SwaggerClientAPI.basePath + path
        textLog.writeAPI(URLString)
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "licenseTypeId": licenseTypeId?.encodeToJSON(),
            "searchKey": searchKey,
            "pageNumber": pageNumber?.encodeToJSON(),
            "pageCount": pageCount?.encodeToJSON(),
            "sortByColumn": sortByColumn,
            "sortAsc": sortAsc
            ])
        
        
        let requestBuilder: RequestBuilder<SearchResultInspectionDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Searches the users.
     
     - parameter userTypeId: (query) The user type identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter sortByColumn: (query) Sort by column name (optional, default to datecreated)
     - parameter sortAsc: (query) Sort By ASC/DESC (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSearchUsersGet(userTypeId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, completion: @escaping ((_ data: SearchResultUserDetails?,_ error: Error?) -> Void)) {
        apiAdminSearchUsersGetWithRequestBuilder(userTypeId: userTypeId, searchKey: searchKey, pageNumber: pageNumber, pageCount: pageCount, sortByColumn: sortByColumn, sortAsc: sortAsc).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SearchUsers")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Searches the users.
     - GET /api/Admin/SearchUsers
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 3,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 5,
     "humidityThresholdHighalertLevel" : 9.018348186070783,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "buildTypeName" : "buildTypeName",
     "temperatureThresholdLowWarningLevel" : 5.025004791520295,
     "radonThresholdAlertLevel" : 7.457744773683766,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 7,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 0,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 2.8841621266687802,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "fullAddress" : "fullAddress",
     "humidityThresholdLowWarningLevel" : 9.369310271410669,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 7,
     "userTypeId" : 5,
     "lastName" : "lastName",
     "gender" : "gender",
     "airpressureThresholdHighalertLevel" : 1.284659006116532,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "noOfDevices" : 6,
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 2,
     "isSelectedEpaAverage" : true,
     "stateId" : 9,
     "genderId" : 7,
     "humidityThresholdLowalertLevel" : 8.762042012749001,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 6.438423552598547,
     "airpressureRadonUnits" : 3,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 4,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 6,
     "alignmentId" : 1,
     "updatedBy" : 3,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 1,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 2,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.965117697638846,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 4.965218492984954,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 7.386281948385884,
     "humidityThresholdHighWarningLevel" : 6.683562403749608,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 4,
     "temperatureThresholdHighalertLevel" : 9.965781217890562,
     "licenseType" : "licenseType",
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 0,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 6.778324963048013,
     "temperatureThresholdHighWarningLevel" : 1.1730742509559433,
     "humidityRadonUnits" : 3,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 3.5571952270680973,
     "roleId" : 1,
     "vocThresholdWarningLevel" : 6.878052220127876,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "mitigationSystemName" : "mitigationSystemName",
     "createdBy" : 8,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 5.944895607614016,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 6.84685269835264,
     "isSelectedLicenseNo" : true
     }, {
     "companyName" : "companyName",
     "warningColorCodeHex" : "warningColorCodeHex",
     "cityId" : 3,
     "alertColorCodeHex" : "alertColorCodeHex",
     "hasAcceptedTerms" : true,
     "deviceId" : 5,
     "humidityThresholdHighalertLevel" : 9.018348186070783,
     "companyAddress2" : "companyAddress2",
     "companyAddress1" : "companyAddress1",
     "nightlightColorCode" : "nightlightColorCode",
     "buildTypeName" : "buildTypeName",
     "temperatureThresholdLowWarningLevel" : 5.025004791520295,
     "radonThresholdAlertLevel" : 7.457744773683766,
     "companyPhonenumber" : "companyPhonenumber",
     "id" : 7,
     "companyZip" : "companyZip",
     "companyCity" : "companyCity",
     "temperatureUnitTypeId" : 1,
     "isSelectedRadonRiskInformationForReport" : true,
     "timeZone" : 0,
     "okColorCode" : "okColorCode",
     "co2ThresholdWarningLevel" : 2.8841621266687802,
     "dob" : "2000-01-23T04:56:07.000+00:00",
     "fullAddress" : "fullAddress",
     "humidityThresholdLowWarningLevel" : 9.369310271410669,
     "isEmailNotificationEnabled" : true,
     "loginlevel" : 7,
     "userTypeId" : 5,
     "lastName" : "lastName",
     "gender" : "gender",
     "airpressureThresholdHighalertLevel" : 1.284659006116532,
     "isSummaryEmailEnabled" : true,
     "isSelectedSignatureImageForReport" : true,
     "isDeleted" : true,
     "trialaccountstartdate" : "2000-01-23T04:56:07.000+00:00",
     "email" : "email",
     "noOfDevices" : 6,
     "address" : "address",
     "isTrialUser" : true,
     "stateNoticeId" : 2,
     "isSelectedEpaAverage" : true,
     "stateId" : 9,
     "genderId" : 7,
     "humidityThresholdLowalertLevel" : 8.762042012749001,
     "sendNotificationOnSncApproval" : true,
     "crmcreateddate" : "2000-01-23T04:56:07.000+00:00",
     "airpressureThresholdLowWarningLevel" : 6.438423552598547,
     "airpressureRadonUnits" : 3,
     "signatureImage" : "signatureImage",
     "isSelectedUnderstandingRadonTestResults" : true,
     "isWeeklySummaryEmailEnabled" : true,
     "temperatureRadonUnits" : 6,
     "enableNotifications" : true,
     "companyState" : "companyState",
     "radonUnitTypeId" : 4,
     "profileImage" : "profileImage",
     "headerImage" : "headerImage",
     "mitigationsystemtypeid" : 7,
     "sendNotificationonDataSync" : true,
     "warningColorCode" : "warningColorCode",
     "isSelectedOverallAverage" : true,
     "buildingtypeid" : 6,
     "alignmentId" : 1,
     "updatedBy" : 3,
     "isSelectedTestData" : true,
     "pressureUnitTypeId" : 1,
     "trialaccountenddate" : "2000-01-23T04:56:07.000+00:00",
     "notificationEmail" : "notificationEmail",
     "hasAcceptedPrivacyPolicy" : true,
     "zipcode" : "zipcode",
     "licenseTypeId" : 2,
     "firstName" : "firstName",
     "crmAccountId" : "crmAccountId",
     "airpressureThresholdLowalertLevel" : 6.965117697638846,
     "name" : "name",
     "temperatureThresholdLowalertLevel" : 4.965218492984954,
     "isMobileNotificationFrequencyEnabled" : true,
     "isDailySummaryEmailEnabled" : true,
     "isSelectedTestChart" : true,
     "actionLevel" : 7.386281948385884,
     "humidityThresholdHighWarningLevel" : 6.683562403749608,
     "lastSummaryNotificationdate" : "2000-01-23T04:56:07.000+00:00",
     "isTextNotificationEnabled" : true,
     "appLayout" : 4,
     "temperatureThresholdHighalertLevel" : 9.965781217890562,
     "licenseType" : "licenseType",
     "crmid" : "crmid",
     "lastMothlyNotificationDate" : "2000-01-23T04:56:07.000+00:00",
     "appTheme" : 0,
     "isMonthlySummaryEmailEnabled" : true,
     "okColorCodeHex" : "okColorCodeHex",
     "co2ThresholdAlertLevel" : 6.778324963048013,
     "temperatureThresholdHighWarningLevel" : 1.1730742509559433,
     "humidityRadonUnits" : 3,
     "comments" : "comments",
     "airpressureThresholdHighWarningLevel" : 3.5571952270680973,
     "roleId" : 1,
     "vocThresholdWarningLevel" : 6.878052220127876,
     "mobileNo" : "mobileNo",
     "crmmodifieddate" : "2000-01-23T04:56:07.000+00:00",
     "mitigationSystemName" : "mitigationSystemName",
     "createdBy" : 8,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 5.944895607614016,
     "companyLicenseNumber" : "companyLicenseNumber",
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 6.84685269835264,
     "isSelectedLicenseNo" : true
     } ],
     "inspectionIds" : [ 3, 3 ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter userTypeId: (query) The user type identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter sortByColumn: (query) Sort by column name (optional, default to datecreated)
     - parameter sortAsc: (query) Sort By ASC/DESC (optional, default to true)
     
     - returns: RequestBuilder<SearchResultUserDetails>
     */
    public class func apiAdminSearchUsersGetWithRequestBuilder(userTypeId: Int64? = nil, searchKey: String? = nil, pageNumber: Int? = nil, pageCount: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil) -> RequestBuilder<SearchResultUserDetails> {
        let path = "/api/Admin/SearchUsers"
        let URLString = SwaggerClientAPI.basePath + path
        textLog.writeAPI(URLString)
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userTypeId": userTypeId?.encodeToJSON(),
            "searchKey": searchKey,
            "pageNumber": pageNumber?.encodeToJSON(),
            "pageCount": pageCount?.encodeToJSON(),
            "sortByColumn": sortByColumn,
            "sortAsc": sortAsc
            ])
        
        
        let requestBuilder: RequestBuilder<SearchResultUserDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Sends the temporary password.
     
     - parameter email: (query) The email. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSendTemporaryPasswordGet(email: String? = nil, completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAdminSendTemporaryPasswordGetWithRequestBuilder(email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SendTemporaryPassword")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Sends the temporary password.
     - GET /api/Admin/SendTemporaryPassword
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter email: (query) The email. (optional)
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAdminSendTemporaryPasswordGetWithRequestBuilder(email: String? = nil) -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/Admin/SendTemporaryPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email
            ])
        textLog.writeAPI("email :\(email ?? "")")
        
        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Sends the temporary password for sales fource account.
     
     - parameter email: (query) The email. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSignUpSalesForceUserGet(email: String? = nil, completion: @escaping ((_ data: ApiResponseActionResult?,_ error: Error?) -> Void)) {
        apiAdminSignUpSalesForceUserGetWithRequestBuilder(email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SignUpSalesForceUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Sends the temporary password for sales fource account.
     - GET /api/Admin/SignUpSalesForceUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : { },
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter email: (query) The email. (optional)
     
     - returns: RequestBuilder<ApiResponseActionResult>
     */
    public class func apiAdminSignUpSalesForceUserGetWithRequestBuilder(email: String? = nil) -> RequestBuilder<ApiResponseActionResult> {
        let path = "/api/Admin/SignUpSalesForceUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("email :\(email ?? "")")
        
        let requestBuilder: RequestBuilder<ApiResponseActionResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Bulk Soft deletes devices.
     
     - parameter deviceIds: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftBulkDeleteDevicesDelete(deviceIds: [Int64]? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftBulkDeleteDevicesDeleteWithRequestBuilder(deviceIds: deviceIds).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftBulkDeleteDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Bulk Soft deletes devices.
     - DELETE /api/Admin/SoftBulkDeleteDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter deviceIds: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftBulkDeleteDevicesDeleteWithRequestBuilder(deviceIds: [Int64]? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftBulkDeleteDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceIds": deviceIds
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceIds :\(deviceIds?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Bulk Soft deletes inspection.
     
     - parameter inspectionIds: (query) The inspection identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftBulkDeleteInspectionsDelete(inspectionIds: [Int64]? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftBulkDeleteInspectionsDeleteWithRequestBuilder(inspectionIds: inspectionIds).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftBulkDeleteInspections")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Bulk Soft deletes inspection.
     - DELETE /api/Admin/SoftBulkDeleteInspections
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter inspectionIds: (query) The inspection identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftBulkDeleteInspectionsDeleteWithRequestBuilder(inspectionIds: [Int64]? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftBulkDeleteInspections"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "inspectionIds": inspectionIds
            ])
        textLog.writeAPI(URLString)
        
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Bulk Soft deletes user.
     
     - parameter userIds: (query) The user identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftBulkDeleteUsersDelete(userIds: [Int64]? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftBulkDeleteUsersDeleteWithRequestBuilder(userIds: userIds).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftBulkDeleteUsers")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Bulk Soft deletes user.
     - DELETE /api/Admin/SoftBulkDeleteUsers
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter userIds: (query) The user identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftBulkDeleteUsersDeleteWithRequestBuilder(userIds: [Int64]? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftBulkDeleteUsers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userIds": userIds
            ])
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Soft the deletes device.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftDeleteDeviceDelete(deviceId: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftDeleteDeviceDeleteWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftDeleteDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Soft the deletes device.
     - DELETE /api/Admin/SoftDeleteDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftDeleteDeviceDeleteWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftDeleteDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Soft the deletes inspection.
     
     - parameter inspectionId: (query) The inspection identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftDeleteInspectionDelete(inspectionId: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftDeleteInspectionDeleteWithRequestBuilder(inspectionId: inspectionId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftDeleteInspection")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Soft the deletes inspection.
     - DELETE /api/Admin/SoftDeleteInspection
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter inspectionId: (query) The inspection identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftDeleteInspectionDeleteWithRequestBuilder(inspectionId: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftDeleteInspection"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "inspectionId": inspectionId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("inspectionId :\(inspectionId?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Soft the deletes user.
     
     - parameter userId: (query) The user identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminSoftDeleteUserDelete(userId: Int64? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiAdminSoftDeleteUserDeleteWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/SoftDeleteUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Soft the deletes user.
     - DELETE /api/Admin/SoftDeleteUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter userId: (query) The user identifier. (optional)
     
     - returns: RequestBuilder<Int>
     */
    public class func apiAdminSoftDeleteUserDeleteWithRequestBuilder(userId: Int64? = nil) -> RequestBuilder<Int> {
        let path = "/api/Admin/SoftDeleteUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId?.encodeToJSON()
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("userId :\(userId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Start Inspection in device
     
     - parameter deviceId: (query) Id of device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminStartInspectionGet(deviceId: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminStartInspectionGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/StartInspection")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Start Inspection in device
     - GET /api/Admin/StartInspection
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceId: (query) Id of device (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminStartInspectionGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/StartInspection"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Stop running inspection in Device
     
     - parameter deviceId: (query) Id of device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminStopInspectionGet(deviceId: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminStopInspectionGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/StopInspection")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Stop running inspection in Device
     - GET /api/Admin/StopInspection
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceId: (query) Id of device (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminStopInspectionGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/StopInspection"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Update User with details passed.
     
     - parameter model: (body) Pass details as Model (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminUpdatePost(model: EditUserViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminUpdatePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/Update")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Update User with details passed.
     - POST /api/Admin/Update
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) Pass details as Model (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminUpdatePostWithRequestBuilder(model: EditUserViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/Update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     crm service update user by email adress
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminUpsertDeviceBySerialNumberPost(model: CRMAsset? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminUpsertDeviceBySerialNumberPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/UpsertDeviceBySerialNumber")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     crm service update user by email adress
     - POST /api/Admin/UpsertDeviceBySerialNumber
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminUpsertDeviceBySerialNumberPostWithRequestBuilder(model: CRMAsset? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/UpsertDeviceBySerialNumber"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upserts the device.
     
     - parameter device: (body) The device. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminUpsertDevicePost(device: Device? = nil, completion: @escaping ((_ data: ApiResponseInt64?,_ error: Error?) -> Void)) {
        apiAdminUpsertDevicePostWithRequestBuilder(device: device).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/UpsertDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Upserts the device.
     - POST /api/Admin/UpsertDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : 6,
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter device: (body) The device. (optional)
     
     - returns: RequestBuilder<ApiResponseInt64>
     */
    public class func apiAdminUpsertDevicePostWithRequestBuilder(device: Device? = nil) -> RequestBuilder<ApiResponseInt64> {
        let path = "/api/Admin/UpsertDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: device)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
//        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
//        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<ApiResponseInt64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     crm service update user by email adress
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminUpsertUserByEmailPost(model: CRMContact? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminUpsertUserByEmailPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/UpsertUserByEmail")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     crm service update user by email adress
     - POST /api/Admin/UpsertUserByEmail
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminUpsertUserByEmailPostWithRequestBuilder(model: CRMContact? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/UpsertUserByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upserts(Add or Update) the user.
     
     - parameter user: (body) The user. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminUpsertUserPost(user: AppUser? = nil, completion: @escaping ((_ data: ApiResponseInt64?,_ error: Error?) -> Void)) {
        apiAdminUpsertUserPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/UpsertUser")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Upserts(Add or Update) the user.
     - POST /api/Admin/UpsertUser
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "result" : 6,
     "code" : 0,
     "requestKey" : "requestKey",
     "detail" : "detail",
     "hasError" : true,
     "message" : "message"
     }}]
     
     - parameter user: (body) The user. (optional)
     
     - returns: RequestBuilder<ApiResponseInt64>
     */
    public class func apiAdminUpsertUserPostWithRequestBuilder(user: AppUser? = nil) -> RequestBuilder<ApiResponseInt64> {
        let path = "/api/Admin/UpsertUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        
        let requestBuilder: RequestBuilder<ApiResponseInt64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Verifies Email using the specified verification key.
     
     - parameter verificationKey: (query) The verification key. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAdminVerifyGet(verificationKey: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiAdminVerifyGetWithRequestBuilder(verificationKey: verificationKey).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Admin/Verify")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Verifies Email using the specified verification key.
     - GET /api/Admin/Verify
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter verificationKey: (query) The verification key. (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiAdminVerifyGetWithRequestBuilder(verificationKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/Admin/Verify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "verificationKey": verificationKey
            ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("verificationKey :\(verificationKey ?? "")")
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
}
