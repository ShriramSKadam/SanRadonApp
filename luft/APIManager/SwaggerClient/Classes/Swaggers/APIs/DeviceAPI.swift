//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



public class DeviceAPI {
    /**
     Adds the reading notification.
     
     - parameter readingViewmodels: (body) The reading viewmodels. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceAddReadingNotificationPost(readingViewmodels: [DeviceReadingViewModel]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceAddReadingNotificationPostWithRequestBuilder(readingViewmodels: readingViewmodels).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/AddReadingNotification")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Adds the reading notification.
     - POST /api/Device/AddReadingNotification
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter readingViewmodels: (body) The reading viewmodels. (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceAddReadingNotificationPostWithRequestBuilder(readingViewmodels: [DeviceReadingViewModel]? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/AddReadingNotification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: readingViewmodels)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: readingViewmodels) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     
     - parameter serialNumber: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceClearReadingsGet(serialNumber: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceClearReadingsGetWithRequestBuilder(serialNumber: serialNumber).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/ClearReadings")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     - GET /api/Device/ClearReadings
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter serialNumber: (query)  (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceClearReadingsGetWithRequestBuilder(serialNumber: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/ClearReadings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serialNumber": serialNumber
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("serialNumber :\(serialNumber ?? "")")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Deletes all home devices.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceDeleteAllHomeDevicesPost(model: [DeleteHomeDeviceModel]? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiDeviceDeleteAllHomeDevicesPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/DeleteAllHomeDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes all home devices.
     - POST /api/Device/DeleteAllHomeDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=true}]
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Bool> 
     */
    public class func apiDeviceDeleteAllHomeDevicesPostWithRequestBuilder(model: [DeleteHomeDeviceModel]? = nil) -> RequestBuilder<Bool> {
        let path = "/api/Device/DeleteAllHomeDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Deletes the home device.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter userId: (query) The user identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceDeleteHomeDevicePost(deviceId: Int64? = nil, userId: Int64? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiDeviceDeleteHomeDevicePostWithRequestBuilder(deviceId: deviceId, userId: userId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/DeleteHomeDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Deletes the home device.
     - POST /api/Device/DeleteHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=true}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter userId: (query) The user identifier. (optional)
     
     - returns: RequestBuilder<Bool> 
     */
    public class func apiDeviceDeleteHomeDevicePostWithRequestBuilder(deviceId: Int64? = nil, userId: Int64? = nil) -> RequestBuilder<Bool> {
        let path = "/api/Device/DeleteHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(), 
            "userId": userId?.encodeToJSON()
        ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),userId :\(userId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Remove sharing for home device
     
     - parameter deviceId: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceDeleteSharedHomeDevicePost(deviceId: Int64? = nil, email: String? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiDeviceDeleteSharedHomeDevicePostWithRequestBuilder(deviceId: deviceId, email: email).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/DeleteSharedHomeDevice")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Remove sharing for home device
     - POST /api/Device/DeleteSharedHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=true}]
     
     - parameter deviceId: (query)  (optional)
     - parameter email: (query)  (optional)
     
     - returns: RequestBuilder<Bool> 
     */
    public class func apiDeviceDeleteSharedHomeDevicePostWithRequestBuilder(deviceId: Int64? = nil, email: String? = nil) -> RequestBuilder<Bool> {
        let path = "/api/Device/DeleteSharedHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(), 
            "email": email
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),email :\(email ?? "")")
        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Downloads the firmware.
     
     - parameter firmwareVersion: (query) The firmware version. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceDownloadFirmwareGet(firmwareVersion: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        apiDeviceDownloadFirmwareGetWithRequestBuilder(firmwareVersion: firmwareVersion).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/DownloadFirmware")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Downloads the firmware.
     - GET /api/Device/DownloadFirmware
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{output=none}]
     
     - parameter firmwareVersion: (query) The firmware version. (optional)
     
     - returns: RequestBuilder<URL> 
     */
    public class func apiDeviceDownloadFirmwareGetWithRequestBuilder(firmwareVersion: String? = nil) -> RequestBuilder<URL> {
        let path = "/api/Device/DownloadFirmware"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "firmwareVersion": firmwareVersion
        ])
        
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("firmwareVersion :\(firmwareVersion ?? "")")
        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Exports the home devices.
     
     - parameter startDateTime: (query) The start date time. (optional)
     - parameter endDateTime: (query) The end date time. (optional)
     - parameter longtitude: (query) The longtitude. (optional)
     - parameter latitude: (query) The latitude. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter radius: (query) The radius. (optional)
     - parameter timeDifference: (query)  (optional)
     - parameter buildingTypeId: (query)  (optional)
     - parameter mitigationTypeId: (query)  (optional)
     - parameter sharedUserId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceExportHomeDevicesGet(startDateTime: String? = nil, endDateTime: String? = nil, longtitude: Double? = nil, latitude: Double? = nil, searchKey: String? = nil, deviceTypeId: Int? = nil, radius: Double? = nil, timeDifference: String? = nil, buildingTypeId: String? = nil, mitigationTypeId: String? = nil, sharedUserId: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceExportHomeDevicesGetWithRequestBuilder(startDateTime: startDateTime, endDateTime: endDateTime, longtitude: longtitude, latitude: latitude, searchKey: searchKey, deviceTypeId: deviceTypeId, radius: radius, timeDifference: timeDifference, buildingTypeId: buildingTypeId, mitigationTypeId: mitigationTypeId, sharedUserId: sharedUserId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/ExportHomeDevices")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(error);
        }
    }
    
    
    /**
     Exports the home devices.
     - GET /api/Device/ExportHomeDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter startDateTime: (query) The start date time. (optional)
     - parameter endDateTime: (query) The end date time. (optional)
     - parameter longtitude: (query) The longtitude. (optional)
     - parameter latitude: (query) The latitude. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter radius: (query) The radius. (optional)
     - parameter timeDifference: (query)  (optional)
     - parameter buildingTypeId: (query)  (optional)
     - parameter mitigationTypeId: (query)  (optional)
     - parameter sharedUserId: (query)  (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceExportHomeDevicesGetWithRequestBuilder(startDateTime: String? = nil, endDateTime: String? = nil, longtitude: Double? = nil, latitude: Double? = nil, searchKey: String? = nil, deviceTypeId: Int? = nil, radius: Double? = nil, timeDifference: String? = nil, buildingTypeId: String? = nil, mitigationTypeId: String? = nil, sharedUserId: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/ExportHomeDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "startDateTime": startDateTime?.encodeToJSON(), 
            "endDateTime": endDateTime?.encodeToJSON(), 
            "longtitude": longtitude, 
            "latitude": latitude, 
            "searchKey": searchKey, 
            "deviceTypeId": deviceTypeId?.encodeToJSON(), 
            "radius": radius, 
            "timeDifference": timeDifference, 
            "buildingTypeId": buildingTypeId, 
            "mitigationTypeId": mitigationTypeId, 
            "sharedUserId": sharedUserId?.encodeToJSON()
        ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("startDateTime :\(startDateTime?.encodeToJSON() ?? ""),endDateTime :\(endDateTime?.encodeToJSON() ?? ""),longtitude :\(longtitude ?? 0.0),latitude :\(latitude ?? 0.0),searchKey :\(searchKey ?? ""),deviceTypeId :\(deviceTypeId?.encodeToJSON() ?? ""),radius :\(radius ?? 0),timeDifference :\(timeDifference ?? ""),buildingTypeId :\(buildingTypeId ?? ""),mitigationTypeId :\(mitigationTypeId ?? ""),sharedUserId :\(sharedUserId?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Get min and max bounds for device
     
     - parameter logType: (query) hourly/daily (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetBoundsGet(logType: String? = nil, completion: @escaping ((_ data: DeviceReadingBoundsModel?,_ error: Error?) -> Void)) {
        apiDeviceGetBoundsGetWithRequestBuilder(logType: logType).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetBounds")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Get min and max bounds for device
     - GET /api/Device/GetBounds
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "maxLogIndex" : 6,
     "minLogIndex" : 0
     }}]
     
     - parameter logType: (query) hourly/daily (optional)
     
     - returns: RequestBuilder<DeviceReadingBoundsModel> 
     */
    public class func apiDeviceGetBoundsGetWithRequestBuilder(logType: String? = nil) -> RequestBuilder<DeviceReadingBoundsModel> {
        let path = "/api/Device/GetBounds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "logType": logType
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("logType :\(logType ?? "")")
        let requestBuilder: RequestBuilder<DeviceReadingBoundsModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the daywise aggregation.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetDaywiseAggregationGet(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil, completion: @escaping ((_ data: [ReadingAggregationViewModel]?,_ error: Error?) -> Void)) {
        apiDeviceGetDaywiseAggregationGetWithRequestBuilder(deviceId: deviceId, readingFieldName: readingFieldName, fromDate: fromDate, toDate: toDate).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetDaywiseAggregation")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the daywise aggregation.
     - GET /api/Device/GetDaywiseAggregation
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     }, {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     } ]}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     
     - returns: RequestBuilder<[ReadingAggregationViewModel]> 
     */
    public class func apiDeviceGetDaywiseAggregationGetWithRequestBuilder(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil) -> RequestBuilder<[ReadingAggregationViewModel]> {
        let path = "/api/Device/GetDaywiseAggregation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(), 
            "readingFieldName": readingFieldName, 
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),readingFieldName :\(readingFieldName ?? ""),fromDate :\(fromDate?.encodeToJSON() ?? ""),toDate :\(toDate?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<[ReadingAggregationViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     get  device inspection status
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetDeviceCommandFromServerPost(model: GetDeviceCommandOnServer? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiDeviceGetDeviceCommandFromServerPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetDeviceCommandFromServer")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     get  device inspection status
     - POST /api/Device/GetDeviceCommandFromServer
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<String> 
     */
    public class func apiDeviceGetDeviceCommandFromServerPostWithRequestBuilder(model: GetDeviceCommandOnServer? = nil) -> RequestBuilder<String> {
        let path = "/api/Device/GetDeviceCommandFromServer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Gets the device settings.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetDeviceSettingsGet(completion: @escaping ((_ data: DeviceSettingsModel?,_ error: Error?) -> Void)) {
        apiDeviceGetDeviceSettingsGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetDeviceSettings")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the device settings.
     - GET /api/Device/GetDeviceSettings
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "temperatureThresholdHighalertLevel" : 2.3021358869347655,
     "warningColorCodeHex" : "warningColorCodeHex",
     "airpressureThresholdHighalertLevel" : 1.0246457001441578,
     "alertColorCodeHex" : "alertColorCodeHex",
     "humidityThresholdHighalertLevel" : 2,
     "nightColorEndTime" : 5,
     "nightlightColorCode" : "nightlightColorCode",
     "temperatureThresholdLowWarningLevel" : 5.637376656633329,
     "radonThresholdAlertLevel" : 6.027456183070403,
     "okColorCodeHex" : "okColorCodeHex",
     "warningColorCode" : "warningColorCode",
     "co2ThresholdAlertLevel" : 6,
     "temperatureThresholdHighWarningLevel" : 1.4658129805029452,
     "nightColorStartTime" : 4,
     "airpressureThresholdHighWarningLevel" : 7.386281948385884,
     "vocThresholdWarningLevel" : 7,
     "humidityThresholdLowalertLevel" : 3,
     "okColorCode" : "okColorCode",
     "deviceTimeDifference" : "deviceTimeDifference",
     "airpressureThresholdLowWarningLevel" : 4.145608029883936,
     "airpressureThresholdLowalertLevel" : 1.2315135367772556,
     "co2ThresholdWarningLevel" : 1,
     "alertColorCode" : "alertColorCode",
     "vocThresholdAlertLevel" : 1,
     "temperatureThresholdLowalertLevel" : 5.962133916683182,
     "nightlightColorCodeHex" : "nightlightColorCodeHex",
     "radonThresholdWarningLevel" : 0.8008281904610115,
     "tempOffset" : "tempOffset",
     "deviceTimeZone" : "deviceTimeZone",
     "humidityThresholdLowWarningLevel" : 7,
     "humidityThresholdHighWarningLevel" : 9
     }}]
     
     - returns: RequestBuilder<DeviceSettingsModel> 
     */
    public class func apiDeviceGetDeviceSettingsGetWithRequestBuilder() -> RequestBuilder<DeviceSettingsModel> {
        let path = "/api/Device/GetDeviceSettings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<DeviceSettingsModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter serialNumber: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetDeviceTokenFromSerialNumberGet(serialNumber: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiDeviceGetDeviceTokenFromSerialNumberGetWithRequestBuilder(serialNumber: serialNumber).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetDeviceTokenFromSerialNumber")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     - GET /api/Device/GetDeviceTokenFromSerialNumber
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     
     - parameter serialNumber: (query)  (optional)
     
     - returns: RequestBuilder<String> 
     */
    public class func apiDeviceGetDeviceTokenFromSerialNumberGetWithRequestBuilder(serialNumber: String? = nil) -> RequestBuilder<String> {
        let path = "/api/Device/GetDeviceTokenFromSerialNumber"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serialNumber": serialNumber
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("serialNumber :\(serialNumber ?? "")")
        
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     get Devicereading by device id
     
     - parameter deviceID: (query) The device id identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    //    public class func apiDeviceGetDevicereadingHomeDevicesGet(deviceID: Int64? = nil, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
    //        apiDeviceGetDevicereadingHomeDevicesGetWithRequestBuilder(deviceID: deviceID).execute { (response, error) -> Void in
    //            completion(response?.body, error);
    //        }
    //    }
    
    
    /**
     get Devicereading by device id
     - GET /api/Device/GetDevicereadingHomeDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]
     
     - parameter deviceID: (query) The device id identifier. (optional)
     
     - returns: RequestBuilder<[Any]> 
     */
    //    public class func apiDeviceGetDevicereadingHomeDevicesGetWithRequestBuilder(deviceID: Int64? = nil) -> RequestBuilder<[Any]> {
    //        let path = "/api/Device/GetDevicereadingHomeDevices"
    //        let URLString = SwaggerClientAPI.basePath + path
    //        let parameters: [String:Any]? = nil
    //
    //        let url = NSURLComponents(string: URLString)
    //        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
    //            "deviceID": deviceID?.encodeToJSON()
    //        ])
    //
    //
    //        let requestBuilder: RequestBuilder<[Any]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
    //
    //        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    //    }
    
    /**
     Gets the firmware version.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetFirmwareVersionGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiDeviceGetFirmwareVersionGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetFirmwareVersion")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the firmware version.
     - GET /api/Device/GetFirmwareVersion
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     
     - returns: RequestBuilder<String> 
     */
    public class func apiDeviceGetFirmwareVersionGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/api/Device/GetFirmwareVersion"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetLatestReadingGet(completion: @escaping ((_ data: DeviceReading?,_ error: Error?) -> Void)) {
        apiDeviceGetLatestReadingGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetLatestReading")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     - GET /api/Device/GetLatestReading
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }}]
     
     - returns: RequestBuilder<DeviceReading> 
     */
    public class func apiDeviceGetLatestReadingGetWithRequestBuilder() -> RequestBuilder<DeviceReading> {
        let path = "/api/Device/GetLatestReading"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<DeviceReading>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the monthwise aggregation.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetMonthwiseAggregationGet(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil, completion: @escaping ((_ data: [ReadingAggregationViewModel]?,_ error: Error?) -> Void)) {
        apiDeviceGetMonthwiseAggregationGetWithRequestBuilder(deviceId: deviceId, readingFieldName: readingFieldName, fromDate: fromDate, toDate: toDate).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetMonthwiseAggregation")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the monthwise aggregation.
     - GET /api/Device/GetMonthwiseAggregation
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     }, {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     } ]}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     
     - returns: RequestBuilder<[ReadingAggregationViewModel]> 
     */
    public class func apiDeviceGetMonthwiseAggregationGetWithRequestBuilder(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil) -> RequestBuilder<[ReadingAggregationViewModel]> {
        let path = "/api/Device/GetMonthwiseAggregation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(), 
            "readingFieldName": readingFieldName, 
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),readingFieldName :\(readingFieldName ?? ""),fromDate :\(fromDate?.encodeToJSON() ?? ""),toDate :\(toDate?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<[ReadingAggregationViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the index of the readings by log.
     
     - parameter logIndex: (query) Index of the log. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetReadingsByLogIndexGet(logIndex: Int64? = nil, completion: @escaping ((_ data: [DeviceReading]?,_ error: Error?) -> Void)) {
        apiDeviceGetReadingsByLogIndexGetWithRequestBuilder(logIndex: logIndex).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetReadingsByLogIndex")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the index of the readings by log.
     - GET /api/Device/GetReadingsByLogIndex
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ]}]
     
     - parameter logIndex: (query) Index of the log. (optional)
     
     - returns: RequestBuilder<[DeviceReading]> 
     */
    public class func apiDeviceGetReadingsByLogIndexGetWithRequestBuilder(logIndex: Int64? = nil) -> RequestBuilder<[DeviceReading]> {
        let path = "/api/Device/GetReadingsByLogIndex"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "logIndex": logIndex?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("logIndex :\(logIndex?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<[DeviceReading]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the readings.
     
     - parameter startDate: (query) The start date. (optional)
     - parameter endDate: (query) The end date. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetReadingsGet(startDate: String? = nil, endDate: String? = nil, completion: @escaping ((_ data: [DeviceReading]?,_ error: Error?) -> Void)) {
        apiDeviceGetReadingsGetWithRequestBuilder(startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetReadings")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the readings.
     - GET /api/Device/GetReadings
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     }, {
     "radon" : 1.2315135367772556,
     "logIndex" : 9,
     "updatedBy" : 2,
     "syncDateTimeId" : "syncDateTimeId",
     "airPressure" : 1.1730742509559433,
     "co2" : 1.4894159098541704,
     "syncDate" : "2000-01-23T04:56:07.000+00:00",
     "lastSyncDate" : "2000-01-23T04:56:07.000+00:00",
     "voc" : 1.0246457001441578,
     "userId" : 4,
     "deviceId" : 7,
     "timeOffsetUtc" : 9,
     "factoryResetIteration" : 3,
     "logTypeId" : 9,
     "timestampFromDevice" : 4,
     "timeStampUtc" : 6,
     "inspectionid" : 5,
     "discardedCount" : 6,
     "noiseCount" : 8,
     "createdBy" : 6,
     "temperature" : 6.84685269835264,
     "humidity" : 7.457744773683766,
     "id" : 1
     } ]}]
     
     - parameter startDate: (query) The start date. (optional)
     - parameter endDate: (query) The end date. (optional)
     
     - returns: RequestBuilder<[DeviceReading]> 
     */
    public class func apiDeviceGetReadingsGetWithRequestBuilder(startDate: String? = nil, endDate: String? = nil) -> RequestBuilder<[DeviceReading]> {
        let path = "/api/Device/GetReadings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "startDate": startDate?.encodeToJSON(), 
            "endDate": endDate?.encodeToJSON()
        ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("startDate :\(startDate?.encodeToJSON() ?? ""),endDate :\(endDate?.encodeToJSON() ?? "")")
       
        
        let requestBuilder: RequestBuilder<[DeviceReading]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     get shared home device owner id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    //    public class func apiDeviceGetSharedDeviceUsersGet(completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
    //        apiDeviceGetSharedDeviceUsersGetWithRequestBuilder().execute { (response, error) -> Void in
    //            completion(response?.body, error);
    //        }
    //    }
    
    
    /**
     get shared home device owner id
     - GET /api/Device/GetSharedDeviceUsers
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]
     
     - returns: RequestBuilder<[Any]> 
     */
    //    public class func apiDeviceGetSharedDeviceUsersGetWithRequestBuilder() -> RequestBuilder<[Any]> {
    //        let path = "/api/Device/GetSharedDeviceUsers"
    //        let URLString = SwaggerClientAPI.basePath + path
    //        let parameters: [String:Any]? = nil
    //
    //        let url = NSURLComponents(string: URLString)
    //
    //
    //        let requestBuilder: RequestBuilder<[Any]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
    //
    //        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    //    }
    
    /**
     Gets the user device details.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetUserDeviceDetailsGet(deviceId: Int64? = nil, completion: @escaping ((_ data: DeviceUserDetails?,_ error: Error?) -> Void)) {
        apiDeviceGetUserDeviceDetailsGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetUserDeviceDetails")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the user device details.
     - GET /api/Device/GetUserDeviceDetails
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "dateofbirth" : "2000-01-23T04:56:07.000+00:00",
     "firstname" : "firstname",
     "licensetype" : "licensetype",
     "address" : "address",
     "stateid" : 5,
     "genderid" : 2,
     "cityid" : 5,
     "deviceid" : 0,
     "userid" : 6,
     "lastname" : "lastname",
     "zipcode" : "zipcode",
     "licensetypeid" : 1,
     "companyname" : "companyname",
     "mitigationsystemtypeid" : 9,
     "buildingtypeid" : 7,
     "email" : "email"
     }}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     
     - returns: RequestBuilder<DeviceUserDetails> 
     */
    public class func apiDeviceGetUserDeviceDetailsGetWithRequestBuilder(deviceId: Int64? = nil) -> RequestBuilder<DeviceUserDetails> {
        let path = "/api/Device/GetUserDeviceDetails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? "")")
        let requestBuilder: RequestBuilder<DeviceUserDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Gets the weekwise aggregation.
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceGetWeekwiseAggregationGet(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil, completion: @escaping ((_ data: [ReadingAggregationViewModel]?,_ error: Error?) -> Void)) {
        apiDeviceGetWeekwiseAggregationGetWithRequestBuilder(deviceId: deviceId, readingFieldName: readingFieldName, fromDate: fromDate, toDate: toDate).execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetWeekwiseAggregation")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Gets the weekwise aggregation.
     - GET /api/Device/GetWeekwiseAggregation
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     }, {
     "readingItemName" : "readingItemName",
     "period" : "period",
     "value" : 0.8008281904610115
     } ]}]
     
     - parameter deviceId: (query) The device identifier. (optional)
     - parameter readingFieldName: (query) Name of the reading field. (optional)
     - parameter fromDate: (query) From date. (optional)
     - parameter toDate: (query) To date. (optional)
     
     - returns: RequestBuilder<[ReadingAggregationViewModel]> 
     */
    public class func apiDeviceGetWeekwiseAggregationGetWithRequestBuilder(deviceId: Int64? = nil, readingFieldName: String? = nil, fromDate: String? = nil, toDate: String? = nil) -> RequestBuilder<[ReadingAggregationViewModel]> {
        let path = "/api/Device/GetWeekwiseAggregation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceId": deviceId?.encodeToJSON(), 
            "readingFieldName": readingFieldName, 
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),readingFieldName :\(readingFieldName ?? ""),fromDate :\(fromDate?.encodeToJSON() ?? ""),toDate :\(toDate?.encodeToJSON() ?? "")")
        
        let requestBuilder: RequestBuilder<[ReadingAggregationViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     get Mitigation System Type
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    //    public class func apiDeviceHomeMitigationSystemTypeGet(completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
    //        apiDeviceHomeMitigationSystemTypeGetWithRequestBuilder().execute { (response, error) -> Void in
    //            completion(response?.body, error);
    //        }
    //    }
    
    
    /**
     get Mitigation System Type
     - GET /api/Device/HomeMitigationSystemType
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]
     
     - returns: RequestBuilder<[Any]> 
     */
    //    public class func apiDeviceHomeMitigationSystemTypeGetWithRequestBuilder() -> RequestBuilder<[Any]> {
    //        let path = "/api/Device/HomeMitigationSystemType"
    //        let URLString = SwaggerClientAPI.basePath + path
    //        let parameters: [String:Any]? = nil
    //
    //        let url = NSURLComponents(string: URLString)
    //
    //
    //        let requestBuilder: RequestBuilder<[DeviceDetails]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
    //
    //        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    //    }
    
    /**
     get building type
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    //    public class func apiDeviceHomebuildingTypeGet(completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
    //        apiDeviceHomebuildingTypeGetWithRequestBuilder().execute { (response, error) -> Void in
    //            completion(response?.body, error);
    //        }
    //    }
    
    
    /**
     get building type
     - GET /api/Device/HomebuildingType
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]
     
     - returns: RequestBuilder<[Any]> 
     */
    //    public class func apiDeviceHomebuildingTypeGetWithRequestBuilder() -> RequestBuilder<[Any]> {
    //        let path = "/api/Device/HomebuildingType"
    //        let URLString = SwaggerClientAPI.basePath + path
    //        let parameters: [String:Any]? = nil
    //
    //        let url = NSURLComponents(string: URLString)
    //
    //
    //        let requestBuilder: RequestBuilder<[Any]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
    //
    //        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    //    }
    
    /**
     Determines whether [is home device shared].
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceIsHomeDeviceSharedGet(completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiDeviceIsHomeDeviceSharedGetWithRequestBuilder().execute { (response, error) -> Void in
            textLog.writeAPI("/api/Device/GetWeekwiseAggregation")
            textLog.writeAPI(String(format:"Response success %d",response?.statusCode ?? 0))
            completion(response?.body, error);
        }
    }
    
    
    /**
     Determines whether [is home device shared].
     - GET /api/Device/IsHomeDeviceShared
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=true}]
     
     - returns: RequestBuilder<Bool> 
     */
    public class func apiDeviceIsHomeDeviceSharedGetWithRequestBuilder() -> RequestBuilder<Bool> {
        let path = "/api/Device/IsHomeDeviceShared"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Marks the device settings as updated to device.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceMarkDeviceSettingsAsUpdatedToDevicePost(completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceMarkDeviceSettingsAsUpdatedToDevicePostWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Marks the device settings as updated to device.
     - POST /api/Device/MarkDeviceSettingsAsUpdatedToDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceMarkDeviceSettingsAsUpdatedToDevicePostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/Device/MarkDeviceSettingsAsUpdatedToDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)

        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceRequestLatestReadingsPost(completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceRequestLatestReadingsPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     - POST /api/Device/RequestLatestReadings
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceRequestLatestReadingsPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/Device/RequestLatestReadings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        textLog.writeAPI(URLString)
        
        let url = NSURLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Searches the dashboard home devices.
     
     - parameter longtitude: (query) The longtitude. (optional)
     - parameter latitude: (query) The latitude. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter radius: (query) The radius. (optional)
     - parameter timeDifference: (query)  (optional)
     - parameter buildingTypeId: (query)  (optional)
     - parameter mitigationTypeId: (query)  (optional)
     - parameter sharedUserId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceSearchDashboardHomeDevicesGet(longtitude: Double? = nil, latitude: Double? = nil, searchKey: String? = nil, deviceTypeId: Int? = nil, radius: Double? = nil, timeDifference: String? = nil, buildingTypeId: String? = nil, mitigationTypeId: String? = nil, sharedUserId: Int64? = nil, completion: @escaping ((_ data: [SimpleCluster]?,_ error: Error?) -> Void)) {
        apiDeviceSearchDashboardHomeDevicesGetWithRequestBuilder(longtitude: longtitude, latitude: latitude, searchKey: searchKey, deviceTypeId: deviceTypeId, radius: radius, timeDifference: timeDifference, buildingTypeId: buildingTypeId, mitigationTypeId: mitigationTypeId, sharedUserId: sharedUserId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    
    /**
     Searches the dashboard home devices.
     - GET /api/Device/SearchDashboardHomeDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=[ {
     "data" : [ "{}", "{}" ],
     "latLonCenter" : {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     },
     "id" : 0,
     "latLonList" : [ {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     }, {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     } ]
     }, {
     "data" : [ "{}", "{}" ],
     "latLonCenter" : {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     },
     "id" : 0,
     "latLonList" : [ {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     }, {
     "latitude" : 6.027456183070403,
     "longitude" : 1.4658129805029452
     } ]
     } ]}]
     
     - parameter longtitude: (query) The longtitude. (optional)
     - parameter latitude: (query) The latitude. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter radius: (query) The radius. (optional)
     - parameter timeDifference: (query)  (optional)
     - parameter buildingTypeId: (query)  (optional)
     - parameter mitigationTypeId: (query)  (optional)
     - parameter sharedUserId: (query)  (optional)
     
     - returns: RequestBuilder<[SimpleCluster]> 
     */
    public class func apiDeviceSearchDashboardHomeDevicesGetWithRequestBuilder(longtitude: Double? = nil, latitude: Double? = nil, searchKey: String? = nil, deviceTypeId: Int? = nil, radius: Double? = nil, timeDifference: String? = nil, buildingTypeId: String? = nil, mitigationTypeId: String? = nil, sharedUserId: Int64? = nil) -> RequestBuilder<[SimpleCluster]> {
        let path = "/api/Device/SearchDashboardHomeDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "longtitude": longtitude, 
            "latitude": latitude, 
            "searchKey": searchKey, 
            "deviceTypeId": deviceTypeId?.encodeToJSON(), 
            "radius": radius, 
            "timeDifference": timeDifference, 
            "buildingTypeId": buildingTypeId, 
            "mitigationTypeId": mitigationTypeId, 
            "sharedUserId": sharedUserId?.encodeToJSON()
        ])
        textLog.writeAPI(URLString)
        textLog.writeAPI("longtitude :\(longtitude ?? 0.0),latitude :\(latitude ?? 0.0),searchKey :\(searchKey ?? ""),deviceTypeId :\(deviceTypeId?.encodeToJSON() ?? ""),radius :\(radius ?? 0),timeDifference :\(timeDifference ?? ""),buildingTypeId :\(buildingTypeId ?? ""),mitigationTypeId :\(mitigationTypeId ?? ""),sharedUserId :\(sharedUserId?.encodeToJSON() ?? "")")
       
        
        let requestBuilder: RequestBuilder<[SimpleCluster]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     Searches the home devices.
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceSearchHomeDevicesGet(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil, completion: @escaping ((_ data: HomeSearchResultSearchHomeDeviceModel?,_ error: Error?) -> Void)) {
        apiDeviceSearchHomeDevicesGetWithRequestBuilder(deviceTypeId: deviceTypeId, deviceStatusId: deviceStatusId, searchKey: searchKey, pageCount: pageCount, pageNumber: pageNumber, sortByColumn: sortByColumn, sortAsc: sortAsc).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    
    /**
     Searches the home devices.
     - GET /api/Device/SearchHomeDevices
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "records" : [ {
     "shareddeviceid" : 6,
     "latitudedevice" : 1.4658129805029452,
     "devicetimeDifference" : "devicetimeDifference",
     "isdeleted" : true,
     "deviceLatitude" : 9.301444243932576,
     "issharedeleted" : true,
     "shareddevicename" : "shareddevicename",
     "readingtimestampfromdevice" : "2000-01-23T04:56:07.000+00:00",
     "longitudedevice" : 5.962133916683182,
     "deviceLongtitude" : 3.616076749251911,
     "sharedusername" : "sharedusername",
     "deviceusertypeid" : 7,
     "firmwareVersion" : "firmwareVersion",
     "isshareddevice" : true,
     "sharedcustomername" : "sharedcustomername",
     "ownername" : "ownername",
     "sharedcustomeremail" : "sharedcustomeremail",
     "ownerid" : 5,
     "ownercustomeremail" : "ownercustomeremail",
     "devicelocation" : "devicelocation",
     "modelName" : "modelName",
     "serialid" : "serialid",
     "name" : "name",
     "deviceTimeZone" : "deviceTimeZone",
     "owenercustomername" : "owenercustomername",
     "shareduserid" : 2
     }, {
     "shareddeviceid" : 6,
     "latitudedevice" : 1.4658129805029452,
     "devicetimeDifference" : "devicetimeDifference",
     "isdeleted" : true,
     "deviceLatitude" : 9.301444243932576,
     "issharedeleted" : true,
     "shareddevicename" : "shareddevicename",
     "readingtimestampfromdevice" : "2000-01-23T04:56:07.000+00:00",
     "longitudedevice" : 5.962133916683182,
     "deviceLongtitude" : 3.616076749251911,
     "sharedusername" : "sharedusername",
     "deviceusertypeid" : 7,
     "firmwareVersion" : "firmwareVersion",
     "isshareddevice" : true,
     "sharedcustomername" : "sharedcustomername",
     "ownername" : "ownername",
     "sharedcustomeremail" : "sharedcustomeremail",
     "ownerid" : 5,
     "ownercustomeremail" : "ownercustomeremail",
     "devicelocation" : "devicelocation",
     "modelName" : "modelName",
     "serialid" : "serialid",
     "name" : "name",
     "deviceTimeZone" : "deviceTimeZone",
     "owenercustomername" : "owenercustomername",
     "shareduserid" : 2
     } ],
     "totalNoOfRecords" : 0
     }}]
     
     - parameter deviceTypeId: (query) The device type identifier. (optional)
     - parameter deviceStatusId: (query) The device status identifier. (optional)
     - parameter searchKey: (query) The search key. (optional)
     - parameter pageCount: (query) The page count. (optional)
     - parameter pageNumber: (query) The page number. (optional)
     - parameter sortByColumn: (query) The sort by column. (optional)
     - parameter sortAsc: (query) if set to {true} [sort asc]. (optional, default to true)
     
     - returns: RequestBuilder<HomeSearchResultSearchHomeDeviceModel> 
     */
    public class func apiDeviceSearchHomeDevicesGetWithRequestBuilder(deviceTypeId: Int64? = nil, deviceStatusId: Int64? = nil, searchKey: String? = nil, pageCount: Int? = nil, pageNumber: Int? = nil, sortByColumn: String? = nil, sortAsc: Bool? = nil) -> RequestBuilder<HomeSearchResultSearchHomeDeviceModel> {
        let path = "/api/Device/SearchHomeDevices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceTypeId": deviceTypeId?.encodeToJSON(), 
            "deviceStatusId": deviceStatusId?.encodeToJSON(), 
            "searchKey": searchKey, 
            "pageCount": pageCount?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortByColumn": sortByColumn, 
            "sortAsc": sortAsc
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceTypeId :\(deviceTypeId?.encodeToJSON() ?? ""),deviceStatusId :\(deviceStatusId?.encodeToJSON() ?? ""),searchKey :\(searchKey ?? ""),pageCount :\(pageCount?.encodeToJSON() ?? ""),pageNumber :\(pageNumber?.encodeToJSON() ?? ""),sortByColumn :\(sortByColumn ?? ""),sortAsc :\(sortAsc ?? true)")
       
        let requestBuilder: RequestBuilder<HomeSearchResultSearchHomeDeviceModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     set device inspection status per device
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceSetDeviceCommandOnServerPost(model: DeviceCommandOnServer? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceSetDeviceCommandOnServerPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     set device inspection status per device
     - POST /api/Device/SetDeviceCommandOnServer
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceSetDeviceCommandOnServerPostWithRequestBuilder(model: DeviceCommandOnServer? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/SetDeviceCommandOnServer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     share home device for professional user
     
     - parameter email: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceSharedHomeDevicePost(email: String? = nil, deviceId: Int64? = nil, completion: @escaping ((_ data: Int64?,_ error: Error?) -> Void)) {
        apiDeviceSharedHomeDevicePostWithRequestBuilder(email: email, deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    
    /**
     share home device for professional user
     - POST /api/Device/SharedHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter email: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     
     - returns: RequestBuilder<Int64> 
     */
    public class func apiDeviceSharedHomeDevicePostWithRequestBuilder(email: String? = nil, deviceId: Int64? = nil) -> RequestBuilder<Int64> {
        let path = "/api/Device/SharedHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email, 
            "deviceId": deviceId?.encodeToJSON()
        ])
        
        textLog.writeAPI(URLString)
        textLog.writeAPI("deviceId :\(deviceId?.encodeToJSON() ?? ""),email :\(email ?? "")")
        let requestBuilder: RequestBuilder<Int64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     update device location.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUpdateDeviceGeoCodePost(model: DeviceLocation? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceUpdateDeviceGeoCodePostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     update device location.
     - POST /api/Device/UpdateDeviceGeoCode
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceUpdateDeviceGeoCodePostWithRequestBuilder(model: DeviceLocation? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UpdateDeviceGeoCode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updates the setting.
     
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUpdateDeviceSettingDetailsPost(data: [UpdateDeviceSettingViewModel]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceUpdateDeviceSettingDetailsPostWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Updates the setting.
     - POST /api/Device/UpdateDeviceSettingDetails
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter data: (body)  (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceUpdateDeviceSettingDetailsPostWithRequestBuilder(data: [UpdateDeviceSettingViewModel]? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UpdateDeviceSettingDetails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: data) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updates the home device.
     
     - parameter detail: (body) The detail. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUpdateHomeDevicePost(detail: SearchHomeDeviceModel? = nil, completion: @escaping ((_ data: SearchHomeDeviceModel?,_ error: Error?) -> Void)) {
        apiDeviceUpdateHomeDevicePostWithRequestBuilder(detail: detail).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    
    /**
     Updates the home device.
     - POST /api/Device/UpdateHomeDevice
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example={
     "shareddeviceid" : 6,
     "latitudedevice" : 1.4658129805029452,
     "devicetimeDifference" : "devicetimeDifference",
     "isdeleted" : true,
     "deviceLatitude" : 9.301444243932576,
     "issharedeleted" : true,
     "shareddevicename" : "shareddevicename",
     "readingtimestampfromdevice" : "2000-01-23T04:56:07.000+00:00",
     "longitudedevice" : 5.962133916683182,
     "deviceLongtitude" : 3.616076749251911,
     "sharedusername" : "sharedusername",
     "deviceusertypeid" : 7,
     "firmwareVersion" : "firmwareVersion",
     "isshareddevice" : true,
     "sharedcustomername" : "sharedcustomername",
     "ownername" : "ownername",
     "sharedcustomeremail" : "sharedcustomeremail",
     "ownerid" : 5,
     "ownercustomeremail" : "ownercustomeremail",
     "devicelocation" : "devicelocation",
     "modelName" : "modelName",
     "serialid" : "serialid",
     "name" : "name",
     "deviceTimeZone" : "deviceTimeZone",
     "owenercustomername" : "owenercustomername",
     "shareduserid" : 2
     }}]
     
     - parameter detail: (body) The detail. (optional)
     
     - returns: RequestBuilder<SearchHomeDeviceModel> 
     */
    public class func apiDeviceUpdateHomeDevicePostWithRequestBuilder(detail: SearchHomeDeviceModel? = nil) -> RequestBuilder<SearchHomeDeviceModel> {
        let path = "/api/Device/UpdateHomeDevice"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: detail)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: detail) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<SearchHomeDeviceModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Updates the setting.
     
     - parameter model: (body) The model. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUpdateSettingPost(model: UpdateDeviceSettingViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceUpdateSettingPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Updates the setting.
     - POST /api/Device/UpdateSetting
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body) The model. (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceUpdateSettingPostWithRequestBuilder(model: UpdateDeviceSettingViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UpdateSetting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUpdateWifiStatusPost(model: UpdateDeviceModel? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiDeviceUpdateWifiStatusPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    
    /**
     - POST /api/Device/UpdateWifiStatus
     - API Key:
     - type: apiKey token
     - name: Bearer
     - examples: [{contentType=application/json, example=0}]
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<Int> 
     */
    public class func apiDeviceUpdateWifiStatusPostWithRequestBuilder(model: UpdateDeviceModel? = nil) -> RequestBuilder<Int> {
        let path = "/api/Device/UpdateWifiStatus"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = NSURLComponents(string: URLString)
        
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upload the readings.
     
     - parameter readingViewmodels: (body) List of Readings SN.AirQuality.Web.ViewModels.DeviceReadingViewModel (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceUploadReadingsPost(readingViewmodels: [DeviceReadingViewModel]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceUploadReadingsPostWithRequestBuilder(readingViewmodels: readingViewmodels).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Upload the readings.
     - POST /api/Device/UploadReadings
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter readingViewmodels: (body) List of Readings SN.AirQuality.Web.ViewModels.DeviceReadingViewModel (optional)
     
     - returns: RequestBuilder<Void> 
     */
    public class func apiDeviceUploadReadingsPostWithRequestBuilder(readingViewmodels: [DeviceReadingViewModel]? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UploadReadings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: readingViewmodels)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: readingViewmodels) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /**
     Upload the readings.
     
     - parameter deviceDetails: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiDeviceInitiativeFirewareVserionPost(deviceDetails: [UpdateFirmware]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiDeviceInitiativeFirewareVserionPostWithRequestBuilder(deviceDetails: deviceDetails).execute { (response, error) -> Void in
            completion(error);
        }
    }
    
    
    /**
     Upload the readings.
     - POST /api/Device/InitiativeFirewareVserion
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter deviceDetails: (body)  (optional)
     
     - returns: RequestBuilder<Void>
     */
    public class func apiDeviceInitiativeFirewareVserionPostWithRequestBuilder(deviceDetails: [UpdateFirmware]? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UpdateFirmwareVersion"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceDetails)
        
        let url = NSURLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: deviceDetails) ?? ""
        textLog.writeAPI(objParam)
        
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    /* - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDeviceUpdateBluetoothDataSyncPost(model: SNAirQualityWebViewModelsUpdateBluetoothSync? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiDeviceUpdateBluetoothDataSyncPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }
    
    
    /**
     - POST /api/Device/UpdateBluetoothDataSync
     - API Key:
     - type: apiKey token
     - name: Bearer
     
     - parameter model: (body)  (optional)
     
     - returns: RequestBuilder<Void>
     */
    open class func apiDeviceUpdateBluetoothDataSyncPostWithRequestBuilder(model: SNAirQualityWebViewModelsUpdateBluetoothSync? = nil) -> RequestBuilder<Void> {
        let path = "/api/Device/UpdateBluetoothDataSync"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)
        
        let url = URLComponents(string: URLString)
        textLog.writeAPI(URLString)
        let objParam = JSONEncodingHelper.jsonToString(forEncodableObject: model) ?? ""
        textLog.writeAPI(objParam)
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
